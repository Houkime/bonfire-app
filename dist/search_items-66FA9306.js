searchNodes=[{"type":"module","title":"Bonfire.Data.AccessControl.Acl","doc":"Conceptually, a complete list of all permissions for everybody. In practice, it's a partial specification, and anything not explicitly granted is assumed to be denied. Can be reused to secure multiple objects, thus exists independently of any object.","ref":"Bonfire.Data.AccessControl.Acl.html"},{"type":"function","title":"Bonfire.Data.AccessControl.Acl.changeset/2","doc":"","ref":"Bonfire.Data.AccessControl.Acl.html#changeset/2"},{"type":"module","title":"Bonfire.Data.AccessControl.Circle","doc":"","ref":"Bonfire.Data.AccessControl.Circle.html"},{"type":"function","title":"Bonfire.Data.AccessControl.Circle.changeset/2","doc":"","ref":"Bonfire.Data.AccessControl.Circle.html#changeset/2"},{"type":"module","title":"Bonfire.Data.AccessControl.Controlled","doc":"An object is linked to one or more Acl s by the Controlled multimixin, which pairs an object ID with an ACL ID. Because it is a multimixin, a given object can have multiple ACLs applied. In the case of overlap, permissions are combined with false being prioritised.","ref":"Bonfire.Data.AccessControl.Controlled.html"},{"type":"function","title":"Bonfire.Data.AccessControl.Controlled.changeset/2","doc":"","ref":"Bonfire.Data.AccessControl.Controlled.html#changeset/2"},{"type":"module","title":"Bonfire.Data.AccessControl.Encircle","doc":"","ref":"Bonfire.Data.AccessControl.Encircle.html"},{"type":"function","title":"Bonfire.Data.AccessControl.Encircle.changeset/2","doc":"","ref":"Bonfire.Data.AccessControl.Encircle.html#changeset/2"},{"type":"module","title":"Bonfire.Data.AccessControl.Grant","doc":"","ref":"Bonfire.Data.AccessControl.Grant.html"},{"type":"function","title":"Bonfire.Data.AccessControl.Grant.changeset/2","doc":"","ref":"Bonfire.Data.AccessControl.Grant.html#changeset/2"},{"type":"module","title":"Bonfire.Data.AccessControl.InstanceAdmin","doc":"A mixin for superpowers","ref":"Bonfire.Data.AccessControl.InstanceAdmin.html"},{"type":"function","title":"Bonfire.Data.AccessControl.InstanceAdmin.changeset/3","doc":"","ref":"Bonfire.Data.AccessControl.InstanceAdmin.html#changeset/3"},{"type":"module","title":"Bonfire.Data.AccessControl.Stereotyped","doc":"A marker that identifies special context-dependent semantics to the system.","ref":"Bonfire.Data.AccessControl.Stereotyped.html"},{"type":"function","title":"Bonfire.Data.AccessControl.Stereotyped.changeset/2","doc":"","ref":"Bonfire.Data.AccessControl.Stereotyped.html#changeset/2"},{"type":"module","title":"Bonfire.Data.AccessControl.Verb","doc":"","ref":"Bonfire.Data.AccessControl.Verb.html"},{"type":"function","title":"Bonfire.Data.AccessControl.Verb.changeset/2","doc":"","ref":"Bonfire.Data.AccessControl.Verb.html#changeset/2"},{"type":"module","title":"Bonfire.Data.ActivityPub.Actor","doc":"","ref":"Bonfire.Data.ActivityPub.Actor.html"},{"type":"function","title":"Bonfire.Data.ActivityPub.Actor.changeset/2","doc":"","ref":"Bonfire.Data.ActivityPub.Actor.html#changeset/2"},{"type":"module","title":"Bonfire.Data.ActivityPub.Actor.Migration","doc":"","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html"},{"type":"macro","title":"Bonfire.Data.ActivityPub.Actor.Migration.create_actor_table/0","doc":"","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#create_actor_table/0"},{"type":"macro","title":"Bonfire.Data.ActivityPub.Actor.Migration.create_actor_table/1","doc":"","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#create_actor_table/1"},{"type":"function","title":"Bonfire.Data.ActivityPub.Actor.Migration.drop_actor_table/0","doc":"","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#drop_actor_table/0"},{"type":"macro","title":"Bonfire.Data.ActivityPub.Actor.Migration.migrate_actor/0","doc":"","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#migrate_actor/0"},{"type":"macro","title":"Bonfire.Data.ActivityPub.Actor.Migration.migrate_actor/1","doc":"","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#migrate_actor/1"},{"type":"module","title":"Bonfire.Data.ActivityPub.Peer","doc":"Federated instances","ref":"Bonfire.Data.ActivityPub.Peer.html"},{"type":"function","title":"Bonfire.Data.ActivityPub.Peer.changeset/3","doc":"","ref":"Bonfire.Data.ActivityPub.Peer.html#changeset/3"},{"type":"module","title":"Bonfire.Data.ActivityPub.Peered","doc":"Federated actors or objects","ref":"Bonfire.Data.ActivityPub.Peered.html"},{"type":"function","title":"Bonfire.Data.ActivityPub.Peered.changeset/3","doc":"","ref":"Bonfire.Data.ActivityPub.Peered.html#changeset/3"},{"type":"module","title":"Bonfire.Data.Assort.Ranked","doc":"A reusable table to link child or related items and also rank sibling items. Usage (for global ranking, otherwise you should specify scope): { :ok , first } = Bonfire.Data.Assort.Ranked . changeset ( %{ item_id : &quot;01FGTH48ZZD08ADBHQ260KYJHW&quot; } ) |&gt; repo ( ) . insert second = Bonfire.Data.Assort.Ranked . changeset ( %{ item_id : &quot;01FGTH0N3YPBS5MNNAEAEVV54J&quot; } ) |&gt; repo ( ) . insert import Ecto.Query Bonfire.Data.Assort.Ranked |&gt; order_by ( :rank ) |&gt; repo ( ) . all first |&gt; Bonfire.Data.Assort.Ranked . changeset ( %{ rank_set : :last } ) |&gt; repo ( ) . update Bonfire.Data.Assort.Ranked |&gt; order_by ( :rank ) |&gt; repo ( ) . all","ref":"Bonfire.Data.Assort.Ranked.html"},{"type":"function","title":"Bonfire.Data.Assort.Ranked.changeset/2","doc":"","ref":"Bonfire.Data.Assort.Ranked.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Assort.Ranked.Migration","doc":"","ref":"Bonfire.Data.Assort.Ranked.Migration.html"},{"type":"macro","title":"Bonfire.Data.Assort.Ranked.Migration.create_ranked_table/0","doc":"","ref":"Bonfire.Data.Assort.Ranked.Migration.html#create_ranked_table/0"},{"type":"macro","title":"Bonfire.Data.Assort.Ranked.Migration.create_ranked_table/1","doc":"","ref":"Bonfire.Data.Assort.Ranked.Migration.html#create_ranked_table/1"},{"type":"macro","title":"Bonfire.Data.Assort.Ranked.Migration.create_unique_index/1","doc":"","ref":"Bonfire.Data.Assort.Ranked.Migration.html#create_unique_index/1"},{"type":"function","title":"Bonfire.Data.Assort.Ranked.Migration.drop_ranked_table/0","doc":"","ref":"Bonfire.Data.Assort.Ranked.Migration.html#drop_ranked_table/0"},{"type":"function","title":"Bonfire.Data.Assort.Ranked.Migration.drop_unique_index/1","doc":"","ref":"Bonfire.Data.Assort.Ranked.Migration.html#drop_unique_index/1"},{"type":"macro","title":"Bonfire.Data.Assort.Ranked.Migration.migrate_ranked/0","doc":"","ref":"Bonfire.Data.Assort.Ranked.Migration.html#migrate_ranked/0"},{"type":"macro","title":"Bonfire.Data.Assort.Ranked.Migration.migrate_ranked/1","doc":"","ref":"Bonfire.Data.Assort.Ranked.Migration.html#migrate_ranked/1"},{"type":"module","title":"Bonfire.Data.Edges.Edge","doc":"","ref":"Bonfire.Data.Edges.Edge.html"},{"type":"function","title":"Bonfire.Data.Edges.Edge.changeset/2","doc":"","ref":"Bonfire.Data.Edges.Edge.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Edges.EdgeTotal","doc":"","ref":"Bonfire.Data.Edges.EdgeTotal.html"},{"type":"function","title":"Bonfire.Data.Edges.EdgeTotal.changeset/2","doc":"","ref":"Bonfire.Data.Edges.EdgeTotal.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Identity.Account","doc":"An account is an identity for authentication purposes. An account has one or more credentials with which it may identify.","ref":"Bonfire.Data.Identity.Account.html"},{"type":"function","title":"Bonfire.Data.Identity.Account.changeset/2","doc":"","ref":"Bonfire.Data.Identity.Account.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Identity.Accounted","doc":"A mixin for an account ID, indicating ownership Primarily used for Users.","ref":"Bonfire.Data.Identity.Accounted.html"},{"type":"function","title":"Bonfire.Data.Identity.Accounted.changeset/2","doc":"","ref":"Bonfire.Data.Identity.Accounted.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Identity.Alias","doc":"","ref":"Bonfire.Data.Identity.Alias.html"},{"type":"function","title":"Bonfire.Data.Identity.Alias.changeset/2","doc":"","ref":"Bonfire.Data.Identity.Alias.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Identity.AuthSecondFactor","doc":"A mixin that stores a second factor secret to authenticate an account.","ref":"Bonfire.Data.Identity.AuthSecondFactor.html"},{"type":"function","title":"Bonfire.Data.Identity.AuthSecondFactor.changeset/2","doc":"","ref":"Bonfire.Data.Identity.AuthSecondFactor.html#changeset/2"},{"type":"function","title":"Bonfire.Data.Identity.AuthSecondFactor.valid_totp?/2","doc":"","ref":"Bonfire.Data.Identity.AuthSecondFactor.html#valid_totp?/2"},{"type":"module","title":"Bonfire.Data.Identity.CareClosure","doc":"A recursive view of all entities taken care of by their root entities. Really, really do not query this without providing a branch_id.","ref":"Bonfire.Data.Identity.CareClosure.html"},{"type":"function","title":"Bonfire.Data.Identity.CareClosure.by_branch/1","doc":"","ref":"Bonfire.Data.Identity.CareClosure.html#by_branch/1"},{"type":"module","title":"Bonfire.Data.Identity.Caretaker","doc":"The entity responsible for something. In practice, it means that something is deleted when its caretaker is deleted. You can think of it as being like the creator, except: a) You can give it away. b) Objects can take care of arbitrary objects, such as e.g. custom ACLs created to permit people mentioned special permissions","ref":"Bonfire.Data.Identity.Caretaker.html"},{"type":"function","title":"Bonfire.Data.Identity.Caretaker.changeset/3","doc":"","ref":"Bonfire.Data.Identity.Caretaker.html#changeset/3"},{"type":"module","title":"Bonfire.Data.Identity.Character","doc":"A username mixin that denies reuse of the same or similar usernames even when the username has been deleted.","ref":"Bonfire.Data.Identity.Character.html"},{"type":"function","title":"Bonfire.Data.Identity.Character.changeset/3","doc":"","ref":"Bonfire.Data.Identity.Character.html#changeset/3"},{"type":"function","title":"Bonfire.Data.Identity.Character.hash/1","doc":"","ref":"Bonfire.Data.Identity.Character.html#hash/1"},{"type":"function","title":"Bonfire.Data.Identity.Character.uniform/1","doc":"","ref":"Bonfire.Data.Identity.Character.html#uniform/1"},{"type":"module","title":"Bonfire.Data.Identity.Credential","doc":"A Mixin that provides a password for local login.","ref":"Bonfire.Data.Identity.Credential.html"},{"type":"function","title":"Bonfire.Data.Identity.Credential.changeset/2","doc":"","ref":"Bonfire.Data.Identity.Credential.html#changeset/2"},{"type":"function","title":"Bonfire.Data.Identity.Credential.check_password/2","doc":"","ref":"Bonfire.Data.Identity.Credential.html#check_password/2"},{"type":"function","title":"Bonfire.Data.Identity.Credential.confirmation_changeset/2","doc":"","ref":"Bonfire.Data.Identity.Credential.html#confirmation_changeset/2"},{"type":"function","title":"Bonfire.Data.Identity.Credential.dummy_check/0","doc":"","ref":"Bonfire.Data.Identity.Credential.html#dummy_check/0"},{"type":"function","title":"Bonfire.Data.Identity.Credential.hash_password/1","doc":"","ref":"Bonfire.Data.Identity.Credential.html#hash_password/1"},{"type":"module","title":"Bonfire.Data.Identity.Credential.Migration","doc":"","ref":"Bonfire.Data.Identity.Credential.Migration.html"},{"type":"macro","title":"Bonfire.Data.Identity.Credential.Migration.create_credential_table/0","doc":"","ref":"Bonfire.Data.Identity.Credential.Migration.html#create_credential_table/0"},{"type":"macro","title":"Bonfire.Data.Identity.Credential.Migration.create_credential_table/1","doc":"","ref":"Bonfire.Data.Identity.Credential.Migration.html#create_credential_table/1"},{"type":"function","title":"Bonfire.Data.Identity.Credential.Migration.drop_credential_table/0","doc":"","ref":"Bonfire.Data.Identity.Credential.Migration.html#drop_credential_table/0"},{"type":"macro","title":"Bonfire.Data.Identity.Credential.Migration.migrate_credential/0","doc":"","ref":"Bonfire.Data.Identity.Credential.Migration.html#migrate_credential/0"},{"type":"macro","title":"Bonfire.Data.Identity.Credential.Migration.migrate_credential/1","doc":"","ref":"Bonfire.Data.Identity.Credential.Migration.html#migrate_credential/1"},{"type":"module","title":"Bonfire.Data.Identity.Email","doc":"","ref":"Bonfire.Data.Identity.Email.html"},{"type":"function","title":"Bonfire.Data.Identity.Email.changeset/3","doc":"Options: email_regex: Regexp.t (default very minimal validation) must_confirm?: bool (default true)","ref":"Bonfire.Data.Identity.Email.html#changeset/3"},{"type":"function","title":"Bonfire.Data.Identity.Email.confirm/1","doc":"Changeset function. Marks the user's email as confirmed and removes their confirmation token.","ref":"Bonfire.Data.Identity.Email.html#confirm/1"},{"type":"function","title":"Bonfire.Data.Identity.Email.may_confirm?/2","doc":"","ref":"Bonfire.Data.Identity.Email.html#may_confirm?/2"},{"type":"function","title":"Bonfire.Data.Identity.Email.may_request_confirm_email?/2","doc":"Checks whether the user should be able to request a confirm email","ref":"Bonfire.Data.Identity.Email.html#may_request_confirm_email?/2"},{"type":"function","title":"Bonfire.Data.Identity.Email.put_token/1","doc":"Changeset function. Unconditionally sets the user as unconfirmed, generates a confirmation token and puts an expiry on it determined by the :confirm_duration config key (default one day).","ref":"Bonfire.Data.Identity.Email.html#put_token/1"},{"type":"function","title":"Bonfire.Data.Identity.Email.should_request_or_refresh?/2","doc":"Checks whether the user should request a new confirmation token or refresh it","ref":"Bonfire.Data.Identity.Email.html#should_request_or_refresh?/2"},{"type":"type","title":"Bonfire.Data.Identity.Email.t/0","doc":"","ref":"Bonfire.Data.Identity.Email.html#t:t/0"},{"type":"module","title":"Bonfire.Data.Identity.ExtraInfo","doc":"","ref":"Bonfire.Data.Identity.ExtraInfo.html"},{"type":"function","title":"Bonfire.Data.Identity.ExtraInfo.changeset/3","doc":"","ref":"Bonfire.Data.Identity.ExtraInfo.html#changeset/3"},{"type":"module","title":"Bonfire.Data.Identity.Named","doc":"","ref":"Bonfire.Data.Identity.Named.html"},{"type":"function","title":"Bonfire.Data.Identity.Named.changeset/3","doc":"","ref":"Bonfire.Data.Identity.Named.html#changeset/3"},{"type":"module","title":"Bonfire.Data.Identity.Self","doc":"","ref":"Bonfire.Data.Identity.Self.html"},{"type":"function","title":"Bonfire.Data.Identity.Self.changeset/2","doc":"","ref":"Bonfire.Data.Identity.Self.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Identity.Settings","doc":"A mixin that stores settings (of the instance, account, user, etc) as an Erlang Term (typically a map or keyword list) encoded to binary.","ref":"Bonfire.Data.Identity.Settings.html"},{"type":"function","title":"Bonfire.Data.Identity.Settings.changeset/3","doc":"","ref":"Bonfire.Data.Identity.Settings.html#changeset/3"},{"type":"module","title":"Bonfire.Data.Identity.User","doc":"A persona. A person (account) may have more than one user, but this is not exposed publicly (except to local instance administrators), so it is as if they are different people.","ref":"Bonfire.Data.Identity.User.html"},{"type":"function","title":"Bonfire.Data.Identity.User.changeset/2","doc":"","ref":"Bonfire.Data.Identity.User.html#changeset/2"},{"type":"function","title":"Bonfire.Data.Identity.User.maybe_redact/1","doc":"","ref":"Bonfire.Data.Identity.User.html#maybe_redact/1"},{"type":"module","title":"Bonfire.Data.SharedUser","doc":"A mixin for shared user personas (which multiple accounts can use)","ref":"Bonfire.Data.SharedUser.html"},{"type":"function","title":"Bonfire.Data.SharedUser.changeset/2","doc":"","ref":"Bonfire.Data.SharedUser.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.APActivity","doc":"","ref":"Bonfire.Data.Social.APActivity.html"},{"type":"function","title":"Bonfire.Data.Social.APActivity.changeset/2","doc":"","ref":"Bonfire.Data.Social.APActivity.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Activity","doc":"","ref":"Bonfire.Data.Social.Activity.html"},{"type":"function","title":"Bonfire.Data.Social.Activity.changeset/2","doc":"","ref":"Bonfire.Data.Social.Activity.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Bookmark","doc":"","ref":"Bonfire.Data.Social.Bookmark.html"},{"type":"function","title":"Bonfire.Data.Social.Bookmark.changeset/2","doc":"","ref":"Bonfire.Data.Social.Bookmark.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Boost","doc":"","ref":"Bonfire.Data.Social.Boost.html"},{"type":"function","title":"Bonfire.Data.Social.Boost.changeset/2","doc":"","ref":"Bonfire.Data.Social.Boost.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Created","doc":"","ref":"Bonfire.Data.Social.Created.html"},{"type":"function","title":"Bonfire.Data.Social.Created.changeset/2","doc":"","ref":"Bonfire.Data.Social.Created.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Feed","doc":"","ref":"Bonfire.Data.Social.Feed.html"},{"type":"function","title":"Bonfire.Data.Social.Feed.changeset/2","doc":"","ref":"Bonfire.Data.Social.Feed.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.FeedPublish","doc":"A multimixin for an activity/object appearing in a feed. A quite interesting thing about this model is that feed references Pointer , so it isn't only things of type Feed that it can appear in, they are just an obvious choice.","ref":"Bonfire.Data.Social.FeedPublish.html"},{"type":"function","title":"Bonfire.Data.Social.FeedPublish.changeset/2","doc":"","ref":"Bonfire.Data.Social.FeedPublish.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Flag","doc":"","ref":"Bonfire.Data.Social.Flag.html"},{"type":"function","title":"Bonfire.Data.Social.Flag.changeset/2","doc":"","ref":"Bonfire.Data.Social.Flag.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Follow","doc":"","ref":"Bonfire.Data.Social.Follow.html"},{"type":"function","title":"Bonfire.Data.Social.Follow.changeset/2","doc":"","ref":"Bonfire.Data.Social.Follow.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Inbox","doc":"","ref":"Bonfire.Data.Social.Inbox.html"},{"type":"function","title":"Bonfire.Data.Social.Inbox.changeset/2","doc":"","ref":"Bonfire.Data.Social.Inbox.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Like","doc":"","ref":"Bonfire.Data.Social.Like.html"},{"type":"function","title":"Bonfire.Data.Social.Like.changeset/2","doc":"","ref":"Bonfire.Data.Social.Like.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Message","doc":"","ref":"Bonfire.Data.Social.Message.html"},{"type":"function","title":"Bonfire.Data.Social.Message.changeset/2","doc":"","ref":"Bonfire.Data.Social.Message.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Pin","doc":"","ref":"Bonfire.Data.Social.Pin.html"},{"type":"function","title":"Bonfire.Data.Social.Pin.changeset/2","doc":"","ref":"Bonfire.Data.Social.Pin.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Post","doc":"","ref":"Bonfire.Data.Social.Post.html"},{"type":"function","title":"Bonfire.Data.Social.Post.changeset/2","doc":"","ref":"Bonfire.Data.Social.Post.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.PostContent","doc":"","ref":"Bonfire.Data.Social.PostContent.html"},{"type":"function","title":"Bonfire.Data.Social.PostContent.changeset/2","doc":"","ref":"Bonfire.Data.Social.PostContent.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Profile","doc":"","ref":"Bonfire.Data.Social.Profile.html"},{"type":"function","title":"Bonfire.Data.Social.Profile.changeset/2","doc":"","ref":"Bonfire.Data.Social.Profile.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Replied","doc":"","ref":"Bonfire.Data.Social.Replied.html"},{"type":"function","title":"Bonfire.Data.Social.Replied.ancestor_ids/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#ancestor_ids/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.ancestors/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#ancestors/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.arrange/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#arrange/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.build_child/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#build_child/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.changeset/2","doc":"","ref":"Bonfire.Data.Social.Replied.html#changeset/2"},{"type":"function","title":"Bonfire.Data.Social.Replied.children/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#children/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.depth/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#depth/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.descendants/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#descendants/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.make_child_of/2","doc":"","ref":"Bonfire.Data.Social.Replied.html#make_child_of/2"},{"type":"function","title":"Bonfire.Data.Social.Replied.parent/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#parent/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.parent_id/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#parent_id/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.path/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#path/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.path_ids/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#path_ids/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.root/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#root/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.root?/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#root?/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.root_id/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#root_id/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.siblings/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#siblings/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.subtree/1","doc":"","ref":"Bonfire.Data.Social.Replied.html#subtree/1"},{"type":"function","title":"Bonfire.Data.Social.Replied.where_depth/2","doc":"","ref":"Bonfire.Data.Social.Replied.html#where_depth/2"},{"type":"module","title":"Bonfire.Data.Social.Request","doc":"","ref":"Bonfire.Data.Social.Request.html"},{"type":"function","title":"Bonfire.Data.Social.Request.changeset/2","doc":"","ref":"Bonfire.Data.Social.Request.html#changeset/2"},{"type":"module","title":"Bonfire.Data.Social.Seen","doc":"Track seen/unseen (similar to read/unread, but only indicates that it was displayed in a feed or other listing for the user, not that they actually read it) status of things (usually an Activity )","ref":"Bonfire.Data.Social.Seen.html"},{"type":"function","title":"Bonfire.Data.Social.Seen.changeset/2","doc":"","ref":"Bonfire.Data.Social.Seen.html#changeset/2"},{"type":"module","title":"Bonfire.UI.Common","doc":"A library of common utils and helpers used across Bonfire extensions","ref":"Bonfire.UI.Common.html"},{"type":"function","title":"Bonfire.UI.Common.assign_error/3","doc":"","ref":"Bonfire.UI.Common.html#assign_error/3"},{"type":"function","title":"Bonfire.UI.Common.assign_flash/5","doc":"","ref":"Bonfire.UI.Common.html#assign_flash/5"},{"type":"function","title":"Bonfire.UI.Common.assign_generic/2","doc":"","ref":"Bonfire.UI.Common.html#assign_generic/2"},{"type":"function","title":"Bonfire.UI.Common.assign_generic/3","doc":"","ref":"Bonfire.UI.Common.html#assign_generic/3"},{"type":"function","title":"Bonfire.UI.Common.assign_global/2","doc":"","ref":"Bonfire.UI.Common.html#assign_global/2"},{"type":"function","title":"Bonfire.UI.Common.assign_global/3","doc":"","ref":"Bonfire.UI.Common.html#assign_global/3"},{"type":"function","title":"Bonfire.UI.Common.assigns_clean/1","doc":"","ref":"Bonfire.UI.Common.html#assigns_clean/1"},{"type":"function","title":"Bonfire.UI.Common.assigns_merge/2","doc":"","ref":"Bonfire.UI.Common.html#assigns_merge/2"},{"type":"function","title":"Bonfire.UI.Common.assigns_merge/3","doc":"","ref":"Bonfire.UI.Common.html#assigns_merge/3"},{"type":"function","title":"Bonfire.UI.Common.assigns_minimal/1","doc":"","ref":"Bonfire.UI.Common.html#assigns_minimal/1"},{"type":"function","title":"Bonfire.UI.Common.assigns_subscribe/2","doc":"","ref":"Bonfire.UI.Common.html#assigns_subscribe/2"},{"type":"function","title":"Bonfire.UI.Common.cast_public/2","doc":"Warning: this will set assigns for any/all users who subscribe to them. You want to cast_self/2 instead if dealing with user-specific actions or private data.","ref":"Bonfire.UI.Common.html#cast_public/2"},{"type":"function","title":"Bonfire.UI.Common.cast_self/2","doc":"","ref":"Bonfire.UI.Common.html#cast_self/2"},{"type":"function","title":"Bonfire.UI.Common.copy_go/1","doc":"copies the go param into a query string, if any","ref":"Bonfire.UI.Common.html#copy_go/1"},{"type":"function","title":"Bonfire.UI.Common.current_url/2","doc":"","ref":"Bonfire.UI.Common.html#current_url/2"},{"type":"function","title":"Bonfire.UI.Common.current_user_or_remote_interaction/3","doc":"","ref":"Bonfire.UI.Common.html#current_user_or_remote_interaction/3"},{"type":"function","title":"Bonfire.UI.Common.go_query/1","doc":"Generate a query string adding a go redirection path to the URI (for redirecting somewhere after auth flows). It is recommended to use set_go_after/2 where possible instead.","ref":"Bonfire.UI.Common.html#go_query/1"},{"type":"function","title":"Bonfire.UI.Common.hero_icons_list/0","doc":"","ref":"Bonfire.UI.Common.html#hero_icons_list/0"},{"type":"function","title":"Bonfire.UI.Common.live_render_component/2","doc":"Special LiveView helper function which allows loading LiveComponents in regular Phoenix views: live_render_component(@conn, MyLiveComponent)","ref":"Bonfire.UI.Common.html#live_render_component/2"},{"type":"function","title":"Bonfire.UI.Common.live_render_with_conn/2","doc":"","ref":"Bonfire.UI.Common.html#live_render_with_conn/2"},{"type":"function","title":"Bonfire.UI.Common.live_upload_files/3","doc":"","ref":"Bonfire.UI.Common.html#live_upload_files/3"},{"type":"function","title":"Bonfire.UI.Common.markdown/1","doc":"","ref":"Bonfire.UI.Common.html#markdown/1"},{"type":"function","title":"Bonfire.UI.Common.maybe_assign/3","doc":"","ref":"Bonfire.UI.Common.html#maybe_assign/3"},{"type":"function","title":"Bonfire.UI.Common.maybe_consume_uploaded_entries/3","doc":"","ref":"Bonfire.UI.Common.html#maybe_consume_uploaded_entries/3"},{"type":"function","title":"Bonfire.UI.Common.maybe_consume_uploaded_entry/3","doc":"","ref":"Bonfire.UI.Common.html#maybe_consume_uploaded_entry/3"},{"type":"function","title":"Bonfire.UI.Common.maybe_cute_gif/0","doc":"","ref":"Bonfire.UI.Common.html#maybe_cute_gif/0"},{"type":"function","title":"Bonfire.UI.Common.maybe_last_sentry_event_id/0","doc":"","ref":"Bonfire.UI.Common.html#maybe_last_sentry_event_id/0"},{"type":"function","title":"Bonfire.UI.Common.maybe_push_event/3","doc":"","ref":"Bonfire.UI.Common.html#maybe_push_event/3"},{"type":"function","title":"Bonfire.UI.Common.maybe_send_update/4","doc":"","ref":"Bonfire.UI.Common.html#maybe_send_update/4"},{"type":"function","title":"Bonfire.UI.Common.maybe_stream_insert/4","doc":"Inserts onr or many items in an existing stream. See Phoenix.LiveView.stream_insert/4 for opts.","ref":"Bonfire.UI.Common.html#maybe_stream_insert/4"},{"type":"function","title":"Bonfire.UI.Common.patch_to/3","doc":"","ref":"Bonfire.UI.Common.html#patch_to/3"},{"type":"function","title":"Bonfire.UI.Common.path_fallback/2","doc":"","ref":"Bonfire.UI.Common.html#path_fallback/2"},{"type":"function","title":"Bonfire.UI.Common.preload_assigns_async/4","doc":"","ref":"Bonfire.UI.Common.html#preload_assigns_async/4"},{"type":"function","title":"Bonfire.UI.Common.redirect_to/3","doc":"","ref":"Bonfire.UI.Common.html#redirect_to/3"},{"type":"function","title":"Bonfire.UI.Common.redirect_to_previous_go/4","doc":"","ref":"Bonfire.UI.Common.html#redirect_to_previous_go/4"},{"type":"function","title":"Bonfire.UI.Common.rich/2","doc":"","ref":"Bonfire.UI.Common.html#rich/2"},{"type":"function","title":"Bonfire.UI.Common.self_subscribe/2","doc":"Subscribe to assigns targeted at the current account/user","ref":"Bonfire.UI.Common.html#self_subscribe/2"},{"type":"function","title":"Bonfire.UI.Common.send_self/2","doc":"","ref":"Bonfire.UI.Common.html#send_self/2"},{"type":"function","title":"Bonfire.UI.Common.send_self_global/2","doc":"","ref":"Bonfire.UI.Common.html#send_self_global/2"},{"type":"function","title":"Bonfire.UI.Common.set_go_after/2","doc":"Save a go redirection path in the session (for redirecting somewhere after auth flows)","ref":"Bonfire.UI.Common.html#set_go_after/2"},{"type":"function","title":"Bonfire.UI.Common.templated/2","doc":"","ref":"Bonfire.UI.Common.html#templated/2"},{"type":"function","title":"Bonfire.UI.Common.templated_or_remote_markdown/2","doc":"","ref":"Bonfire.UI.Common.html#templated_or_remote_markdown/2"},{"type":"function","title":"Bonfire.UI.Common.the_object/1","doc":"","ref":"Bonfire.UI.Common.html#the_object/1"},{"type":"function","title":"Bonfire.UI.Common.undead/3","doc":"","ref":"Bonfire.UI.Common.html#undead/3"},{"type":"function","title":"Bonfire.UI.Common.undead_mount/2","doc":"Run a function and expects tuple. If anything else is returned, like an error, a flash message is shown to the user.","ref":"Bonfire.UI.Common.html#undead_mount/2"},{"type":"function","title":"Bonfire.UI.Common.undead_on_mount/2","doc":"","ref":"Bonfire.UI.Common.html#undead_on_mount/2"},{"type":"function","title":"Bonfire.UI.Common.undead_params/2","doc":"","ref":"Bonfire.UI.Common.html#undead_params/2"},{"type":"module","title":"Bonfire.UI.Common.ComponentID","doc":"","ref":"Bonfire.UI.Common.ComponentID.html"},{"type":"function","title":"Bonfire.UI.Common.ComponentID.ids/2","doc":"","ref":"Bonfire.UI.Common.ComponentID.html#ids/2"},{"type":"function","title":"Bonfire.UI.Common.ComponentID.new/3","doc":"","ref":"Bonfire.UI.Common.ComponentID.html#new/3"},{"type":"function","title":"Bonfire.UI.Common.ComponentID.send_assigns/4","doc":"","ref":"Bonfire.UI.Common.ComponentID.html#send_assigns/4"},{"type":"function","title":"Bonfire.UI.Common.ComponentID.send_updates/3","doc":"","ref":"Bonfire.UI.Common.ComponentID.html#send_updates/3"},{"type":"module","title":"Bonfire.UI.Common.EndpointTemplate","doc":"","ref":"Bonfire.UI.Common.EndpointTemplate.html"},{"type":"function","title":"Bonfire.UI.Common.EndpointTemplate.session_options/0","doc":"","ref":"Bonfire.UI.Common.EndpointTemplate.html#session_options/0"},{"type":"module","title":"Bonfire.UI.Common.ErrorHelpers","doc":"Conveniences for translating and building error messages.","ref":"Bonfire.UI.Common.ErrorHelpers.html"},{"type":"function","title":"Bonfire.UI.Common.ErrorHelpers.error_tag/2","doc":"Generates tag for inlined form input errors. TODO: use Surface.Components.Form.ErrorTag instead","ref":"Bonfire.UI.Common.ErrorHelpers.html#error_tag/2"},{"type":"function","title":"Bonfire.UI.Common.ErrorHelpers.translate_error/1","doc":"Translates an error message using gettext.","ref":"Bonfire.UI.Common.ErrorHelpers.html#translate_error/1"},{"type":"module","title":"Bonfire.UI.Common.ErrorReportingPlug","doc":"","ref":"Bonfire.UI.Common.ErrorReportingPlug.html"},{"type":"module","title":"Bonfire.UI.Common.LiveHandlers","doc":"usage examples: phx-submit=&quot;Bonfire.Social.Posts:post&quot; will be routed to Bonfire.Social.Posts.LiveHandler.handle_event(&quot;post&quot;, ... PubSub.broadcast(feed_id, {{Bonfire.Social.Feeds, :new_activity}, activity}) will be routed to Bonfire.Social.Feeds.LiveHandler.handle_info({:new_activity, activity}, ... href=&quot;?Bonfire.Social.Feeds[after]=&lt;%= e(@page_info, :end_cursor, nil) %&gt;&quot; will be routed to Bonfire.Social.Feeds.LiveHandler.handle_params(%{&quot;after&quot; =&gt; cursor_after} ...","ref":"Bonfire.UI.Common.LiveHandlers.html"},{"type":"function","title":"Bonfire.UI.Common.LiveHandlers.assign_attrs/2","doc":"","ref":"Bonfire.UI.Common.LiveHandlers.html#assign_attrs/2"},{"type":"function","title":"Bonfire.UI.Common.LiveHandlers.handle_event/5","doc":"","ref":"Bonfire.UI.Common.LiveHandlers.html#handle_event/5"},{"type":"function","title":"Bonfire.UI.Common.LiveHandlers.handle_info/3","doc":"","ref":"Bonfire.UI.Common.LiveHandlers.html#handle_info/3"},{"type":"function","title":"Bonfire.UI.Common.LiveHandlers.handle_params/5","doc":"","ref":"Bonfire.UI.Common.LiveHandlers.html#handle_params/5"},{"type":"function","title":"Bonfire.UI.Common.LiveHandlers.handle_progress/5","doc":"","ref":"Bonfire.UI.Common.LiveHandlers.html#handle_progress/5"},{"type":"function","title":"Bonfire.UI.Common.LiveHandlers.mod_delegate/4","doc":"","ref":"Bonfire.UI.Common.LiveHandlers.html#mod_delegate/4"},{"type":"macro","title":"Bonfire.UI.Common.LiveHandlers.sigil_p/2","doc":"","ref":"Bonfire.UI.Common.LiveHandlers.html#sigil_p/2"},{"type":"module","title":"Bonfire.UI.Common.LivePlugs","doc":"Like a plug, but for a liveview","ref":"Bonfire.UI.Common.LivePlugs.html"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.assign_default_params/3","doc":"","ref":"Bonfire.UI.Common.LivePlugs.html#assign_default_params/3"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.maybe_send_persistent_assigns/2","doc":"","ref":"Bonfire.UI.Common.LivePlugs.html#maybe_send_persistent_assigns/2"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.on_mount/4","doc":"","ref":"Bonfire.UI.Common.LivePlugs.html#on_mount/4"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.send_persistent_assigns_after_render/1","doc":"","ref":"Bonfire.UI.Common.LivePlugs.html#send_persistent_assigns_after_render/1"},{"type":"module","title":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox","doc":"","ref":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.html"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.mount/3","doc":"","ref":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.html#mount/3"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.on_mount/4","doc":"","ref":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Common.LivePlugs.Csrf","doc":"","ref":"Bonfire.UI.Common.LivePlugs.Csrf.html"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.Csrf.mount/3","doc":"","ref":"Bonfire.UI.Common.LivePlugs.Csrf.html#mount/3"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.Csrf.on_mount/4","doc":"","ref":"Bonfire.UI.Common.LivePlugs.Csrf.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Common.LivePlugs.Locale","doc":"","ref":"Bonfire.UI.Common.LivePlugs.Locale.html"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.Locale.assign_put_locale/2","doc":"","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#assign_put_locale/2"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.Locale.default/2","doc":"","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#default/2"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.Locale.mount/3","doc":"","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#mount/3"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.Locale.on_mount/4","doc":"","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Common.LivePlugs.StaticChanged","doc":"","ref":"Bonfire.UI.Common.LivePlugs.StaticChanged.html"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.StaticChanged.mount/3","doc":"","ref":"Bonfire.UI.Common.LivePlugs.StaticChanged.html#mount/3"},{"type":"function","title":"Bonfire.UI.Common.LivePlugs.StaticChanged.on_mount/4","doc":"","ref":"Bonfire.UI.Common.LivePlugs.StaticChanged.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug","doc":"","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html"},{"type":"function","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.call/2","doc":"Callback implementation for Plug.call/2 .","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html#call/2"},{"type":"function","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.init/1","doc":"Callback implementation for Plug.init/1 .","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html#init/1"},{"type":"function","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.maybe_add_index_html/2","doc":"","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html#maybe_add_index_html/2"},{"type":"module","title":"Bonfire.UI.Common.MultiTenancyPlug","doc":"","ref":"Bonfire.UI.Common.MultiTenancyPlug.html"},{"type":"module","title":"Bonfire.UI.Common.MultiselectLive.LiveHandler","doc":"","ref":"Bonfire.UI.Common.MultiselectLive.LiveHandler.html"},{"type":"function","title":"Bonfire.UI.Common.MultiselectLive.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.UI.Common.MultiselectLive.LiveHandler.html#handle_event/3"},{"type":"macro","title":"Bonfire.UI.Common.MultiselectLive.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.UI.Common.MultiselectLive.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.UI.Common.Notifications","doc":"","ref":"Bonfire.UI.Common.Notifications.html"},{"type":"function","title":"Bonfire.UI.Common.Notifications.assign_notification/2","doc":"","ref":"Bonfire.UI.Common.Notifications.html#assign_notification/2"},{"type":"function","title":"Bonfire.UI.Common.Notifications.handle_event/3","doc":"","ref":"Bonfire.UI.Common.Notifications.html#handle_event/3"},{"type":"function","title":"Bonfire.UI.Common.Notifications.handle_info/2","doc":"","ref":"Bonfire.UI.Common.Notifications.html#handle_info/2"},{"type":"function","title":"Bonfire.UI.Common.Notifications.notify_feeds/5","doc":"","ref":"Bonfire.UI.Common.Notifications.html#notify_feeds/5"},{"type":"function","title":"Bonfire.UI.Common.Notifications.notify_me/4","doc":"","ref":"Bonfire.UI.Common.Notifications.html#notify_me/4"},{"type":"function","title":"Bonfire.UI.Common.Notifications.receive_flash/3","doc":"","ref":"Bonfire.UI.Common.Notifications.html#receive_flash/3"},{"type":"function","title":"Bonfire.UI.Common.Notifications.receive_notification/2","doc":"","ref":"Bonfire.UI.Common.Notifications.html#receive_notification/2"},{"type":"macro","title":"Bonfire.UI.Common.Notifications.sigil_p/2","doc":"","ref":"Bonfire.UI.Common.Notifications.html#sigil_p/2"},{"type":"module","title":"Bonfire.UI.Common.PlugAttack","doc":"","ref":"Bonfire.UI.Common.PlugAttack.html"},{"type":"function","title":"Bonfire.UI.Common.PlugAttack.allow_action/3","doc":"Callback implementation for PlugAttack.allow_action/3 .","ref":"Bonfire.UI.Common.PlugAttack.html#allow_action/3"},{"type":"function","title":"Bonfire.UI.Common.PlugAttack.block_action/3","doc":"Callback implementation for PlugAttack.block_action/3 .","ref":"Bonfire.UI.Common.PlugAttack.html#block_action/3"},{"type":"function","title":"Bonfire.UI.Common.PlugAttack.call/2","doc":"Callback implementation for Plug.call/2 .","ref":"Bonfire.UI.Common.PlugAttack.html#call/2"},{"type":"function","title":"Bonfire.UI.Common.PlugAttack.init/1","doc":"Callback implementation for Plug.init/1 .","ref":"Bonfire.UI.Common.PlugAttack.html#init/1"},{"type":"module","title":"Bonfire.UI.Common.Plugs.ActivityPub","doc":"","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html"},{"type":"function","title":"Bonfire.UI.Common.Plugs.ActivityPub.call/2","doc":"","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html#call/2"},{"type":"function","title":"Bonfire.UI.Common.Plugs.ActivityPub.init/1","doc":"","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html#init/1"},{"type":"function","title":"Bonfire.UI.Common.Plugs.ActivityPub.maybe_redirect/1","doc":"","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html#maybe_redirect/1"},{"type":"function","title":"Bonfire.UI.Common.Plugs.ActivityPub.with_headers/3","doc":"","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html#with_headers/3"},{"type":"module","title":"Bonfire.UI.Common.Presence","doc":"WIP for tracking online users. Used by PersistentLive","ref":"Bonfire.UI.Common.Presence.html"},{"type":"function","title":"Bonfire.UI.Common.Presence.child_spec/1","doc":"","ref":"Bonfire.UI.Common.Presence.html#child_spec/1"},{"type":"function","title":"Bonfire.UI.Common.Presence.fetch/2","doc":"Callback implementation for Phoenix.Presence.fetch/2 .","ref":"Bonfire.UI.Common.Presence.html#fetch/2"},{"type":"function","title":"Bonfire.UI.Common.Presence.fetchers_pids/0","doc":"","ref":"Bonfire.UI.Common.Presence.html#fetchers_pids/0"},{"type":"function","title":"Bonfire.UI.Common.Presence.get_by_key/2","doc":"Callback implementation for Phoenix.Presence.get_by_key/2 .","ref":"Bonfire.UI.Common.Presence.html#get_by_key/2"},{"type":"function","title":"Bonfire.UI.Common.Presence.handle_info/2","doc":"","ref":"Bonfire.UI.Common.Presence.html#handle_info/2"},{"type":"function","title":"Bonfire.UI.Common.Presence.list/0","doc":"","ref":"Bonfire.UI.Common.Presence.html#list/0"},{"type":"function","title":"Bonfire.UI.Common.Presence.list/1","doc":"Callback implementation for Phoenix.Presence.list/1 .","ref":"Bonfire.UI.Common.Presence.html#list/1"},{"type":"function","title":"Bonfire.UI.Common.Presence.list_and_maybe_subscribe_to_presence/1","doc":"","ref":"Bonfire.UI.Common.Presence.html#list_and_maybe_subscribe_to_presence/1"},{"type":"function","title":"Bonfire.UI.Common.Presence.present!/2","doc":"Join a user to the list of those who are present","ref":"Bonfire.UI.Common.Presence.html#present!/2"},{"type":"function","title":"Bonfire.UI.Common.Presence.present?/2","doc":"Check if a given user (or the current user) is in the list of those who are present","ref":"Bonfire.UI.Common.Presence.html#present?/2"},{"type":"function","title":"Bonfire.UI.Common.Presence.present_meta/2","doc":"","ref":"Bonfire.UI.Common.Presence.html#present_meta/2"},{"type":"function","title":"Bonfire.UI.Common.Presence.track/3","doc":"Callback implementation for Phoenix.Presence.track/3 .","ref":"Bonfire.UI.Common.Presence.html#track/3"},{"type":"function","title":"Bonfire.UI.Common.Presence.track/4","doc":"Callback implementation for Phoenix.Presence.track/4 .","ref":"Bonfire.UI.Common.Presence.html#track/4"},{"type":"function","title":"Bonfire.UI.Common.Presence.untrack/2","doc":"Callback implementation for Phoenix.Presence.untrack/2 .","ref":"Bonfire.UI.Common.Presence.html#untrack/2"},{"type":"function","title":"Bonfire.UI.Common.Presence.untrack/3","doc":"Callback implementation for Phoenix.Presence.untrack/3 .","ref":"Bonfire.UI.Common.Presence.html#untrack/3"},{"type":"function","title":"Bonfire.UI.Common.Presence.update/3","doc":"Callback implementation for Phoenix.Presence.update/3 .","ref":"Bonfire.UI.Common.Presence.html#update/3"},{"type":"function","title":"Bonfire.UI.Common.Presence.update/4","doc":"Callback implementation for Phoenix.Presence.update/4 .","ref":"Bonfire.UI.Common.Presence.html#update/4"},{"type":"module","title":"Bonfire.UI.Common.PreviewContentLive","doc":"A special 'modal' for previewing objects from a feed without redirecting to a new view (so we can go back to where we were in the feed) Properties id :string, required: true - The id of the live component (required by LiveView for stateful components). source_inspector_attrs :map, default: %{} title_text :string, default: nil - The title of the modal. Only used if no title slot is passed. title_class :css_class, default: nil - The classes of the title of the modal show :boolean, default: false - Force modal to be open no_header :boolean, default: false - Optional prop to hide the header at the top of the modal modal_class :string, default: nil - The classes of the modal. modal_assigns :any, default: [] - Additional assigns for the modal opts :keyword, default: [] - Additional attributes to add onto the modal wrapper Slots default, arg: [:autocomplete] - Slots for the contents of the modal, title, buttons... open_btn action_btns cancel_btn title","ref":"Bonfire.UI.Common.PreviewContentLive.html"},{"type":"function","title":"Bonfire.UI.Common.PreviewContentLive.do_handle_event/3","doc":"","ref":"Bonfire.UI.Common.PreviewContentLive.html#do_handle_event/3"},{"type":"function","title":"Bonfire.UI.Common.PreviewContentLive.handle_event/3","doc":"Callback implementation for Phoenix.LiveComponent.handle_event/3 .","ref":"Bonfire.UI.Common.PreviewContentLive.html#handle_event/3"},{"type":"function","title":"Bonfire.UI.Common.PreviewContentLive.handle_info/2","doc":"","ref":"Bonfire.UI.Common.PreviewContentLive.html#handle_info/2"},{"type":"function","title":"Bonfire.UI.Common.PreviewContentLive.mount/1","doc":"Callback implementation for Phoenix.LiveComponent.mount/1 .","ref":"Bonfire.UI.Common.PreviewContentLive.html#mount/1"},{"type":"function","title":"Bonfire.UI.Common.PreviewContentLive.render/1","doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"Bonfire.UI.Common.PreviewContentLive.html#render/1"},{"type":"macro","title":"Bonfire.UI.Common.PreviewContentLive.sigil_p/2","doc":"","ref":"Bonfire.UI.Common.PreviewContentLive.html#sigil_p/2"},{"type":"function","title":"Bonfire.UI.Common.PreviewContentLive.update/2","doc":"Callback implementation for Phoenix.LiveComponent.update/2 .","ref":"Bonfire.UI.Common.PreviewContentLive.html#update/2"},{"type":"module","title":"Bonfire.UI.Common.ReusableModalLive","doc":"The classic modal Properties id :string, required: true - The id of the live component (required by LiveView for stateful components). source_inspector_attrs :map, default: %{} title_text :string, default: nil - The title of the modal. Only used if no title slot is passed. image_preview :boolean, default: false - If the modal is a preview of an image, set this to true. title_class :css_class, default: nil - The classes of the title of the modal modal_class :css_class, default: @modal_class - The classes of the modal. wrapper_class :css_class, default: nil - The classes of the modal wrapper. action_btns_wrapper_class :css_class, default: nil - The classes around the action/submit button(s) on the modal cancel_btn_class :css_class, default: nil - The classes of the close/cancel button on the modal. Only used if no close_btn slot is passed. cancel_label :string, default: nil show :boolean, default: false - Force modal to be open form_opts :list, default: [] no_actions :boolean, default: false - Optional prop to hide the actions at the bottom of the modal no_header :boolean, default: false - Optional prop to hide the header at the top of the modal opts :keyword, default: [] - Additional attributes to add onto the modal wrapper autocomplete :list, default: [] Slots open_btn, arg: [autocomplete: :list, value: :any] - Slots for the contents of the modal, title, buttons... action_btns cancel_btn title default, arg: [autocomplete: :list, value: :any]","ref":"Bonfire.UI.Common.ReusableModalLive.html"},{"type":"function","title":"Bonfire.UI.Common.ReusableModalLive.default_assigns/0","doc":"","ref":"Bonfire.UI.Common.ReusableModalLive.html#default_assigns/0"},{"type":"function","title":"Bonfire.UI.Common.ReusableModalLive.do_handle_event/3","doc":"","ref":"Bonfire.UI.Common.ReusableModalLive.html#do_handle_event/3"},{"type":"function","title":"Bonfire.UI.Common.ReusableModalLive.handle_event/3","doc":"Callback implementation for Phoenix.LiveComponent.handle_event/3 .","ref":"Bonfire.UI.Common.ReusableModalLive.html#handle_event/3"},{"type":"function","title":"Bonfire.UI.Common.ReusableModalLive.handle_info/2","doc":"","ref":"Bonfire.UI.Common.ReusableModalLive.html#handle_info/2"},{"type":"function","title":"Bonfire.UI.Common.ReusableModalLive.mount/1","doc":"Callback implementation for Phoenix.LiveComponent.mount/1 .","ref":"Bonfire.UI.Common.ReusableModalLive.html#mount/1"},{"type":"function","title":"Bonfire.UI.Common.ReusableModalLive.render/1","doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"Bonfire.UI.Common.ReusableModalLive.html#render/1"},{"type":"macro","title":"Bonfire.UI.Common.ReusableModalLive.sigil_p/2","doc":"","ref":"Bonfire.UI.Common.ReusableModalLive.html#sigil_p/2"},{"type":"function","title":"Bonfire.UI.Common.ReusableModalLive.update/2","doc":"Callback implementation for Phoenix.LiveComponent.update/2 .","ref":"Bonfire.UI.Common.ReusableModalLive.html#update/2"},{"type":"module","title":"Bonfire.UI.Common.Routes","doc":"","ref":"Bonfire.UI.Common.Routes.html"},{"type":"function","title":"Bonfire.UI.Common.Routes.gon_js_config/0","doc":"","ref":"Bonfire.UI.Common.Routes.html#gon_js_config/0"},{"type":"module","title":"Bonfire.UI.Common.SEO","doc":"","ref":"Bonfire.UI.Common.SEO.html"},{"type":"function","title":"Bonfire.UI.Common.SEO.juice/1","doc":"Provide SEO juice Attributes item ( :any ) (required) page_title ( :string ) - Defaults to nil . json_library ( :atom ) - Defaults to Jason .","ref":"Bonfire.UI.Common.SEO.html#juice/1"},{"type":"module","title":"Bonfire.UI.Common.SmartInput.LiveHandler","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.active_smart_input_component/2","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#active_smart_input_component/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.active_smart_input_components/2","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#active_smart_input_components/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.activity_type_or_reply/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#activity_type_or_reply/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.all_smart_input_components/0","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#all_smart_input_components/0"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.assign_open/2","doc":"Open the composer by setting assigns","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#assign_open/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.close_smart_input/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#close_smart_input/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.confirm_close_smart_input/2","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#confirm_close_smart_input/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.max_length/0","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#max_length/0"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.maximize/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#maximize/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.maybe_from_json/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#maybe_from_json/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.maybe_from_json_string/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#maybe_from_json_string/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.minimize/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#minimize/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.open/2","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#open/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.open_type/4","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#open_type/4"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.open_with_text_suggestion/3","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#open_with_text_suggestion/3"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.replace_input_next_time/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#replace_input_next_time/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.reply_to_param/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#reply_to_param/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.reset_input/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#reset_input/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.set/2","doc":"Set assigns in the smart input from anywhere in the app (whether using a live component or sticky live view)","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#set/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.set_smart_input_as/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#set_smart_input_as/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.set_smart_input_text/2","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#set_smart_input_text/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.show_main/2","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#show_main/2"},{"type":"macro","title":"Bonfire.UI.Common.SmartInput.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#sigil_p/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.smart_input_name/1","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#smart_input_name/1"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.switch_smart_input_type/2","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#switch_smart_input_type/2"},{"type":"function","title":"Bonfire.UI.Common.SmartInput.LiveHandler.toggle_expanded/4","doc":"","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#toggle_expanded/4"},{"type":"module","title":"Bonfire.UI.Common.StaticGenerator","doc":"Static-site generator which can take a list of URLs served by the current Phoenix server and output static HTML for them","ref":"Bonfire.UI.Common.StaticGenerator.html"},{"type":"function","title":"Bonfire.UI.Common.StaticGenerator.base_path/0","doc":"","ref":"Bonfire.UI.Common.StaticGenerator.html#base_path/0"},{"type":"function","title":"Bonfire.UI.Common.StaticGenerator.generate/2","doc":"","ref":"Bonfire.UI.Common.StaticGenerator.html#generate/2"},{"type":"module","title":"Bonfire.UI.Common.StaticGeneratorPlug","doc":"","ref":"Bonfire.UI.Common.StaticGeneratorPlug.html"},{"type":"function","title":"Bonfire.UI.Common.StaticGeneratorPlug.add_index_html/2","doc":"","ref":"Bonfire.UI.Common.StaticGeneratorPlug.html#add_index_html/2"},{"type":"function","title":"Bonfire.UI.Common.StaticGeneratorPlug.call/2","doc":"Callback implementation for Plug.call/2 .","ref":"Bonfire.UI.Common.StaticGeneratorPlug.html#call/2"},{"type":"function","title":"Bonfire.UI.Common.StaticGeneratorPlug.init/1","doc":"Callback implementation for Plug.init/1 .","ref":"Bonfire.UI.Common.StaticGeneratorPlug.html#init/1"},{"type":"module","title":"Bonfire.UI.Common.Testing.Helpers","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.assert_field_error/3","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_field_error/3"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.assert_field_good/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_field_good/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.assert_flash/3","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_flash/3"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.assert_flash_kind/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_flash_kind/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.assert_flash_message/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_flash_message/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.conn/0","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#conn/0"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.conn/1","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#conn/1"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.conn/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#conn/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.fake_account!/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#fake_account!/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.fake_admin!/3","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#fake_admin!/3"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.fake_user!/3","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#fake_user!/3"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.fake_user_and_conn!/1","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#fake_user_and_conn!/1"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.find_flash/1","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#find_flash/1"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.find_form_error/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#find_form_error/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.floki_attr/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_attr/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.floki_click/3","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_click/3"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.floki_live/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_live/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.floki_redirect/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_redirect/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.floki_response/2","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_response/2"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.floki_submit/4","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_submit/4"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.live_pubsub_wait/1","doc":"Wait for the LiveView to receive any queued PubSub broadcasts","ref":"Bonfire.UI.Common.Testing.Helpers.html#live_pubsub_wait/1"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.render_stateful/3","doc":"Render stateful Surface or LiveView components","ref":"Bonfire.UI.Common.Testing.Helpers.html#render_stateful/3"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.render_stateless/3","doc":"Render stateless Surface or LiveView components","ref":"Bonfire.UI.Common.Testing.Helpers.html#render_stateless/3"},{"type":"function","title":"Bonfire.UI.Common.Testing.Helpers.session_conn/1","doc":"","ref":"Bonfire.UI.Common.Testing.Helpers.html#session_conn/1"},{"type":"module","title":"Bonfire.UI.Common.Testing.Inspector","doc":"","ref":"Bonfire.UI.Common.Testing.Inspector.html"},{"type":"macro","title":"Bonfire.UI.Common.Testing.Inspector.pry/1","doc":"","ref":"Bonfire.UI.Common.Testing.Inspector.html#pry/1"},{"type":"module","title":"Bonfire.UI.Me.Integration","doc":"","ref":"Bonfire.UI.Me.Integration.html"},{"type":"function","title":"Bonfire.UI.Me.Integration.is_admin?/1","doc":"","ref":"Bonfire.UI.Me.Integration.html#is_admin?/1"},{"type":"function","title":"Bonfire.UI.Me.Integration.mailer/0","doc":"","ref":"Bonfire.UI.Me.Integration.html#mailer/0"},{"type":"function","title":"Bonfire.UI.Me.Integration.repo/0","doc":"","ref":"Bonfire.UI.Me.Integration.html#repo/0"},{"type":"module","title":"Bonfire.UI.Me.LivePlugs.AccountRequired","doc":"","ref":"Bonfire.UI.Me.LivePlugs.AccountRequired.html"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.AccountRequired.mount/3","doc":"","ref":"Bonfire.UI.Me.LivePlugs.AccountRequired.html#mount/3"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.AccountRequired.on_mount/4","doc":"","ref":"Bonfire.UI.Me.LivePlugs.AccountRequired.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Me.LivePlugs.AdminRequired","doc":"","ref":"Bonfire.UI.Me.LivePlugs.AdminRequired.html"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.AdminRequired.mount/3","doc":"","ref":"Bonfire.UI.Me.LivePlugs.AdminRequired.html#mount/3"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.AdminRequired.on_mount/4","doc":"","ref":"Bonfire.UI.Me.LivePlugs.AdminRequired.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.html"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.mount/3","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.html#mount/3"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.on_mount/4","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.html"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.mount/3","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.html#mount/3"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.on_mount/4","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.html"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.mount/3","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.html#mount/3"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.on_mount/4","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.html"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.mount/3","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.html#mount/3"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.on_mount/4","doc":"","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Me.LivePlugs.UserRequired","doc":"","ref":"Bonfire.UI.Me.LivePlugs.UserRequired.html"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.UserRequired.mount/3","doc":"","ref":"Bonfire.UI.Me.LivePlugs.UserRequired.html#mount/3"},{"type":"function","title":"Bonfire.UI.Me.LivePlugs.UserRequired.on_mount/4","doc":"","ref":"Bonfire.UI.Me.LivePlugs.UserRequired.html#on_mount/4"},{"type":"module","title":"Bonfire.UI.Me.Plugs.AccountRequired","doc":"","ref":"Bonfire.UI.Me.Plugs.AccountRequired.html"},{"type":"function","title":"Bonfire.UI.Me.Plugs.AccountRequired.call/2","doc":"","ref":"Bonfire.UI.Me.Plugs.AccountRequired.html#call/2"},{"type":"function","title":"Bonfire.UI.Me.Plugs.AccountRequired.init/1","doc":"","ref":"Bonfire.UI.Me.Plugs.AccountRequired.html#init/1"},{"type":"module","title":"Bonfire.UI.Me.Plugs.AdminRequired","doc":"","ref":"Bonfire.UI.Me.Plugs.AdminRequired.html"},{"type":"function","title":"Bonfire.UI.Me.Plugs.AdminRequired.call/2","doc":"","ref":"Bonfire.UI.Me.Plugs.AdminRequired.html#call/2"},{"type":"function","title":"Bonfire.UI.Me.Plugs.AdminRequired.init/1","doc":"","ref":"Bonfire.UI.Me.Plugs.AdminRequired.html#init/1"},{"type":"module","title":"Bonfire.UI.Me.Plugs.GuestOnly","doc":"","ref":"Bonfire.UI.Me.Plugs.GuestOnly.html"},{"type":"function","title":"Bonfire.UI.Me.Plugs.GuestOnly.call/2","doc":"","ref":"Bonfire.UI.Me.Plugs.GuestOnly.html#call/2"},{"type":"function","title":"Bonfire.UI.Me.Plugs.GuestOnly.init/1","doc":"","ref":"Bonfire.UI.Me.Plugs.GuestOnly.html#init/1"},{"type":"module","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccount","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.html"},{"type":"function","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.call/2","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.html#call/2"},{"type":"function","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.init/1","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.html#init/1"},{"type":"module","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.html"},{"type":"function","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.call/2","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.html#call/2"},{"type":"function","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.init/1","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.html#init/1"},{"type":"module","title":"Bonfire.UI.Me.Plugs.LoadCurrentUser","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentUser.html"},{"type":"function","title":"Bonfire.UI.Me.Plugs.LoadCurrentUser.call/2","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentUser.html#call/2"},{"type":"function","title":"Bonfire.UI.Me.Plugs.LoadCurrentUser.init/1","doc":"","ref":"Bonfire.UI.Me.Plugs.LoadCurrentUser.html#init/1"},{"type":"module","title":"Bonfire.UI.Me.Plugs.UserRequired","doc":"","ref":"Bonfire.UI.Me.Plugs.UserRequired.html"},{"type":"function","title":"Bonfire.UI.Me.Plugs.UserRequired.call/2","doc":"","ref":"Bonfire.UI.Me.Plugs.UserRequired.html#call/2"},{"type":"function","title":"Bonfire.UI.Me.Plugs.UserRequired.init/1","doc":"","ref":"Bonfire.UI.Me.Plugs.UserRequired.html#init/1"},{"type":"module","title":"Bonfire.UI.Me.Routes","doc":"","ref":"Bonfire.UI.Me.Routes.html"},{"type":"module","title":"Bonfire.UI.Me.RuntimeConfig","doc":"","ref":"Bonfire.UI.Me.RuntimeConfig.html"},{"type":"function","title":"Bonfire.UI.Me.RuntimeConfig.config/0","doc":"NOTE: you can override this default config in your app's runtime.exs , by placing similarly-named config keys below the Bonfire.Common.Config.LoadExtensionsConfig.load_configs() line","ref":"Bonfire.UI.Me.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.UI.Me.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.UI.Me.RuntimeConfig.html#config_module/0"},{"type":"module","title":"Bonfire.UI.Social.Benchmark","doc":"","ref":"Bonfire.UI.Social.Benchmark.html"},{"type":"function","title":"Bonfire.UI.Social.Benchmark.feed_page/0","doc":"","ref":"Bonfire.UI.Social.Benchmark.html#feed_page/0"},{"type":"function","title":"Bonfire.UI.Social.Benchmark.feed_queries/0","doc":"","ref":"Bonfire.UI.Social.Benchmark.html#feed_queries/0"},{"type":"function","title":"Bonfire.UI.Social.Benchmark.feed_queries_without_benchee/0","doc":"","ref":"Bonfire.UI.Social.Benchmark.html#feed_queries_without_benchee/0"},{"type":"function","title":"Bonfire.UI.Social.Benchmark.feed_query_methods/0","doc":"","ref":"Bonfire.UI.Social.Benchmark.html#feed_query_methods/0"},{"type":"function","title":"Bonfire.UI.Social.Benchmark.live_feed/1","doc":"","ref":"Bonfire.UI.Social.Benchmark.html#live_feed/1"},{"type":"function","title":"Bonfire.UI.Social.Benchmark.render_feed/2","doc":"","ref":"Bonfire.UI.Social.Benchmark.html#render_feed/2"},{"type":"module","title":"Bonfire.UI.Social.Integration","doc":"","ref":"Bonfire.UI.Social.Integration.html"},{"type":"function","title":"Bonfire.UI.Social.Integration.is_admin?/1","doc":"","ref":"Bonfire.UI.Social.Integration.html#is_admin?/1"},{"type":"function","title":"Bonfire.UI.Social.Integration.mailer/0","doc":"","ref":"Bonfire.UI.Social.Integration.html#mailer/0"},{"type":"function","title":"Bonfire.UI.Social.Integration.repo/0","doc":"","ref":"Bonfire.UI.Social.Integration.html#repo/0"},{"type":"module","title":"Bonfire.UI.Social.Routes","doc":"","ref":"Bonfire.UI.Social.Routes.html"},{"type":"function","title":"Bonfire.UI.Social.Routes.declare_routes/0","doc":"","ref":"Bonfire.UI.Social.Routes.html#declare_routes/0"},{"type":"module","title":"Bonfire.UI.Social.RuntimeConfig","doc":"","ref":"Bonfire.UI.Social.RuntimeConfig.html"},{"type":"function","title":"Bonfire.UI.Social.RuntimeConfig.config/0","doc":"NOTE: you can override this default config in your app's runtime.exs , by placing similarly-named config keys below the Bonfire.Common.Config.LoadExtensionsConfig.load_configs() line","ref":"Bonfire.UI.Social.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.UI.Social.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.UI.Social.RuntimeConfig.html#config_module/0"},{"type":"module","title":"Pointers","doc":"A context for working with Pointers, a sort of global foreign key scheme.","ref":"Pointers.html"},{"type":"function","title":"Pointers.assert_points_to!/2","doc":"Return the provided pointer when it belongs to table queryable by the given table search term.","ref":"Pointers.html#assert_points_to!/2"},{"type":"function","title":"Pointers.cast!/1","doc":"Returns a Pointer, either the one provided or a synthesised one pointing to the provided schema object. Does not hit the database or cause the pointer to be written to the database whatsoever.","ref":"Pointers.html#cast!/1"},{"type":"function","title":"Pointers.get_table_id!/1","doc":"","ref":"Pointers.html#get_table_id!/1"},{"type":"function","title":"Pointers.plan/1","doc":"Given a list of pointers which may or may have their pointed loaded, return a plan for preloading, a map of module name to set of loadable IDs.","ref":"Pointers.html#plan/1"},{"type":"function","title":"Pointers.query_base/1","doc":"Returns a basic query over non-deleted pointable objects in the system, optionally limited to one or more types. If the type is set to a Pointable, Virtual or Mixin schema, records will be selected from that schema directly. It is assumed this filters deleted records by construction. Otherwise, will query from Pointer, filtering not is_nil(deleted_at)","ref":"Pointers.html#query_base/1"},{"type":"function","title":"Pointers.schema/1","doc":"","ref":"Pointers.html#schema/1"},{"type":"function","title":"Pointers.table/1","doc":"Looks up the table for a given pointer","ref":"Pointers.html#table/1"},{"type":"module","title":"Pointers.Changesets","doc":"","ref":"Pointers.Changesets.html"},{"type":"function","title":"Pointers.Changesets.build_assoc/3","doc":"Like Ecto.build_assoc/3, but can work with a Changeset","ref":"Pointers.Changesets.html#build_assoc/3"},{"type":"function","title":"Pointers.Changesets.built?/1","doc":"True if the schema object's current state is :built","ref":"Pointers.Changesets.html#built?/1"},{"type":"function","title":"Pointers.Changesets.cast/3","doc":"Like Ecto.Changeset.cast but for Pointables, Virtuals and Mixins. If a pointable or virtual, Generates an ID if one is not present.","ref":"Pointers.Changesets.html#cast/3"},{"type":"function","title":"Pointers.Changesets.cast_assoc/3","doc":"","ref":"Pointers.Changesets.html#cast_assoc/3"},{"type":"function","title":"Pointers.Changesets.cast_belongs_to/4","doc":"","ref":"Pointers.Changesets.html#cast_belongs_to/4"},{"type":"function","title":"Pointers.Changesets.cast_has_many/4","doc":"","ref":"Pointers.Changesets.html#cast_has_many/4"},{"type":"function","title":"Pointers.Changesets.cast_has_one/4","doc":"","ref":"Pointers.Changesets.html#cast_has_one/4"},{"type":"function","title":"Pointers.Changesets.config_for/3","doc":"","ref":"Pointers.Changesets.html#config_for/3"},{"type":"function","title":"Pointers.Changesets.deleted?/1","doc":"True if the schema object's current state is :deleted","ref":"Pointers.Changesets.html#deleted?/1"},{"type":"function","title":"Pointers.Changesets.get_field/2","doc":"","ref":"Pointers.Changesets.html#get_field/2"},{"type":"function","title":"Pointers.Changesets.insert_verb/1","doc":"","ref":"Pointers.Changesets.html#insert_verb/1"},{"type":"function","title":"Pointers.Changesets.loaded?/1","doc":"True if the schema object's current state is :loaded","ref":"Pointers.Changesets.html#loaded?/1"},{"type":"function","title":"Pointers.Changesets.merge_child_errors/1","doc":"","ref":"Pointers.Changesets.html#merge_child_errors/1"},{"type":"function","title":"Pointers.Changesets.put_assoc/3","doc":"Like put_assoc/3 but doesn't raise if the association doesn't exist","ref":"Pointers.Changesets.html#put_assoc/3"},{"type":"function","title":"Pointers.Changesets.put_assoc!/3","doc":"Like Ecto.Changeset.put_assoc/3 but for Pointables, Virtuals and Mixins. Copies across keys where possible.","ref":"Pointers.Changesets.html#put_assoc!/3"},{"type":"function","title":"Pointers.Changesets.put_id_on_mixins/3","doc":"","ref":"Pointers.Changesets.html#put_id_on_mixins/3"},{"type":"function","title":"Pointers.Changesets.state/1","doc":"Returns the schema object's current state.","ref":"Pointers.Changesets.html#state/1"},{"type":"function","title":"Pointers.Changesets.update_data/2","doc":"","ref":"Pointers.Changesets.html#update_data/2"},{"type":"function","title":"Pointers.Changesets.valid?/1","doc":"true if the provided changeset or list of changesets is valid.","ref":"Pointers.Changesets.html#valid?/1"},{"type":"module","title":"Pointers.Form","doc":"","ref":"Pointers.Form.html"},{"type":"macro","title":"Pointers.Form.form_schema/1","doc":"","ref":"Pointers.Form.html#form_schema/1"},{"type":"function","title":"Pointers.Form.using/2","doc":"","ref":"Pointers.Form.html#using/2"},{"type":"module","title":"Pointers.Migration","doc":"Helpers for writing Pointer-aware migrations.","ref":"Pointers.Migration.html"},{"type":"function","title":"Pointers.Migration.add_is_not_deleted/1","doc":"","ref":"Pointers.Migration.html#add_is_not_deleted/1"},{"type":"macro","title":"Pointers.Migration.create_mixin_table/3","doc":"Creates a mixin table - one with a ULID primary key and no trigger","ref":"Pointers.Migration.html#create_mixin_table/3"},{"type":"macro","title":"Pointers.Migration.create_pointable_table/2","doc":"Creates a pointable table along with its trigger.","ref":"Pointers.Migration.html#create_pointable_table/2"},{"type":"macro","title":"Pointers.Migration.create_pointable_table/3","doc":"","ref":"Pointers.Migration.html#create_pointable_table/3"},{"type":"macro","title":"Pointers.Migration.create_pointable_table/4","doc":"","ref":"Pointers.Migration.html#create_pointable_table/4"},{"type":"macro","title":"Pointers.Migration.create_random_table/3","doc":"Creates a random table - one with a UUID v4 primary key.","ref":"Pointers.Migration.html#create_random_table/3"},{"type":"function","title":"Pointers.Migration.create_virtual/1","doc":"","ref":"Pointers.Migration.html#create_virtual/1"},{"type":"function","title":"Pointers.Migration.create_virtual/2","doc":"","ref":"Pointers.Migration.html#create_virtual/2"},{"type":"function","title":"Pointers.Migration.create_virtual_trigger_function/0","doc":"","ref":"Pointers.Migration.html#create_virtual_trigger_function/0"},{"type":"function","title":"Pointers.Migration.drop_mixin_table/1","doc":"Drops a mixin table.","ref":"Pointers.Migration.html#drop_mixin_table/1"},{"type":"function","title":"Pointers.Migration.drop_pointable_table/1","doc":"Drops a pointable table","ref":"Pointers.Migration.html#drop_pointable_table/1"},{"type":"function","title":"Pointers.Migration.drop_pointable_table/2","doc":"","ref":"Pointers.Migration.html#drop_pointable_table/2"},{"type":"function","title":"Pointers.Migration.drop_random_table/1","doc":"Drops a random table.","ref":"Pointers.Migration.html#drop_random_table/1"},{"type":"function","title":"Pointers.Migration.drop_table/1","doc":"","ref":"Pointers.Migration.html#drop_table/1"},{"type":"function","title":"Pointers.Migration.drop_virtual/1","doc":"","ref":"Pointers.Migration.html#drop_virtual/1"},{"type":"function","title":"Pointers.Migration.drop_virtual/2","doc":"","ref":"Pointers.Migration.html#drop_virtual/2"},{"type":"function","title":"Pointers.Migration.init_pointers/0","doc":"When migrating up: initialises the pointers database. When migrating down: deinitialises the pointers database.","ref":"Pointers.Migration.html#init_pointers/0"},{"type":"function","title":"Pointers.Migration.init_pointers/1","doc":"Given :up : initialises the pointers database. Given :down : deinitialises the pointers database.","ref":"Pointers.Migration.html#init_pointers/1"},{"type":"function","title":"Pointers.Migration.init_pointers_ulid_extra/0","doc":"See Pointers.ULID.Migration.init_pointers_ulid_extra/0 .","ref":"Pointers.Migration.html#init_pointers_ulid_extra/0"},{"type":"function","title":"Pointers.Migration.migrate_virtual/1","doc":"","ref":"Pointers.Migration.html#migrate_virtual/1"},{"type":"function","title":"Pointers.Migration.migrate_virtual/2","doc":"","ref":"Pointers.Migration.html#migrate_virtual/2"},{"type":"function","title":"Pointers.Migration.migrate_virtual/3","doc":"","ref":"Pointers.Migration.html#migrate_virtual/3"},{"type":"function","title":"Pointers.Migration.pointer/2","doc":"Creates a strong, weak or unbreakable pointer depending on type .","ref":"Pointers.Migration.html#pointer/2"},{"type":"function","title":"Pointers.Migration.strong_pointer/1","doc":"A reference to a pointer for use with add/3 . A strong pointer will be deleted when the thing it's pointing to is deleted.","ref":"Pointers.Migration.html#strong_pointer/1"},{"type":"function","title":"Pointers.Migration.unbreakable_pointer/1","doc":"A reference to a pointer for use with add/3 . An unbreakable pointer will prevent the thing it's pointing to from being deleted.","ref":"Pointers.Migration.html#unbreakable_pointer/1"},{"type":"function","title":"Pointers.Migration.weak_pointer/1","doc":"A reference to a pointer for use with add/3 . A weak pointer will be set null when the thing it's pointing to is deleted.","ref":"Pointers.Migration.html#weak_pointer/1"},{"type":"type","title":"Pointers.Migration.pointer_type/0","doc":"","ref":"Pointers.Migration.html#t:pointer_type/0"},{"type":"module","title":"Pointers.Mixin","doc":"If a Pointer represents an object, mixins represent data about the object. Mixins collate optional additional information about an object. Different types of object will typically make use of different mixins. You can see these as aspects of the data if you like. A mixin table starts with an id column which references Pointer and forms the default primary key. It is up to the user to choose which other fields go in the table, and thus what the mixin is for. Use of a mixin is typically through has_one : has_one :my_mixin , MyMixin , foreign_key : :id , references : :id Sometimes, the user may wish to add fields to the primary key by using the primary_key: true option to add in their migrations. This is permitted and in such case we call the resulting mixin a multimixin . Use becomes has_many : has_many :my_mixin , MyMixin , foreign_key : :id , references : :id Thus the choice of single or multi comes down to how many times you want to store that data for the object. A user's profile naturally lends itself to a regular single mixin, whereas an object's appearance in a feed would naturally lend itself to being a multimixin since the object may appear in many feeds. Declaring a mixin table type defmodule My.Mixin do use Pointers.Mixin , otp_app : :my_app , source : &quot;postgres_table_name&quot; mixin_schema do field :is_awesome , :boolean end end","ref":"Pointers.Mixin.html"},{"type":"macro","title":"Pointers.Mixin.mixin_schema/1","doc":"","ref":"Pointers.Mixin.html#mixin_schema/1"},{"type":"function","title":"Pointers.Mixin.using/2","doc":"","ref":"Pointers.Mixin.html#using/2"},{"type":"exception","title":"Pointers.NotFound","doc":"We could not find the requested object","ref":"Pointers.NotFound.html"},{"type":"function","title":"Pointers.NotFound.new/1","doc":"Creates a new NotFound","ref":"Pointers.NotFound.html#new/1"},{"type":"type","title":"Pointers.NotFound.t/0","doc":"","ref":"Pointers.NotFound.html#t:t/0"},{"type":"module","title":"Pointers.Pointable","doc":"Sets up an Ecto Schema for a Pointable table. Sample Usage use Pointers.Pointable , otp_app : :my_app , # your OTP application&#39;s name source : &quot;my_table&quot; , # default name of table in database table_id : &quot;01EBTVSZJ6X02J01R1XWWPWGZW&quot; # unique ULID to identify table pointable_schema do # ... fields go here, if any end Overriding with configuration During use (i.e. compilation time), we will attempt to load configuration from the provided :otp_app under the key of the current module. Any values provided here will override the defaults provided to use . This allows you to configure them after the fact. Additionally, pointables use Flexto 's flex_schema() , so you can provide additional configuration for those in the same place. I shall say it again because it's important: This happens at compile time . You must rebuild the app containing the pointable whenever the configuration changes. Introspection Defines a function __pointers__/1 to introspect data. Recognised parameters: :role - :pointable :table_id - retrieves the ULID id of the pointable table. :otp_app - retrieves the OTP application to which this belongs.","ref":"Pointers.Pointable.html"},{"type":"macro","title":"Pointers.Pointable.pointable_schema/1","doc":"","ref":"Pointers.Pointable.html#pointable_schema/1"},{"type":"module","title":"Pointers.Pointer","doc":"A Pointer is any object that can be referenced by its id. Pointer is a simple table consisting of three fields: id - the database-unique id for this pointer in ULID format. table_id - a type tag, references Table . deleted_at - timestamp of when the object was deleted, null by default. To reference any object, simply reference Pointer : alias Pointers.Pointer belongs_to :object , Pointer To define a new object type there are two options, you should choose one: Virtual - an object type with a view over Pointer limited by type. Pointable - an object type with a table which is kept synchronised with Pointer . For most purposes, you should use a Virtual . Pointable exists mostly to support existing code. The major difference in practice is that you cannot add new fields to a virtual. Most of the time you will want to store such extra fields in one or more mixins anyway so they may be reused. See Mixin for more information about mixins.","ref":"Pointers.Pointer.html"},{"type":"function","title":"Pointers.Pointer.create/2","doc":"Changeset for creating a Pointer","ref":"Pointers.Pointer.html#create/2"},{"type":"module","title":"Pointers.Random","doc":"A securely randomly generated UUID keyed table. Not pointable.","ref":"Pointers.Random.html"},{"type":"macro","title":"Pointers.Random.random_schema/1","doc":"","ref":"Pointers.Random.html#random_schema/1"},{"type":"function","title":"Pointers.Random.using/2","doc":"","ref":"Pointers.Random.html#using/2"},{"type":"module","title":"Pointers.Table","doc":"One Table to rule them all. A record of a table participating in the pointers abstraction - mandatory if participating.","ref":"Pointers.Table.html"},{"type":"type","title":"Pointers.Table.t/0","doc":"","ref":"Pointers.Table.html#t:t/0"},{"type":"module","title":"Pointers.Tables","doc":"A Global cache of Tables to be queried by their (Pointer) IDs, table names or Ecto Schema module names. Use of the Table Service requires: You have run the migrations shipped with this library. You have started Pointers.Tables before querying. All OTP applications with pointable Ecto Schemata to be added to the schema path. OTP 21.2 or greater, though we recommend using the most recent release available. While this module is a GenServer, it is only responsible for setup of the cache and then exits with :ignore having done so. It is not recommended to restart the service as this will lead to a stop the world garbage collection of all processes and the copying of the entire cache to each process that has queried it since its last local garbage collection.","ref":"Pointers.Tables.html"},{"type":"function","title":"Pointers.Tables.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Pointers.Tables.html#child_spec/1"},{"type":"function","title":"Pointers.Tables.data/0","doc":"","ref":"Pointers.Tables.html#data/0"},{"type":"function","title":"Pointers.Tables.id/1","doc":"Look up a table id by id, name or schema.","ref":"Pointers.Tables.html#id/1"},{"type":"function","title":"Pointers.Tables.id!/1","doc":"Look up a table id by id, name or schema, raise NotFound if not found.","ref":"Pointers.Tables.html#id!/1"},{"type":"function","title":"Pointers.Tables.ids!/1","doc":"Look up many ids at once, raise NotFound if any of them are not found","ref":"Pointers.Tables.html#ids!/1"},{"type":"function","title":"Pointers.Tables.mixin_modules/0","doc":"","ref":"Pointers.Tables.html#mixin_modules/0"},{"type":"function","title":"Pointers.Tables.schema/1","doc":"Look up a schema module by id, name or schema","ref":"Pointers.Tables.html#schema/1"},{"type":"function","title":"Pointers.Tables.schema!/1","doc":"Look up a schema module by id, name or schema, raise NotFound if not found","ref":"Pointers.Tables.html#schema!/1"},{"type":"function","title":"Pointers.Tables.schema?/1","doc":"","ref":"Pointers.Tables.html#schema?/1"},{"type":"function","title":"Pointers.Tables.schema_modules/0","doc":"","ref":"Pointers.Tables.html#schema_modules/0"},{"type":"function","title":"Pointers.Tables.start_link/1","doc":"Populates the global cache with table data via introspection.","ref":"Pointers.Tables.html#start_link/1"},{"type":"function","title":"Pointers.Tables.table/1","doc":"Get a Table identified by name, id or module.","ref":"Pointers.Tables.html#table/1"},{"type":"function","title":"Pointers.Tables.table!/1","doc":"Look up a Table by name or id, raise NotFound if not found.","ref":"Pointers.Tables.html#table!/1"},{"type":"type","title":"Pointers.Tables.query/0","doc":"A query is either a table's (database) name or (Pointer) ID as a binary or the name of its Ecto Schema Module as an atom.","ref":"Pointers.Tables.html#t:query/0"},{"type":"module","title":"Pointers.ULID","doc":"An Ecto type for ULID strings.","ref":"Pointers.ULID.html"},{"type":"function","title":"Pointers.ULID.bingenerate/1","doc":"Generates a binary ULID. If a value is provided for timestamp , the generated ULID will be for the provided timestamp. Otherwise, a ULID will be generated for the current time. Arguments: timestamp : A Unix timestamp with millisecond precision.","ref":"Pointers.ULID.html#bingenerate/1"},{"type":"function","title":"Pointers.ULID.bintimestamp/1","doc":"","ref":"Pointers.ULID.html#bintimestamp/1"},{"type":"function","title":"Pointers.ULID.cast/1","doc":"Casts a 26-byte encoded string to ULID or a 16-byte binary unchanged","ref":"Pointers.ULID.html#cast/1"},{"type":"function","title":"Pointers.ULID.cast!/1","doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments.","ref":"Pointers.ULID.html#cast!/1"},{"type":"function","title":"Pointers.ULID.dump/1","doc":"Converts a Crockford Base32 encoded ULID into a binary.","ref":"Pointers.ULID.html#dump/1"},{"type":"function","title":"Pointers.ULID.dump!/1","doc":"","ref":"Pointers.ULID.html#dump!/1"},{"type":"function","title":"Pointers.ULID.embed_as/1","doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"Pointers.ULID.html#embed_as/1"},{"type":"function","title":"Pointers.ULID.encoded_randomness/1","doc":"Returns the randomness portion of the encoded ulid","ref":"Pointers.ULID.html#encoded_randomness/1"},{"type":"function","title":"Pointers.ULID.encoded_timestamp/1","doc":"Returns the timestamp portion of the encoded ulid","ref":"Pointers.ULID.html#encoded_timestamp/1"},{"type":"function","title":"Pointers.ULID.equal?/2","doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"Pointers.ULID.html#equal?/2"},{"type":"function","title":"Pointers.ULID.generate/1","doc":"Generates a Crockford Base32 encoded ULID. If a value is provided for timestamp , the generated ULID will be for the provided timestamp. Otherwise, a ULID will be generated for the current time. Arguments: timestamp : A Unix timestamp with millisecond precision.","ref":"Pointers.ULID.html#generate/1"},{"type":"function","title":"Pointers.ULID.load/1","doc":"Converts a binary ULID into a Crockford Base32 encoded string.","ref":"Pointers.ULID.html#load/1"},{"type":"function","title":"Pointers.ULID.synthesise!/1","doc":"translates alphanumerics into a sentinel ulid value","ref":"Pointers.ULID.html#synthesise!/1"},{"type":"function","title":"Pointers.ULID.timestamp/1","doc":"Returns the timestamp of an encoded or unencoded ULID","ref":"Pointers.ULID.html#timestamp/1"},{"type":"function","title":"Pointers.ULID.type/0","doc":"The underlying schema type.","ref":"Pointers.ULID.html#type/0"},{"type":"module","title":"Pointers.ULID.Migration","doc":"","ref":"Pointers.ULID.Migration.html"},{"type":"function","title":"Pointers.ULID.Migration.init_pointers_ulid_extra/0","doc":"","ref":"Pointers.ULID.Migration.html#init_pointers_ulid_extra/0"},{"type":"function","title":"Pointers.ULID.Migration.init_pointers_ulid_extra/1","doc":"","ref":"Pointers.ULID.Migration.html#init_pointers_ulid_extra/1"},{"type":"module","title":"Pointers.Unpointable","doc":"Has a ULID primary key but is not pointable.","ref":"Pointers.Unpointable.html"},{"type":"macro","title":"Pointers.Unpointable.unpointable_schema/1","doc":"","ref":"Pointers.Unpointable.html#unpointable_schema/1"},{"type":"function","title":"Pointers.Unpointable.using/2","doc":"","ref":"Pointers.Unpointable.html#using/2"},{"type":"module","title":"Pointers.Virtual","doc":"Sets up an Ecto Schema for a Virtual Pointable Virtual Pointables (or just virtuals ) are like pointables with no additional columns, except instead of being backed by a table they are backed by a view. This is more efficient of resources but only works when there are no additional columns to add. If you need to add columns to the schema, you should use a pointable. Sample Usage use Pointers.Virtual , otp_app : :my_app , # your OTP application&#39;s name source : &quot;my_table&quot; , # default name of view in database table_id : &quot;01EBTVSZJ6X02J01R1XWWPWGZW&quot; # valid ULID to identify virtual virtual_schema do # ... `has_one`, `has_many`, or *virtual* fields ONLY go here. end Overriding with configuration During use (i.e. compilation time), we will attempt to load configuration from the provided :otp_app under the key of the current module. Any values provided here will override the defaults provided to use . This allows you to configure them after the fact. Additionally, pointables use Flexto 's flex_schema() , so you can provide additional configuration for those in the same place. Unlike a regular pointable, you should not add additional (non-virtual) fields, but it is permitted to add has_one / has_many associations. I shall say it again because it's important: This happens at compile time . You must rebuild the app containing the pointable whenever the configuration changes. Introspection Defines a function __pointers__/1 to introspect data. Recognised parameters: :role - :virtual . :table_id - retrieves the ULID id of the virtual. :otp_app - retrieves the OTP application to which this belongs.","ref":"Pointers.Virtual.html"},{"type":"macro","title":"Pointers.Virtual.virtual_schema/1","doc":"","ref":"Pointers.Virtual.html#virtual_schema/1"},{"type":"module","title":"Bonfire.Boundaries","doc":"","ref":"Bonfire.Boundaries.html"},{"type":"function","title":"Bonfire.Boundaries.acls_from_preset_boundary_names/1","doc":"","ref":"Bonfire.Boundaries.html#acls_from_preset_boundary_names/1"},{"type":"function","title":"Bonfire.Boundaries.boundaries_normalise/1","doc":"","ref":"Bonfire.Boundaries.html#boundaries_normalise/1"},{"type":"function","title":"Bonfire.Boundaries.boundaries_or_default/2","doc":"","ref":"Bonfire.Boundaries.html#boundaries_or_default/2"},{"type":"function","title":"Bonfire.Boundaries.can?/3","doc":"","ref":"Bonfire.Boundaries.html#can?/3"},{"type":"function","title":"Bonfire.Boundaries.default_boundaries/1","doc":"","ref":"Bonfire.Boundaries.html#default_boundaries/1"},{"type":"function","title":"Bonfire.Boundaries.list_grants_on/1","doc":"","ref":"Bonfire.Boundaries.html#list_grants_on/1"},{"type":"function","title":"Bonfire.Boundaries.list_grants_on/2","doc":"eg: list_grants_on(id, [:see, :read])","ref":"Bonfire.Boundaries.html#list_grants_on/2"},{"type":"function","title":"Bonfire.Boundaries.list_object_acls/2","doc":"","ref":"Bonfire.Boundaries.html#list_object_acls/2"},{"type":"function","title":"Bonfire.Boundaries.load_pointer/2","doc":"","ref":"Bonfire.Boundaries.html#load_pointer/2"},{"type":"function","title":"Bonfire.Boundaries.load_pointers/2","doc":"Loads binaries according to boundaries (which are assumed to be ULID pointer IDs). Lists which are iterated and return a [sub]list with only permitted pointers.","ref":"Bonfire.Boundaries.html#load_pointers/2"},{"type":"function","title":"Bonfire.Boundaries.pointer_permitted?/2","doc":"","ref":"Bonfire.Boundaries.html#pointer_permitted?/2"},{"type":"function","title":"Bonfire.Boundaries.preset_boundary_from_acl/2","doc":"","ref":"Bonfire.Boundaries.html#preset_boundary_from_acl/2"},{"type":"function","title":"Bonfire.Boundaries.preset_boundary_tuple_from_acl/2","doc":"","ref":"Bonfire.Boundaries.html#preset_boundary_tuple_from_acl/2"},{"type":"function","title":"Bonfire.Boundaries.preset_name/1","doc":"","ref":"Bonfire.Boundaries.html#preset_name/1"},{"type":"function","title":"Bonfire.Boundaries.replace_boundaries/4","doc":"","ref":"Bonfire.Boundaries.html#replace_boundaries/4"},{"type":"function","title":"Bonfire.Boundaries.set_boundaries/3","doc":"","ref":"Bonfire.Boundaries.html#set_boundaries/3"},{"type":"function","title":"Bonfire.Boundaries.take_care_of!/2","doc":"Assigns the user as the caretaker of the given object or objects, replacing the existing caretaker, if any.","ref":"Bonfire.Boundaries.html#take_care_of!/2"},{"type":"function","title":"Bonfire.Boundaries.user_default_boundaries/0","doc":"","ref":"Bonfire.Boundaries.html#user_default_boundaries/0"},{"type":"function","title":"Bonfire.Boundaries.users_grants_on/2","doc":"","ref":"Bonfire.Boundaries.html#users_grants_on/2"},{"type":"function","title":"Bonfire.Boundaries.users_grants_on/3","doc":"","ref":"Bonfire.Boundaries.html#users_grants_on/3"},{"type":"module","title":"Bonfire.Boundaries.Acls","doc":"ACLs represent fully populated access control rules that can be reused. Can be reused to secure multiple objects, thus exists independently of any object. The table doesn't have any fields of its own: has_many ( :grants , Grant ) has_many ( :controlled , Controlled )","ref":"Bonfire.Boundaries.Acls.html"},{"type":"function","title":"Bonfire.Boundaries.Acls.acl_id/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#acl_id/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.acls/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#acls/0"},{"type":"function","title":"Bonfire.Boundaries.Acls.base_acls_from_preset/3","doc":"","ref":"Bonfire.Boundaries.Acls.html#base_acls_from_preset/3"},{"type":"function","title":"Bonfire.Boundaries.Acls.built_in_ids/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#built_in_ids/0"},{"type":"function","title":"Bonfire.Boundaries.Acls.cast/3","doc":"","ref":"Bonfire.Boundaries.Acls.html#cast/3"},{"type":"function","title":"Bonfire.Boundaries.Acls.changeset/3","doc":"","ref":"Bonfire.Boundaries.Acls.html#changeset/3"},{"type":"function","title":"Bonfire.Boundaries.Acls.create/2","doc":"","ref":"Bonfire.Boundaries.Acls.html#create/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.default_exclude_ids/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#default_exclude_ids/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.delete/2","doc":"Fully delete the ACL, including permissions/grants and controlled information. This will affect all objects previously shared with this ACL.","ref":"Bonfire.Boundaries.Acls.html#delete/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.edit/3","doc":"","ref":"Bonfire.Boundaries.Acls.html#edit/3"},{"type":"function","title":"Bonfire.Boundaries.Acls.exclude_stereotypes/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#exclude_stereotypes/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.find_caretaker_stereotypes/2","doc":"","ref":"Bonfire.Boundaries.Acls.html#find_caretaker_stereotypes/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.for_dropdown/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#for_dropdown/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.get/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#get/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.get!/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#get!/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.get_for_caretaker/3","doc":"","ref":"Bonfire.Boundaries.Acls.html#get_for_caretaker/3"},{"type":"function","title":"Bonfire.Boundaries.Acls.get_for_caretaker_q/3","doc":"","ref":"Bonfire.Boundaries.Acls.html#get_for_caretaker_q/3"},{"type":"function","title":"Bonfire.Boundaries.Acls.get_id/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#get_id/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.get_id!/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#get_id!/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.get_object_custom_acl/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#get_object_custom_acl/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.get_or_create_object_custom_acl/2","doc":"","ref":"Bonfire.Boundaries.Acls.html#get_or_create_object_custom_acl/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.is_object_custom?/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#is_object_custom?/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.is_stereotype?/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#is_stereotype?/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.is_stereotyped?/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#is_stereotyped?/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.list/1","doc":"Lists ACLs we are permitted to see.","ref":"Bonfire.Boundaries.Acls.html#list/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.list_built_ins/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#list_built_ins/0"},{"type":"function","title":"Bonfire.Boundaries.Acls.list_my/2","doc":"Lists the ACLs we are the registered caretakers of that we are permitted to see. If any are created without permitting the user to see them, they will not be shown.","ref":"Bonfire.Boundaries.Acls.html#list_my/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.list_my_q/2","doc":"query for list_my","ref":"Bonfire.Boundaries.Acls.html#list_my_q/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.list_my_with_counts/2","doc":"","ref":"Bonfire.Boundaries.Acls.html#list_my_with_counts/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.list_q/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#list_q/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.local_acl_ids/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#local_acl_ids/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.maybe_search/2","doc":"","ref":"Bonfire.Boundaries.Acls.html#maybe_search/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.opts_for_dropdown/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#opts_for_dropdown/0"},{"type":"function","title":"Bonfire.Boundaries.Acls.opts_for_list/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#opts_for_list/0"},{"type":"function","title":"Bonfire.Boundaries.Acls.prepare_cast/3","doc":"","ref":"Bonfire.Boundaries.Acls.html#prepare_cast/3"},{"type":"function","title":"Bonfire.Boundaries.Acls.preset_acl_ids/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#preset_acl_ids/0"},{"type":"function","title":"Bonfire.Boundaries.Acls.public_acl_ids/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#public_acl_ids/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.remote_public_acl_ids/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#remote_public_acl_ids/0"},{"type":"function","title":"Bonfire.Boundaries.Acls.set/3","doc":"","ref":"Bonfire.Boundaries.Acls.html#set/3"},{"type":"function","title":"Bonfire.Boundaries.Acls.simple_create/2","doc":"","ref":"Bonfire.Boundaries.Acls.html#simple_create/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.soft_delete/2","doc":"Soft-delete the ACL, meaning it will not be displayed anymore, but permissions/grants and controlled information will be preserved. This will not affect objects previously shared with this ACL.","ref":"Bonfire.Boundaries.Acls.html#soft_delete/2"},{"type":"function","title":"Bonfire.Boundaries.Acls.stereotype_ids/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#stereotype_ids/0"},{"type":"function","title":"Bonfire.Boundaries.Acls.user_default_acl/1","doc":"","ref":"Bonfire.Boundaries.Acls.html#user_default_acl/1"},{"type":"function","title":"Bonfire.Boundaries.Acls.user_default_acls/0","doc":"","ref":"Bonfire.Boundaries.Acls.html#user_default_acls/0"},{"type":"module","title":"Bonfire.Boundaries.Acts.SetBoundaries","doc":"","ref":"Bonfire.Boundaries.Acts.SetBoundaries.html"},{"type":"function","title":"Bonfire.Boundaries.Acts.SetBoundaries.run/2","doc":"","ref":"Bonfire.Boundaries.Acts.SetBoundaries.html#run/2"},{"type":"module","title":"Bonfire.Boundaries.Blocks","doc":"","ref":"Bonfire.Boundaries.Blocks.html"},{"type":"function","title":"Bonfire.Boundaries.Blocks.ap_receive_activity/3","doc":"","ref":"Bonfire.Boundaries.Blocks.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Boundaries.Blocks.block/3","doc":"","ref":"Bonfire.Boundaries.Blocks.html#block/3"},{"type":"function","title":"Bonfire.Boundaries.Blocks.federation_module/0","doc":"","ref":"Bonfire.Boundaries.Blocks.html#federation_module/0"},{"type":"function","title":"Bonfire.Boundaries.Blocks.instance_wide_block/2","doc":"Block something for everyone on the instance (only for admins)","ref":"Bonfire.Boundaries.Blocks.html#instance_wide_block/2"},{"type":"function","title":"Bonfire.Boundaries.Blocks.instance_wide_circles/1","doc":"","ref":"Bonfire.Boundaries.Blocks.html#instance_wide_circles/1"},{"type":"function","title":"Bonfire.Boundaries.Blocks.is_blocked?/3","doc":"Checks if a user_or_instance is blocked Pass a block_type (eg :silence or :ghost ) Pass a current_user in opts or check :instance_wide","ref":"Bonfire.Boundaries.Blocks.html#is_blocked?/3"},{"type":"function","title":"Bonfire.Boundaries.Blocks.list/2","doc":"","ref":"Bonfire.Boundaries.Blocks.html#list/2"},{"type":"function","title":"Bonfire.Boundaries.Blocks.remote_instance_block/3","doc":"","ref":"Bonfire.Boundaries.Blocks.html#remote_instance_block/3"},{"type":"function","title":"Bonfire.Boundaries.Blocks.types_blocked/1","doc":"","ref":"Bonfire.Boundaries.Blocks.html#types_blocked/1"},{"type":"function","title":"Bonfire.Boundaries.Blocks.unblock/3","doc":"","ref":"Bonfire.Boundaries.Blocks.html#unblock/3"},{"type":"function","title":"Bonfire.Boundaries.Blocks.unblock_all/2","doc":"","ref":"Bonfire.Boundaries.Blocks.html#unblock_all/2"},{"type":"function","title":"Bonfire.Boundaries.Blocks.user_block_circles/2","doc":"","ref":"Bonfire.Boundaries.Blocks.html#user_block_circles/2"},{"type":"module","title":"Bonfire.Boundaries.Blocks.LiveHandler","doc":"","ref":"Bonfire.Boundaries.Blocks.LiveHandler.html"},{"type":"function","title":"Bonfire.Boundaries.Blocks.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Boundaries.Blocks.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Boundaries.Blocks.LiveHandler.preload/2","doc":"","ref":"Bonfire.Boundaries.Blocks.LiveHandler.html#preload/2"},{"type":"macro","title":"Bonfire.Boundaries.Blocks.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Boundaries.Blocks.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Boundaries.Circles","doc":"","ref":"Bonfire.Boundaries.Circles.html"},{"type":"function","title":"Bonfire.Boundaries.Circles.add_to_circles/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#add_to_circles/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.changeset/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#changeset/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.changeset/3","doc":"","ref":"Bonfire.Boundaries.Circles.html#changeset/3"},{"type":"function","title":"Bonfire.Boundaries.Circles.circle_ids/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#circle_ids/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.circles/0","doc":"","ref":"Bonfire.Boundaries.Circles.html#circles/0"},{"type":"function","title":"Bonfire.Boundaries.Circles.create/2","doc":"Create a circle for the provided user (and with the user in the circle?)","ref":"Bonfire.Boundaries.Circles.html#create/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.delete/2","doc":"Fully delete the circle, including membership and boundary information. This will affect all objects previously shared with members of this circle.","ref":"Bonfire.Boundaries.Circles.html#delete/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.edit/3","doc":"","ref":"Bonfire.Boundaries.Circles.html#edit/3"},{"type":"function","title":"Bonfire.Boundaries.Circles.empty_circles/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#empty_circles/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.get/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#get/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.get!/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#get!/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.get_by_name/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#get_by_name/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.get_for_caretaker/3","doc":"","ref":"Bonfire.Boundaries.Circles.html#get_for_caretaker/3"},{"type":"function","title":"Bonfire.Boundaries.Circles.get_id/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#get_id/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.get_id!/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#get_id!/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.get_or_create/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#get_or_create/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.get_stereotype_circles/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#get_stereotype_circles/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.get_tuple/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#get_tuple/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.is_encircled_by?/2","doc":"Lists the circles that we are permitted to see.","ref":"Bonfire.Boundaries.Circles.html#is_encircled_by?/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.is_encircled_by_q/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#is_encircled_by_q/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.is_stereotype?/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#is_stereotype?/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.list_built_ins/0","doc":"","ref":"Bonfire.Boundaries.Circles.html#list_built_ins/0"},{"type":"function","title":"Bonfire.Boundaries.Circles.list_by_ids/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#list_by_ids/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.list_my/2","doc":"Lists the circles we are the registered caretakers of that we are permitted to see. If any circles are created without permitting the user to see them, they will not be shown.","ref":"Bonfire.Boundaries.Circles.html#list_my/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.list_my_defaults/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#list_my_defaults/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.list_my_with_counts/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#list_my_with_counts/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.list_my_with_global/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#list_my_with_global/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.list_visible/2","doc":"Lists the circles that we are permitted to see.","ref":"Bonfire.Boundaries.Circles.html#list_visible/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.preload_encircled_by/3","doc":"","ref":"Bonfire.Boundaries.Circles.html#preload_encircled_by/3"},{"type":"function","title":"Bonfire.Boundaries.Circles.query/1","doc":"query for list_visible","ref":"Bonfire.Boundaries.Circles.html#query/1"},{"type":"function","title":"Bonfire.Boundaries.Circles.query_my/2","doc":"query for list_my","ref":"Bonfire.Boundaries.Circles.html#query_my/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.query_my_by_id/3","doc":"query for get","ref":"Bonfire.Boundaries.Circles.html#query_my_by_id/3"},{"type":"function","title":"Bonfire.Boundaries.Circles.query_visible/2","doc":"query for list_visible","ref":"Bonfire.Boundaries.Circles.html#query_visible/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.remove_from_circles/2","doc":"","ref":"Bonfire.Boundaries.Circles.html#remove_from_circles/2"},{"type":"function","title":"Bonfire.Boundaries.Circles.stereotype_ids/0","doc":"","ref":"Bonfire.Boundaries.Circles.html#stereotype_ids/0"},{"type":"function","title":"Bonfire.Boundaries.Circles.to_circle_ids/1","doc":"","ref":"Bonfire.Boundaries.Circles.html#to_circle_ids/1"},{"type":"module","title":"Bonfire.Boundaries.Controlleds","doc":"An object is linked to one or more Acl s by the Controlled multimixin, which pairs an object ID with an ACL ID. Because it is a multimixin, a given object can have multiple ACLs applied. In the case of overlap, permissions are combined with false being prioritised.","ref":"Bonfire.Boundaries.Controlleds.html"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.add_acls/2","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#add_acls/2"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.changeset/2","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#changeset/2"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.create/1","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#create/1"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.get_preset_on_object/1","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#get_preset_on_object/1"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.grant_role/4","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#grant_role/4"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.list_grants_by_verbs/3","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#list_grants_by_verbs/3"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.list_on_object/2","doc":"List ALL boundaries applied to an object. Only call this as an admin or curator of the object.","ref":"Bonfire.Boundaries.Controlleds.html#list_on_object/2"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.list_on_objects_by_subject/2","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#list_on_objects_by_subject/2"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.list_presets_on_objects/1","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#list_presets_on_objects/1"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.list_q/1","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#list_q/1"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.list_subjects_by_verb/3","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#list_subjects_by_verb/3"},{"type":"function","title":"Bonfire.Boundaries.Controlleds.remove_acls/2","doc":"","ref":"Bonfire.Boundaries.Controlleds.html#remove_acls/2"},{"type":"module","title":"Bonfire.Boundaries.Debug","doc":"","ref":"Bonfire.Boundaries.Debug.html"},{"type":"function","title":"Bonfire.Boundaries.Debug.debug_grants_on/1","doc":"","ref":"Bonfire.Boundaries.Debug.html#debug_grants_on/1"},{"type":"function","title":"Bonfire.Boundaries.Debug.debug_grants_on/2","doc":"","ref":"Bonfire.Boundaries.Debug.html#debug_grants_on/2"},{"type":"function","title":"Bonfire.Boundaries.Debug.debug_my_grants_on/2","doc":"","ref":"Bonfire.Boundaries.Debug.html#debug_my_grants_on/2"},{"type":"function","title":"Bonfire.Boundaries.Debug.debug_object_acls/1","doc":"","ref":"Bonfire.Boundaries.Debug.html#debug_object_acls/1"},{"type":"function","title":"Bonfire.Boundaries.Debug.debug_user_acls/2","doc":"","ref":"Bonfire.Boundaries.Debug.html#debug_user_acls/2"},{"type":"function","title":"Bonfire.Boundaries.Debug.debug_user_circles/1","doc":"","ref":"Bonfire.Boundaries.Debug.html#debug_user_circles/1"},{"type":"module","title":"Bonfire.Boundaries.Fixtures","doc":"","ref":"Bonfire.Boundaries.Fixtures.html"},{"type":"function","title":"Bonfire.Boundaries.Fixtures.activity_pub_circle/0","doc":"","ref":"Bonfire.Boundaries.Fixtures.html#activity_pub_circle/0"},{"type":"function","title":"Bonfire.Boundaries.Fixtures.admin_circle/0","doc":"","ref":"Bonfire.Boundaries.Fixtures.html#admin_circle/0"},{"type":"function","title":"Bonfire.Boundaries.Fixtures.custom_acl/0","doc":"","ref":"Bonfire.Boundaries.Fixtures.html#custom_acl/0"},{"type":"function","title":"Bonfire.Boundaries.Fixtures.global_circles/0","doc":"","ref":"Bonfire.Boundaries.Fixtures.html#global_circles/0"},{"type":"function","title":"Bonfire.Boundaries.Fixtures.insert/0","doc":"","ref":"Bonfire.Boundaries.Fixtures.html#insert/0"},{"type":"function","title":"Bonfire.Boundaries.Fixtures.instance_acl/0","doc":"","ref":"Bonfire.Boundaries.Fixtures.html#instance_acl/0"},{"type":"module","title":"Bonfire.Boundaries.Grants","doc":"A grant is part of an Acl , and defines a permission ( value boolean on a verb ) for a subject","ref":"Bonfire.Boundaries.Grants.html"},{"type":"function","title":"Bonfire.Boundaries.Grants.changeset/2","doc":"","ref":"Bonfire.Boundaries.Grants.html#changeset/2"},{"type":"function","title":"Bonfire.Boundaries.Grants.changeset/3","doc":"","ref":"Bonfire.Boundaries.Grants.html#changeset/3"},{"type":"function","title":"Bonfire.Boundaries.Grants.create/1","doc":"","ref":"Bonfire.Boundaries.Grants.html#create/1"},{"type":"function","title":"Bonfire.Boundaries.Grants.create/2","doc":"","ref":"Bonfire.Boundaries.Grants.html#create/2"},{"type":"function","title":"Bonfire.Boundaries.Grants.grant/5","doc":"Edits or adds a grant to an Acl Takes three parameters: subject_id: who we are granting access to acl_id: what ACL we're applying a grant to verb: which verb/action value: true, false, or nil","ref":"Bonfire.Boundaries.Grants.html#grant/5"},{"type":"function","title":"Bonfire.Boundaries.Grants.grant_role/4","doc":"Edits or adds grants to an Acl based on a role","ref":"Bonfire.Boundaries.Grants.html#grant_role/4"},{"type":"function","title":"Bonfire.Boundaries.Grants.grants/0","doc":"","ref":"Bonfire.Boundaries.Grants.html#grants/0"},{"type":"function","title":"Bonfire.Boundaries.Grants.list/1","doc":"Lists the grants permitted to see.","ref":"Bonfire.Boundaries.Grants.html#list/1"},{"type":"function","title":"Bonfire.Boundaries.Grants.list_my/1","doc":"Lists the grants we are the registered caretakers of that we are permitted to see. If any are created without permitting the user to see them, they will not be shown.","ref":"Bonfire.Boundaries.Grants.html#list_my/1"},{"type":"function","title":"Bonfire.Boundaries.Grants.list_my_q/1","doc":"query for list_my","ref":"Bonfire.Boundaries.Grants.html#list_my_q/1"},{"type":"function","title":"Bonfire.Boundaries.Grants.list_q/1","doc":"","ref":"Bonfire.Boundaries.Grants.html#list_q/1"},{"type":"function","title":"Bonfire.Boundaries.Grants.remove_subject_from_acl/2","doc":"","ref":"Bonfire.Boundaries.Grants.html#remove_subject_from_acl/2"},{"type":"function","title":"Bonfire.Boundaries.Grants.upsert_or_delete/2","doc":"","ref":"Bonfire.Boundaries.Grants.html#upsert_or_delete/2"},{"type":"module","title":"Bonfire.Boundaries.Integration","doc":"","ref":"Bonfire.Boundaries.Integration.html"},{"type":"function","title":"Bonfire.Boundaries.Integration.is_admin?/1","doc":"","ref":"Bonfire.Boundaries.Integration.html#is_admin?/1"},{"type":"function","title":"Bonfire.Boundaries.Integration.is_local?/1","doc":"","ref":"Bonfire.Boundaries.Integration.html#is_local?/1"},{"type":"function","title":"Bonfire.Boundaries.Integration.repo/0","doc":"","ref":"Bonfire.Boundaries.Integration.html#repo/0"},{"type":"module","title":"Bonfire.Boundaries.LiveHandler","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.acl_create/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#acl_create/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.boundaries_on_objects/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#boundaries_on_objects/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.circle_create/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#circle_create/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.known_circle_tuples/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#known_circle_tuples/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.maybe_check_boundaries/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#maybe_check_boundaries/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.maybe_preload_and_check_boundaries/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#maybe_preload_and_check_boundaries/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.maybe_redirect_to/3","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#maybe_redirect_to/3"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.preload/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#preload/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.remove_from_circle_tuples/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#remove_from_circle_tuples/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.set_circles/3","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#set_circles/3"},{"type":"macro","title":"Bonfire.Boundaries.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#sigil_p/2"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.subject_name/1","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#subject_name/1"},{"type":"function","title":"Bonfire.Boundaries.LiveHandler.unblock/4","doc":"","ref":"Bonfire.Boundaries.LiveHandler.html#unblock/4"},{"type":"module","title":"Bonfire.Boundaries.Queries","doc":"Helpers for writing common queries. In particular, access control. Most of this stuff will probably move at some point when we figure out how to better organise it. Unfortunately, ecto is against the sort of thing we take for granted in the bonfire ecosystem, so some of these patterns are a bit convoluted to make ecto generate acceptable sql. In particular the lateral join and the macro is a bit loltastic when we could just return an arbitrary tuple if ecto would support inferring (or us providing) the return type of a subquery.","ref":"Bonfire.Boundaries.Queries.html"},{"type":"macro","title":"Bonfire.Boundaries.Queries.add_perms/2","doc":"Call the add_perms(bool?, bool?) postgres function for combining permissions.","ref":"Bonfire.Boundaries.Queries.html#add_perms/2"},{"type":"macro","title":"Bonfire.Boundaries.Queries.agg_perms/1","doc":"Call the agg_perms(bool?) postgres aggregate for combining permissions.","ref":"Bonfire.Boundaries.Queries.html#agg_perms/1"},{"type":"macro","title":"Bonfire.Boundaries.Queries.boundarise/3","doc":"","ref":"Bonfire.Boundaries.Queries.html#boundarise/3"},{"type":"function","title":"Bonfire.Boundaries.Queries.object_boundarised/2","doc":"","ref":"Bonfire.Boundaries.Queries.html#object_boundarised/2"},{"type":"function","title":"Bonfire.Boundaries.Queries.permitted/1","doc":"","ref":"Bonfire.Boundaries.Queries.html#permitted/1"},{"type":"function","title":"Bonfire.Boundaries.Queries.permitted/2","doc":"","ref":"Bonfire.Boundaries.Queries.html#permitted/2"},{"type":"function","title":"Bonfire.Boundaries.Queries.query_with_summary/3","doc":"A subquery which filters out results the current user is not permitted to perform all of the specified verbs on. Parameters are an expression evaluating to the current user, a list of verbs, and optionally an initial query on Summary in order to filter what objects are checked.","ref":"Bonfire.Boundaries.Queries.html#query_with_summary/3"},{"type":"function","title":"Bonfire.Boundaries.Queries.skip_boundary_check?/2","doc":"","ref":"Bonfire.Boundaries.Queries.html#skip_boundary_check?/2"},{"type":"module","title":"Bonfire.Boundaries.Roles","doc":"","ref":"Bonfire.Boundaries.Roles.html"},{"type":"function","title":"Bonfire.Boundaries.Roles.cannot_role_from_verb/5","doc":"","ref":"Bonfire.Boundaries.Roles.html#cannot_role_from_verb/5"},{"type":"function","title":"Bonfire.Boundaries.Roles.create/2","doc":"","ref":"Bonfire.Boundaries.Roles.html#create/2"},{"type":"function","title":"Bonfire.Boundaries.Roles.create/3","doc":"","ref":"Bonfire.Boundaries.Roles.html#create/3"},{"type":"function","title":"Bonfire.Boundaries.Roles.edit_verb_permission/4","doc":"","ref":"Bonfire.Boundaries.Roles.html#edit_verb_permission/4"},{"type":"function","title":"Bonfire.Boundaries.Roles.get/2","doc":"","ref":"Bonfire.Boundaries.Roles.html#get/2"},{"type":"function","title":"Bonfire.Boundaries.Roles.preset_boundary_role_from_acl/1","doc":"","ref":"Bonfire.Boundaries.Roles.html#preset_boundary_role_from_acl/1"},{"type":"function","title":"Bonfire.Boundaries.Roles.remove_cannot/4","doc":"","ref":"Bonfire.Boundaries.Roles.html#remove_cannot/4"},{"type":"function","title":"Bonfire.Boundaries.Roles.reset_instance_roles/0","doc":"","ref":"Bonfire.Boundaries.Roles.html#reset_instance_roles/0"},{"type":"function","title":"Bonfire.Boundaries.Roles.role_from_grants/2","doc":"","ref":"Bonfire.Boundaries.Roles.html#role_from_grants/2"},{"type":"function","title":"Bonfire.Boundaries.Roles.role_from_verb/5","doc":"","ref":"Bonfire.Boundaries.Roles.html#role_from_verb/5"},{"type":"function","title":"Bonfire.Boundaries.Roles.role_verbs/2","doc":"","ref":"Bonfire.Boundaries.Roles.html#role_verbs/2"},{"type":"function","title":"Bonfire.Boundaries.Roles.roles_for_dropdown/2","doc":"","ref":"Bonfire.Boundaries.Roles.html#roles_for_dropdown/2"},{"type":"function","title":"Bonfire.Boundaries.Roles.verbs_for_role/2","doc":"","ref":"Bonfire.Boundaries.Roles.html#verbs_for_role/2"},{"type":"module","title":"Bonfire.Boundaries.RuntimeConfig","doc":"","ref":"Bonfire.Boundaries.RuntimeConfig.html"},{"type":"function","title":"Bonfire.Boundaries.RuntimeConfig.config/0","doc":"NOTE: you can override this default config in your app's runtime.exs, by placing similarly-named config keys below the Bonfire.Common.Config.LoadExtensionsConfig.load_configs line","ref":"Bonfire.Boundaries.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.Boundaries.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.Boundaries.RuntimeConfig.html#config_module/0"},{"type":"module","title":"Bonfire.Boundaries.Summary","doc":"","ref":"Bonfire.Boundaries.Summary.html"},{"type":"function","title":"Bonfire.Boundaries.Summary.migrate_views/0","doc":"","ref":"Bonfire.Boundaries.Summary.html#migrate_views/0"},{"type":"module","title":"Bonfire.Boundaries.Users","doc":"Reads fixtures in configuration and creates a default boundaries setup for a user","ref":"Bonfire.Boundaries.Users.html"},{"type":"function","title":"Bonfire.Boundaries.Users.create_default_boundaries/2","doc":"","ref":"Bonfire.Boundaries.Users.html#create_default_boundaries/2"},{"type":"module","title":"Bonfire.Boundaries.Verbs","doc":"","ref":"Bonfire.Boundaries.Verbs.html"},{"type":"function","title":"Bonfire.Boundaries.Verbs.changeset/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#changeset/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.create/1","doc":"","ref":"Bonfire.Boundaries.Verbs.html#create/1"},{"type":"function","title":"Bonfire.Boundaries.Verbs.get/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#get/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.get!/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#get!/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.get_id/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#get_id/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.get_id!/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#get_id!/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.get_slug/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#get_slug/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.get_tuple/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#get_tuple/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.ids/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#ids/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.list/2","doc":"","ref":"Bonfire.Boundaries.Verbs.html#list/2"},{"type":"function","title":"Bonfire.Boundaries.Verbs.list_verbs_debug/0","doc":"","ref":"Bonfire.Boundaries.Verbs.html#list_verbs_debug/0"},{"type":"function","title":"Bonfire.Boundaries.Verbs.slugs/0","doc":"","ref":"Bonfire.Boundaries.Verbs.html#slugs/0"},{"type":"function","title":"Bonfire.Boundaries.Verbs.verbs/0","doc":"","ref":"Bonfire.Boundaries.Verbs.html#verbs/0"},{"type":"function","title":"Bonfire.Boundaries.Verbs.verbs_count/0","doc":"","ref":"Bonfire.Boundaries.Verbs.html#verbs_count/0"},{"type":"module","title":"Bonfire.Boundaries.Web.ExcludeBoundaries","doc":"","ref":"Bonfire.Boundaries.Web.ExcludeBoundaries.html"},{"type":"function","title":"Bonfire.Boundaries.Web.ExcludeBoundaries.do_handle_event/3","doc":"","ref":"Bonfire.Boundaries.Web.ExcludeBoundaries.html#do_handle_event/3"},{"type":"module","title":"Bonfire.Boundaries.Web.Routes","doc":"","ref":"Bonfire.Boundaries.Web.Routes.html"},{"type":"function","title":"Bonfire.Boundaries.Web.Routes.declare_routes/0","doc":"","ref":"Bonfire.Boundaries.Web.Routes.html#declare_routes/0"},{"type":"module","title":"Bonfire.Common","doc":"A library of common utils and helpers used across Bonfire extensions Refer to the README","ref":"Bonfire.Common.html"},{"type":"module","title":"Bonfire.Common.Benchmark","doc":"Simple way to measure the execution time of functions. It is preferred to use @decorator from Untangle instead.","ref":"Bonfire.Common.Benchmark.html"},{"type":"function","title":"Bonfire.Common.Benchmark.apply_timed/1","doc":"","ref":"Bonfire.Common.Benchmark.html#apply_timed/1"},{"type":"function","title":"Bonfire.Common.Benchmark.apply_timed/2","doc":"","ref":"Bonfire.Common.Benchmark.html#apply_timed/2"},{"type":"function","title":"Bonfire.Common.Benchmark.apply_timed/3","doc":"","ref":"Bonfire.Common.Benchmark.html#apply_timed/3"},{"type":"module","title":"Bonfire.Common.Cache","doc":"Helpers for caching data and operations","ref":"Bonfire.Common.Cache.html"},{"type":"macro","title":"Bonfire.Common.Cache.cache/0","doc":"","ref":"Bonfire.Common.Cache.html#cache/0"},{"type":"function","title":"Bonfire.Common.Cache.cache_key/1","doc":"","ref":"Bonfire.Common.Cache.html#cache_key/1"},{"type":"function","title":"Bonfire.Common.Cache.cached_preloads_for_objects/3","doc":"","ref":"Bonfire.Common.Cache.html#cached_preloads_for_objects/3"},{"type":"function","title":"Bonfire.Common.Cache.maybe_apply_cached/3","doc":"Takes a function (or module and function names) and a set of arguments for that function, and tries to fetch the previous result of running that function from the in-memory cache, using the MFA (module name/function name/arguments used) to generate the cache key. If it's not in the cache, it executes the function, and caches and returns the result.","ref":"Bonfire.Common.Cache.html#maybe_apply_cached/3"},{"type":"function","title":"Bonfire.Common.Cache.remove/2","doc":"It removes the entry associated with a key from the cache.","ref":"Bonfire.Common.Cache.html#remove/2"},{"type":"function","title":"Bonfire.Common.Cache.remove_all/1","doc":"","ref":"Bonfire.Common.Cache.html#remove_all/1"},{"type":"function","title":"Bonfire.Common.Cache.reset/3","doc":"It removes the result of a given function from the cache.","ref":"Bonfire.Common.Cache.html#reset/3"},{"type":"module","title":"Bonfire.Common.Changelog.Github.DataGrabber","doc":"Datagrabber for changelog generation, Versioce.Config.Changelog.datagrabber/0 Uses repository history to obtain and format data.","ref":"Bonfire.Common.Changelog.Github.DataGrabber.html"},{"type":"function","title":"Bonfire.Common.Changelog.Github.DataGrabber.fetch_issues/1","doc":"","ref":"Bonfire.Common.Changelog.Github.DataGrabber.html#fetch_issues/1"},{"type":"function","title":"Bonfire.Common.Changelog.Github.DataGrabber.format_issue/1","doc":"","ref":"Bonfire.Common.Changelog.Github.DataGrabber.html#format_issue/1"},{"type":"function","title":"Bonfire.Common.Changelog.Github.DataGrabber.prepare_data/2","doc":"","ref":"Bonfire.Common.Changelog.Github.DataGrabber.html#prepare_data/2"},{"type":"module","title":"Bonfire.Common.Config","doc":"","ref":"Bonfire.Common.Config.html"},{"type":"macro","title":"Bonfire.Common.Config.compilation_error/1","doc":"","ref":"Bonfire.Common.Config.html#compilation_error/1"},{"type":"function","title":"Bonfire.Common.Config.delete/2","doc":"","ref":"Bonfire.Common.Config.html#delete/2"},{"type":"function","title":"Bonfire.Common.Config.endpoint_module/0","doc":"","ref":"Bonfire.Common.Config.html#endpoint_module/0"},{"type":"function","title":"Bonfire.Common.Config.env/0","doc":"","ref":"Bonfire.Common.Config.html#env/0"},{"type":"function","title":"Bonfire.Common.Config.get/3","doc":"Get config value for a config key (optionally from a specific OTP app or Bonfire extension)","ref":"Bonfire.Common.Config.html#get/3"},{"type":"function","title":"Bonfire.Common.Config.get!/2","doc":"","ref":"Bonfire.Common.Config.html#get!/2"},{"type":"function","title":"Bonfire.Common.Config.get_ext/1","doc":"Get all config keys/values for a specific Bonfire extension or OTP app","ref":"Bonfire.Common.Config.html#get_ext/1"},{"type":"function","title":"Bonfire.Common.Config.get_ext/3","doc":"Get config value for a Bonfire extension or OTP app config key","ref":"Bonfire.Common.Config.html#get_ext/3"},{"type":"function","title":"Bonfire.Common.Config.get_ext!/1","doc":"","ref":"Bonfire.Common.Config.html#get_ext!/1"},{"type":"function","title":"Bonfire.Common.Config.get_ext!/2","doc":"","ref":"Bonfire.Common.Config.html#get_ext!/2"},{"type":"function","title":"Bonfire.Common.Config.keys_tree/1","doc":"Constructs a key path for settings/config, which always starts with an app or extension name (which defaults to the main OTP app) iex&gt; keys_tree([:bonfire_me, Bonfire.Me.Users]) [:bonfire_me, Bonfire.Me.Users] iex&gt; keys_tree(Bonfire.Me.Users) [:bonfire_me, Bonfire.Me.Users] iex&gt; keys_tree(:bonfire_me) [:bonfire_me] iex&gt; keys_tree(:random_atom) [:bonfire, :random_atom] iex&gt;keys_tree([:random_atom, :sub_key]) [:bonfire, :random_atom, :sub_key]","ref":"Bonfire.Common.Config.html#keys_tree/1"},{"type":"function","title":"Bonfire.Common.Config.module_enabled?/1","doc":"See Bonfire.Common.Extend.module_enabled?/1 .","ref":"Bonfire.Common.Config.html#module_enabled?/1"},{"type":"function","title":"Bonfire.Common.Config.put/1","doc":"","ref":"Bonfire.Common.Config.html#put/1"},{"type":"function","title":"Bonfire.Common.Config.put/3","doc":"","ref":"Bonfire.Common.Config.html#put/3"},{"type":"function","title":"Bonfire.Common.Config.repo/0","doc":"","ref":"Bonfire.Common.Config.html#repo/0"},{"type":"function","title":"Bonfire.Common.Config.require_extension_config!/1","doc":"Stop if an Elixir module or extension / OTP app doesn't have configuration keys set up","ref":"Bonfire.Common.Config.html#require_extension_config!/1"},{"type":"function","title":"Bonfire.Common.Config.top_level_otp_app/0","doc":"","ref":"Bonfire.Common.Config.html#top_level_otp_app/0"},{"type":"exception","title":"Bonfire.Common.Config.Error","doc":"","ref":"Bonfire.Common.Config.Error.html"},{"type":"module","title":"Bonfire.Common.Config.LoadExtensionsConfig","doc":"Loads instance Settings from DB into Elixir's Config While this module is a GenServer, it is only responsible for querying the settings, putting them in Config, and then exits with :ignore having done so.","ref":"Bonfire.Common.Config.LoadExtensionsConfig.html"},{"type":"function","title":"Bonfire.Common.Config.LoadExtensionsConfig.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Bonfire.Common.Config.LoadExtensionsConfig.html#child_spec/1"},{"type":"function","title":"Bonfire.Common.Config.LoadExtensionsConfig.load_configs/1","doc":"","ref":"Bonfire.Common.Config.LoadExtensionsConfig.html#load_configs/1"},{"type":"function","title":"Bonfire.Common.Config.LoadExtensionsConfig.start_link/1","doc":"Populates the global cache with table data via introspection.","ref":"Bonfire.Common.Config.LoadExtensionsConfig.html#start_link/1"},{"type":"behaviour","title":"Bonfire.Common.ConfigModule","doc":"A global cache of runtime config modules to be loaded at app startup.","ref":"Bonfire.Common.ConfigModule.html"},{"type":"callback","title":"Bonfire.Common.ConfigModule.config/0","doc":"Set runtime config","ref":"Bonfire.Common.ConfigModule.html#c:config/0"},{"type":"callback","title":"Bonfire.Common.ConfigModule.config_module/0","doc":"Declares a config module","ref":"Bonfire.Common.ConfigModule.html#c:config_module/0"},{"type":"function","title":"Bonfire.Common.ConfigModule.modules/0","doc":"Callback implementation for Bonfire.Common.ExtensionBehaviour.modules/0 .","ref":"Bonfire.Common.ConfigModule.html#modules/0"},{"type":"behaviour","title":"Bonfire.Common.ContextModule","doc":"Find a context or query module via its schema, backed by a global cache of known modules.","ref":"Bonfire.Common.ContextModule.html"},{"type":"function","title":"Bonfire.Common.ContextModule.apply_error/2","doc":"","ref":"Bonfire.Common.ContextModule.html#apply_error/2"},{"type":"function","title":"Bonfire.Common.ContextModule.context_function_error/2","doc":"","ref":"Bonfire.Common.ContextModule.html#context_function_error/2"},{"type":"callback","title":"Bonfire.Common.ContextModule.context_module/0","doc":"Declares a context module","ref":"Bonfire.Common.ContextModule.html#c:context_module/0"},{"type":"function","title":"Bonfire.Common.ContextModule.context_module/1","doc":"Get a context identified by schema","ref":"Bonfire.Common.ContextModule.html#context_module/1"},{"type":"function","title":"Bonfire.Common.ContextModule.context_module!/1","doc":"Look up a context, throw :not_found if not found.","ref":"Bonfire.Common.ContextModule.html#context_module!/1"},{"type":"function","title":"Bonfire.Common.ContextModule.context_modules/1","doc":"Look up many contexts at once, throw :not_found if any of them are not found","ref":"Bonfire.Common.ContextModule.html#context_modules/1"},{"type":"function","title":"Bonfire.Common.ContextModule.linked_query_modules/0","doc":"","ref":"Bonfire.Common.ContextModule.html#linked_query_modules/0"},{"type":"function","title":"Bonfire.Common.ContextModule.linked_schema_modules/0","doc":"","ref":"Bonfire.Common.ContextModule.html#linked_schema_modules/0"},{"type":"function","title":"Bonfire.Common.ContextModule.maybe_apply/4","doc":"Given an object or schema module name, run a function on the associated context module.","ref":"Bonfire.Common.ContextModule.html#maybe_apply/4"},{"type":"function","title":"Bonfire.Common.ContextModule.maybe_context_module/1","doc":"","ref":"Bonfire.Common.ContextModule.html#maybe_context_module/1"},{"type":"function","title":"Bonfire.Common.ContextModule.modules/0","doc":"Callback implementation for Bonfire.Common.ExtensionBehaviour.modules/0 .","ref":"Bonfire.Common.ContextModule.html#modules/0"},{"type":"callback","title":"Bonfire.Common.ContextModule.queries_module/0","doc":"Points to the related queries module","ref":"Bonfire.Common.ContextModule.html#c:queries_module/0"},{"type":"callback","title":"Bonfire.Common.ContextModule.schema_module/0","doc":"Points to the related schema module","ref":"Bonfire.Common.ContextModule.html#c:schema_module/0"},{"type":"module","title":"Bonfire.Common.DatesTimes","doc":"Date/time helpers","ref":"Bonfire.Common.DatesTimes.html"},{"type":"function","title":"Bonfire.Common.DatesTimes.date_from_now/2","doc":"Takes a ULID ID (or an object with one) or a DateTime struct, and turns the date into a relative phrase, e.g. 2 days ago , using the Cldr.DateTime or Timex library.","ref":"Bonfire.Common.DatesTimes.html#date_from_now/2"},{"type":"function","title":"Bonfire.Common.DatesTimes.date_from_pointer/1","doc":"Takes an object (or string with an ULID) and converts the ULID ID to a DateTime struct.","ref":"Bonfire.Common.DatesTimes.html#date_from_pointer/1"},{"type":"function","title":"Bonfire.Common.DatesTimes.future?/1","doc":"","ref":"Bonfire.Common.DatesTimes.html#future?/1"},{"type":"function","title":"Bonfire.Common.DatesTimes.now/0","doc":"","ref":"Bonfire.Common.DatesTimes.html#now/0"},{"type":"function","title":"Bonfire.Common.DatesTimes.past?/1","doc":"","ref":"Bonfire.Common.DatesTimes.html#past?/1"},{"type":"function","title":"Bonfire.Common.DatesTimes.timex_date_from_now/1","doc":"","ref":"Bonfire.Common.DatesTimes.html#timex_date_from_now/1"},{"type":"module","title":"Bonfire.Common.Enums","doc":"Extra functions to manipulate enumerables, basically an extension of Enum","ref":"Bonfire.Common.Enums.html"},{"type":"function","title":"Bonfire.Common.Enums.attr_get_id/2","doc":"Gets the value of a key in a map and returns the ID of that value (i.e. either the :id field of that association, or the value itself).","ref":"Bonfire.Common.Enums.html#attr_get_id/2"},{"type":"function","title":"Bonfire.Common.Enums.count_where/2","doc":"Counts the number of items in an enumerable that satisfy the given function.","ref":"Bonfire.Common.Enums.html#count_where/2"},{"type":"function","title":"Bonfire.Common.Enums.deep_merge/3","doc":"Recursively merges two data structures ( left and right ), which can be structs, maps or lists. If left and right are Ecto.Changeset s, merge_changesets/2 is called on them. If left is a struct, a similar struct is returned with the merged values. If left and right are lists, they are concatenated unless :replace_lists option is set to true .","ref":"Bonfire.Common.Enums.html#deep_merge/3"},{"type":"function","title":"Bonfire.Common.Enums.deep_merge_reduce/2","doc":"Deep merges a list of maps into a single map.","ref":"Bonfire.Common.Enums.html#deep_merge_reduce/2"},{"type":"function","title":"Bonfire.Common.Enums.elem_or/3","doc":"Takes a tuple, an index and a fallback value and returns either the tuple value at that index (if not nil or false) or the fallback. If the tuple doesn't contain such an index, it raises ArgumentError .","ref":"Bonfire.Common.Enums.html#elem_or/3"},{"type":"function","title":"Bonfire.Common.Enums.enum_get/3","doc":"Attempt getting a value out of a map by atom key, or try with string key, or return a fallback","ref":"Bonfire.Common.Enums.html#enum_get/3"},{"type":"function","title":"Bonfire.Common.Enums.filter_empty/2","doc":"Takes a value and a fallback value. If the value is empty (e.g. an empty map, a non-loaded association, an empty list, an empty string, or nil), the fallback value is returned.","ref":"Bonfire.Common.Enums.html#filter_empty/2"},{"type":"function","title":"Bonfire.Common.Enums.filter_empty/3","doc":"","ref":"Bonfire.Common.Enums.html#filter_empty/3"},{"type":"function","title":"Bonfire.Common.Enums.flatter/1","doc":"Takes a list and recursively flattens it by recursively flattening the head and tail of the list","ref":"Bonfire.Common.Enums.html#flatter/1"},{"type":"function","title":"Bonfire.Common.Enums.fun/3","doc":"Applies a function from one of Elixir's Map , Keyword , or List modules depending on the type of the given enumerable.","ref":"Bonfire.Common.Enums.html#fun/3"},{"type":"function","title":"Bonfire.Common.Enums.group/2","doc":"Like Enum.group_by/3 , except children are required to be unique (will throw otherwise!) and the resulting map does not wrap each item in a list","ref":"Bonfire.Common.Enums.html#group/2"},{"type":"function","title":"Bonfire.Common.Enums.group_map/2","doc":"","ref":"Bonfire.Common.Enums.html#group_map/2"},{"type":"function","title":"Bonfire.Common.Enums.has_duplicates?/2","doc":"Checks if the given list contains any duplicates. Takes an optional function that can be used to extract and/or compute the value to compare for each element in the list.","ref":"Bonfire.Common.Enums.html#has_duplicates?/2"},{"type":"function","title":"Bonfire.Common.Enums.id/1","doc":"Extracts a binary ID from various data structures, such as a map containing the key :id or &quot;id&quot;, a changeset, or a tuple containing the atom :id.","ref":"Bonfire.Common.Enums.html#id/1"},{"type":"function","title":"Bonfire.Common.Enums.input_to_atoms/3","doc":"Takes a data structure and converts any keys in maps to (previously defined) atoms, recursively. By default any unknown string keys will be discarded. It can optionally also convert string values to known atoms as well.","ref":"Bonfire.Common.Enums.html#input_to_atoms/3"},{"type":"function","title":"Bonfire.Common.Enums.map_filter_empty/1","doc":"Recursively filters nil values from a map","ref":"Bonfire.Common.Enums.html#map_filter_empty/1"},{"type":"function","title":"Bonfire.Common.Enums.map_key_replace/4","doc":"Renames a key in a map. Optionally changes the value as well.","ref":"Bonfire.Common.Enums.html#map_key_replace/4"},{"type":"function","title":"Bonfire.Common.Enums.map_key_replace_existing/4","doc":"Renames a key in a map , only if the key exists in the map . Optionally changes the value as well.","ref":"Bonfire.Common.Enums.html#map_key_replace_existing/4"},{"type":"function","title":"Bonfire.Common.Enums.map_new/2","doc":"Takes an enumerable object and converts it to a map. If it is not an enumerable, a map is created with the data under a fallback key ( :data by default).","ref":"Bonfire.Common.Enums.html#map_new/2"},{"type":"function","title":"Bonfire.Common.Enums.maybe_append/2","doc":"Appends a value to a list, but only if the value is not nil or an empty list.","ref":"Bonfire.Common.Enums.html#maybe_append/2"},{"type":"function","title":"Bonfire.Common.Enums.maybe_flatten/1","doc":"Flattens the list if provided a list, otherwise just return the input","ref":"Bonfire.Common.Enums.html#maybe_flatten/1"},{"type":"function","title":"Bonfire.Common.Enums.maybe_from_struct/1","doc":"If given a struct, returns a map representation of it","ref":"Bonfire.Common.Enums.html#maybe_from_struct/1"},{"type":"function","title":"Bonfire.Common.Enums.maybe_get/3","doc":"","ref":"Bonfire.Common.Enums.html#maybe_get/3"},{"type":"function","title":"Bonfire.Common.Enums.maybe_list/2","doc":"","ref":"Bonfire.Common.Enums.html#maybe_list/2"},{"type":"function","title":"Bonfire.Common.Enums.maybe_merge_to_struct/2","doc":"","ref":"Bonfire.Common.Enums.html#maybe_merge_to_struct/2"},{"type":"function","title":"Bonfire.Common.Enums.maybe_put/3","doc":"Updates a map with the given key and value , but only if the value is not nil , an empty list or an empty string.","ref":"Bonfire.Common.Enums.html#maybe_put/3"},{"type":"function","title":"Bonfire.Common.Enums.maybe_to_keyword_list/2","doc":"Returns a keyword list representation of the input object. If the second argument is true , the function will recursively convert nested data structures to keyword lists as well. Note: make sure that all keys are atoms, i.e. using input_to_atoms first, otherwise the enumerable(s) containing a string key won't be converted.","ref":"Bonfire.Common.Enums.html#maybe_to_keyword_list/2"},{"type":"function","title":"Bonfire.Common.Enums.maybe_to_map/2","doc":"Returns a map representation of the input object. If the second argument is true , the function will recursively convert nested data structures to maps as well.","ref":"Bonfire.Common.Enums.html#maybe_to_map/2"},{"type":"function","title":"Bonfire.Common.Enums.maybe_to_struct/2","doc":"Takes a data structure and tries to convert it to a struct, using some hints in the data (eg. __type or index_type fields) or a manually-provided type.","ref":"Bonfire.Common.Enums.html#maybe_to_struct/2"},{"type":"function","title":"Bonfire.Common.Enums.maybe_to_structs/1","doc":"Takes a data structure and recursively converts any known keys to atoms and then tries to recursively convert any maps to structs, using some hints in the data (eg. __type or index_type fields).","ref":"Bonfire.Common.Enums.html#maybe_to_structs/1"},{"type":"function","title":"Bonfire.Common.Enums.merge_as_map/3","doc":"Merges two maps or lists into a single map","ref":"Bonfire.Common.Enums.html#merge_as_map/3"},{"type":"function","title":"Bonfire.Common.Enums.merge_changesets/2","doc":"Merges two Ecto changesets. If both changesets have a prepare field, the function concatenates the values of the prepare fields. Either way it also calls Ecto.Changeset.merge/2 operation.","ref":"Bonfire.Common.Enums.html#merge_changesets/2"},{"type":"function","title":"Bonfire.Common.Enums.merge_keeping_only_first_keys/2","doc":"Merges two maps map_1 and map_2, but only keeps the keys that exist in map_1.","ref":"Bonfire.Common.Enums.html#merge_keeping_only_first_keys/2"},{"type":"function","title":"Bonfire.Common.Enums.merge_structs_as_map/2","doc":"","ref":"Bonfire.Common.Enums.html#merge_structs_as_map/2"},{"type":"function","title":"Bonfire.Common.Enums.merge_uniq/2","doc":"","ref":"Bonfire.Common.Enums.html#merge_uniq/2"},{"type":"function","title":"Bonfire.Common.Enums.nested_structs_to_maps/1","doc":"Recursively converts all nested structs to maps.","ref":"Bonfire.Common.Enums.html#nested_structs_to_maps/1"},{"type":"function","title":"Bonfire.Common.Enums.put_new_in/3","doc":"This function is used to insert a new value into a nested map data structure, where the path to the location of the value is specified as a list of keys. When the path is a single-element list, if the key already exists in the map, it returns the original map; otherwise, it inserts the key-value pair. When the path is a list of more than one key, the first element of the list (key) represents the key for the current level of the nested map, and the remaining elements (path) represent the keys for the nested map at the next level. The function starts by retrieving the value at the current level of the map (if it exists) and updates the map with the new value.","ref":"Bonfire.Common.Enums.html#put_new_in/3"},{"type":"function","title":"Bonfire.Common.Enums.stringify_keys/2","doc":"Takes a map or keyword list, and returns a map with any atom keys converted to string keys. It can optionally do so recursively.","ref":"Bonfire.Common.Enums.html#stringify_keys/2"},{"type":"function","title":"Bonfire.Common.Enums.struct_from_map/2","doc":"","ref":"Bonfire.Common.Enums.html#struct_from_map/2"},{"type":"function","title":"Bonfire.Common.Enums.struct_to_map/1","doc":"","ref":"Bonfire.Common.Enums.html#struct_to_map/1"},{"type":"function","title":"Bonfire.Common.Enums.uniq_by_id/1","doc":"Takes a list of maps that have an id field and returns a list with only the unique maps. Uniqueness is determined based on the id field and not the full contents of the maps.","ref":"Bonfire.Common.Enums.html#uniq_by_id/1"},{"type":"module","title":"Bonfire.Common.Errors","doc":"","ref":"Bonfire.Common.Errors.html"},{"type":"function","title":"Bonfire.Common.Errors.debug_banner_with_trace/4","doc":"","ref":"Bonfire.Common.Errors.html#debug_banner_with_trace/4"},{"type":"function","title":"Bonfire.Common.Errors.debug_exception/5","doc":"","ref":"Bonfire.Common.Errors.html#debug_exception/5"},{"type":"function","title":"Bonfire.Common.Errors.debug_log/4","doc":"","ref":"Bonfire.Common.Errors.html#debug_log/4"},{"type":"function","title":"Bonfire.Common.Errors.error_msg/1","doc":"Turns various kind of errors into an error message string. Used to format errors in a way that can be easily read by the user.","ref":"Bonfire.Common.Errors.html#error_msg/1"},{"type":"function","title":"Bonfire.Common.Errors.format_banner/4","doc":"Normalizes and formats any throw/error/exit. The message is formatted and displayed in the same format as used by Elixir's CLI. The third argument is the stacktrace which is used to enrich a normalized error with more information. It is only used when the kind is an error.","ref":"Bonfire.Common.Errors.html#format_banner/4"},{"type":"function","title":"Bonfire.Common.Errors.format_location/1","doc":"","ref":"Bonfire.Common.Errors.html#format_location/1"},{"type":"function","title":"Bonfire.Common.Errors.format_mfa/3","doc":"Receives a module, fun and arity and formats it as shown in stacktraces. The arity may also be a list of arguments. Examples iex&gt; Exception . format_mfa ( Foo , :bar , 1 ) { Foo , :bar , &quot;Foo.bar/1&quot; } iex&gt; Exception . format_mfa ( Foo , :bar , [ ] ) { Foo , :bar , &quot;Foo.bar()&quot; } iex&gt; Exception . format_mfa ( nil , :bar , [ ] ) { nil , :bar , &quot;nil.bar()&quot; } Anonymous functions are reported as -func/arity-anonfn-count-, where func is the name of the enclosing function. Convert to &quot;anonymous fn in func/arity&quot;","ref":"Bonfire.Common.Errors.html#format_mfa/3"},{"type":"function","title":"Bonfire.Common.Errors.format_stacktrace/2","doc":"Formats the stacktrace. A stacktrace must be given as an argument. If not, the stacktrace is retrieved from Process.info/2 .","ref":"Bonfire.Common.Errors.html#format_stacktrace/2"},{"type":"function","title":"Bonfire.Common.Errors.format_stacktrace_entry/2","doc":"Receives a stacktrace entry and formats it into a string.","ref":"Bonfire.Common.Errors.html#format_stacktrace_entry/2"},{"type":"function","title":"Bonfire.Common.Errors.last_stacktrace/0","doc":"","ref":"Bonfire.Common.Errors.html#last_stacktrace/0"},{"type":"function","title":"Bonfire.Common.Errors.map_error/2","doc":"","ref":"Bonfire.Common.Errors.html#map_error/2"},{"type":"function","title":"Bonfire.Common.Errors.maybe_ok_error/2","doc":"Applies change_fn if the first parameter is an {:ok, val} tuple, else returns the value","ref":"Bonfire.Common.Errors.html#maybe_ok_error/2"},{"type":"function","title":"Bonfire.Common.Errors.mf_maybe_link_to_code/4","doc":"","ref":"Bonfire.Common.Errors.html#mf_maybe_link_to_code/4"},{"type":"function","title":"Bonfire.Common.Errors.module_maybe_link_to_code/3","doc":"","ref":"Bonfire.Common.Errors.html#module_maybe_link_to_code/3"},{"type":"function","title":"Bonfire.Common.Errors.replace_error/2","doc":"","ref":"Bonfire.Common.Errors.html#replace_error/2"},{"type":"module","title":"Bonfire.Common.Extend","doc":"","ref":"Bonfire.Common.Extend.html"},{"type":"function","title":"Bonfire.Common.Extend.application_loaded?/1","doc":"","ref":"Bonfire.Common.Extend.html#application_loaded?/1"},{"type":"macro","title":"Bonfire.Common.Extend.extend_module/1","doc":"Extend a module (i.e. define defdelegate and defoverridable for all functions from the source module in the current module. Usage: import Module.Extend extend_module Common.Text","ref":"Bonfire.Common.Extend.html#extend_module/1"},{"type":"function","title":"Bonfire.Common.Extend.extension_enabled?/2","doc":"Whether an Elixir module or extension / OTP app is present AND not part of a disabled Bonfire extension (by having in config something like config :bonfire_common, disabled: true )","ref":"Bonfire.Common.Extend.html#extension_enabled?/2"},{"type":"function","title":"Bonfire.Common.Extend.extension_loaded?/1","doc":"Whether an Elixir module or extension / OTP app is present","ref":"Bonfire.Common.Extend.html#extension_loaded?/1"},{"type":"function","title":"Bonfire.Common.Extend.function_ast/2","doc":"","ref":"Bonfire.Common.Extend.html#function_ast/2"},{"type":"function","title":"Bonfire.Common.Extend.function_code/2","doc":"","ref":"Bonfire.Common.Extend.html#function_code/2"},{"type":"function","title":"Bonfire.Common.Extend.function_line_number/2","doc":"Return the number of the first line where a function is defined in a module","ref":"Bonfire.Common.Extend.html#function_line_number/2"},{"type":"function","title":"Bonfire.Common.Extend.function_line_numbers/2","doc":"Return the numbers (as a tuple) of the first and last lines of a function's definition in a module","ref":"Bonfire.Common.Extend.html#function_line_numbers/2"},{"type":"function","title":"Bonfire.Common.Extend.generate_reverse_router!/0","doc":"","ref":"Bonfire.Common.Extend.html#generate_reverse_router!/0"},{"type":"function","title":"Bonfire.Common.Extend.has_extension_config?/1","doc":"Whether an Elixir module or extension / OTP app has configuration keys set up","ref":"Bonfire.Common.Extend.html#has_extension_config?/1"},{"type":"macro","title":"Bonfire.Common.Extend.import_if_enabled/2","doc":"","ref":"Bonfire.Common.Extend.html#import_if_enabled/2"},{"type":"function","title":"Bonfire.Common.Extend.inject_function/3","doc":"Copy the code defining a function from its original module to one that extends it (or a manually specified module). Usage: Module.Extend.inject_function(Common.TextExtended, :blank?)","ref":"Bonfire.Common.Extend.html#inject_function/3"},{"type":"function","title":"Bonfire.Common.Extend.macro_inspect/1","doc":"","ref":"Bonfire.Common.Extend.html#macro_inspect/1"},{"type":"function","title":"Bonfire.Common.Extend.maybe_extension_loaded/1","doc":"","ref":"Bonfire.Common.Extend.html#maybe_extension_loaded/1"},{"type":"function","title":"Bonfire.Common.Extend.maybe_extension_loaded!/1","doc":"","ref":"Bonfire.Common.Extend.html#maybe_extension_loaded!/1"},{"type":"function","title":"Bonfire.Common.Extend.maybe_module_loaded/1","doc":"","ref":"Bonfire.Common.Extend.html#maybe_module_loaded/1"},{"type":"function","title":"Bonfire.Common.Extend.maybe_schema_or_pointer/1","doc":"","ref":"Bonfire.Common.Extend.html#maybe_schema_or_pointer/1"},{"type":"function","title":"Bonfire.Common.Extend.module_code/1","doc":"","ref":"Bonfire.Common.Extend.html#module_code/1"},{"type":"function","title":"Bonfire.Common.Extend.module_enabled?/2","doc":"Whether an Elixir module or extension / OTP app is present AND not part of a disabled Bonfire extension (by having in config something like config :bonfire_common, disabled: true ) TODO: also make it possible to disable individual modules in config?","ref":"Bonfire.Common.Extend.html#module_enabled?/2"},{"type":"function","title":"Bonfire.Common.Extend.module_exists?/1","doc":"","ref":"Bonfire.Common.Extend.html#module_exists?/1"},{"type":"function","title":"Bonfire.Common.Extend.module_exists_or/2","doc":"","ref":"Bonfire.Common.Extend.html#module_exists_or/2"},{"type":"function","title":"Bonfire.Common.Extend.module_file/1","doc":"","ref":"Bonfire.Common.Extend.html#module_file/1"},{"type":"function","title":"Bonfire.Common.Extend.module_file_code/1","doc":"","ref":"Bonfire.Common.Extend.html#module_file_code/1"},{"type":"function","title":"Bonfire.Common.Extend.quoted_import_if_enabled/3","doc":"","ref":"Bonfire.Common.Extend.html#quoted_import_if_enabled/3"},{"type":"function","title":"Bonfire.Common.Extend.quoted_require_if_enabled/3","doc":"","ref":"Bonfire.Common.Extend.html#quoted_require_if_enabled/3"},{"type":"function","title":"Bonfire.Common.Extend.quoted_use_if_enabled/3","doc":"","ref":"Bonfire.Common.Extend.html#quoted_use_if_enabled/3"},{"type":"macro","title":"Bonfire.Common.Extend.require_if_enabled/2","doc":"","ref":"Bonfire.Common.Extend.html#require_if_enabled/2"},{"type":"function","title":"Bonfire.Common.Extend.split_lines/1","doc":"","ref":"Bonfire.Common.Extend.html#split_lines/1"},{"type":"macro","title":"Bonfire.Common.Extend.use_if_enabled/2","doc":"","ref":"Bonfire.Common.Extend.html#use_if_enabled/2"},{"type":"behaviour","title":"Bonfire.Common.ExtensionBehaviour","doc":"A Global cache of known Behaviours in Bonfire Use of the ExtensionBehaviour Service requires ddding @behaviour Bonfire.Common.ExtensionBehaviour in your behaviour modules. This modules when then index those behaviours and all the modules that implement those behaviours at startup. While this module is a GenServer, it is only responsible for setup of the cache and then exits with :ignore having done so. It is not recommended to restart the service as this will lead to a stop the world garbage collection of all processes and the copying of the entire cache to each process that has queried it since its last local garbage collection.","ref":"Bonfire.Common.ExtensionBehaviour.html"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.adopters_of_behaviour/1","doc":"Given a behaviour module, filters app modules to only those that implement that behaviour","ref":"Bonfire.Common.ExtensionBehaviour.html#adopters_of_behaviour/1"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.apps_to_scan/0","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#apps_to_scan/0"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.behaviour_app_modules/2","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#behaviour_app_modules/2"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.behaviour_modules/2","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#behaviour_modules/2"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.behaviours/0","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#behaviours/0"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.cached_behaviours/0","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#cached_behaviours/0"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Bonfire.Common.ExtensionBehaviour.html#child_spec/1"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.find_adopters_of_behaviours/1","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#find_adopters_of_behaviours/1"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.linked_modules/2","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#linked_modules/2"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.module_behaviours/1","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#module_behaviours/1"},{"type":"callback","title":"Bonfire.Common.ExtensionBehaviour.modules/0","doc":"List modules that implement a behaviour","ref":"Bonfire.Common.ExtensionBehaviour.html#c:modules/0"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.populate/0","doc":"","ref":"Bonfire.Common.ExtensionBehaviour.html#populate/0"},{"type":"function","title":"Bonfire.Common.ExtensionBehaviour.start_link/1","doc":"Populates the global cache with config_module data via introspection.","ref":"Bonfire.Common.ExtensionBehaviour.html#start_link/1"},{"type":"behaviour","title":"Bonfire.Common.ExtensionModule","doc":"A global cache of known Bonfire extensions and their metadata.","ref":"Bonfire.Common.ExtensionModule.html"},{"type":"function","title":"Bonfire.Common.ExtensionModule.app_modules/0","doc":"","ref":"Bonfire.Common.ExtensionModule.html#app_modules/0"},{"type":"callback","title":"Bonfire.Common.ExtensionModule.declared_extension/0","doc":"Declares a Bonfire extensions","ref":"Bonfire.Common.ExtensionModule.html#c:declared_extension/0"},{"type":"function","title":"Bonfire.Common.ExtensionModule.declared_extension/1","doc":"","ref":"Bonfire.Common.ExtensionModule.html#declared_extension/1"},{"type":"function","title":"Bonfire.Common.ExtensionModule.declared_extensions/1","doc":"","ref":"Bonfire.Common.ExtensionModule.html#declared_extensions/1"},{"type":"function","title":"Bonfire.Common.ExtensionModule.default_nav/1","doc":"","ref":"Bonfire.Common.ExtensionModule.html#default_nav/1"},{"type":"function","title":"Bonfire.Common.ExtensionModule.extension/1","doc":"Get a extension identified by schema","ref":"Bonfire.Common.ExtensionModule.html#extension/1"},{"type":"function","title":"Bonfire.Common.ExtensionModule.extension_function_error/2","doc":"","ref":"Bonfire.Common.ExtensionModule.html#extension_function_error/2"},{"type":"function","title":"Bonfire.Common.ExtensionModule.modules/0","doc":"Callback implementation for Bonfire.Common.ExtensionBehaviour.modules/0 .","ref":"Bonfire.Common.ExtensionModule.html#modules/0"},{"type":"module","title":"Bonfire.Common.Extensions","doc":"","ref":"Bonfire.Common.Extensions.html"},{"type":"function","title":"Bonfire.Common.Extensions.data/0","doc":"","ref":"Bonfire.Common.Extensions.html#data/0"},{"type":"function","title":"Bonfire.Common.Extensions.get_branch/1","doc":"","ref":"Bonfire.Common.Extensions.html#get_branch/1"},{"type":"function","title":"Bonfire.Common.Extensions.get_link/1","doc":"","ref":"Bonfire.Common.Extensions.html#get_link/1"},{"type":"function","title":"Bonfire.Common.Extensions.get_version/1","doc":"","ref":"Bonfire.Common.Extensions.html#get_version/1"},{"type":"function","title":"Bonfire.Common.Extensions.get_version_link/1","doc":"","ref":"Bonfire.Common.Extensions.html#get_version_link/1"},{"type":"function","title":"Bonfire.Common.Extensions.global_disable/1","doc":"","ref":"Bonfire.Common.Extensions.html#global_disable/1"},{"type":"function","title":"Bonfire.Common.Extensions.global_enable/1","doc":"","ref":"Bonfire.Common.Extensions.html#global_enable/1"},{"type":"function","title":"Bonfire.Common.Extensions.loaded_deps/1","doc":"","ref":"Bonfire.Common.Extensions.html#loaded_deps/1"},{"type":"module","title":"Bonfire.Common.Extensions.Diff","doc":"","ref":"Bonfire.Common.Extensions.Diff.html"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.analyse_repo_latest_diff_stream/1","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#analyse_repo_latest_diff_stream/1"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.generate_diff/1","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#generate_diff/1"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.git!/3","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#git!/3"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.git_add_all/1","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#git_add_all/1"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.git_diff/3","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#git_diff/3"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.git_fetch/1","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#git_fetch/1"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.git_pre_configure/1","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#git_pre_configure/1"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.parse_repo_latest_diff/1","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#parse_repo_latest_diff/1"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.repo_latest_diff/1","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#repo_latest_diff/1"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.root/0","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#root/0"},{"type":"function","title":"Bonfire.Common.Extensions.Diff.tmp_path/1","doc":"","ref":"Bonfire.Common.Extensions.Diff.html#tmp_path/1"},{"type":"module","title":"Bonfire.Common.HTTP","doc":"Module for building and performing HTTP requests.","ref":"Bonfire.Common.HTTP.html"},{"type":"function","title":"Bonfire.Common.HTTP.delete/4","doc":"Makes a DELETE request see request/5","ref":"Bonfire.Common.HTTP.html#delete/4"},{"type":"function","title":"Bonfire.Common.HTTP.get/3","doc":"Makes a GET request see request/5","ref":"Bonfire.Common.HTTP.html#get/3"},{"type":"function","title":"Bonfire.Common.HTTP.get_cached/1","doc":"","ref":"Bonfire.Common.HTTP.html#get_cached/1"},{"type":"function","title":"Bonfire.Common.HTTP.patch/4","doc":"Makes a PATCH request see request/5","ref":"Bonfire.Common.HTTP.html#patch/4"},{"type":"function","title":"Bonfire.Common.HTTP.post/4","doc":"Makes a POST request see request/5","ref":"Bonfire.Common.HTTP.html#post/4"},{"type":"function","title":"Bonfire.Common.HTTP.put/4","doc":"Makes a PUT request see request/5","ref":"Bonfire.Common.HTTP.html#put/4"},{"type":"function","title":"Bonfire.Common.HTTP.request/5","doc":"Builds and perform http request. Arguments: method - :get, :post, :put, :delete url body headers - a keyworld list of headers, e.g. [{&quot;content-type&quot;, &quot;text/plain&quot;}] options - custom, per-request middleware or adapter options Returns: {:ok, %Tesla.Env{}} or {:error, error}","ref":"Bonfire.Common.HTTP.html#request/5"},{"type":"type","title":"Bonfire.Common.HTTP.t/0","doc":"","ref":"Bonfire.Common.HTTP.html#t:t/0"},{"type":"module","title":"Bonfire.Common.HTTP.Connection","doc":"Specifies connection options for HTTP requests","ref":"Bonfire.Common.HTTP.Connection.html"},{"type":"function","title":"Bonfire.Common.HTTP.Connection.adapter_options/2","doc":"","ref":"Bonfire.Common.HTTP.Connection.html#adapter_options/2"},{"type":"function","title":"Bonfire.Common.HTTP.Connection.new/1","doc":"","ref":"Bonfire.Common.HTTP.Connection.html#new/1"},{"type":"module","title":"Bonfire.Common.HTTP.RequestBuilder","doc":"Helper functions for building HTTP requests","ref":"Bonfire.Common.HTTP.RequestBuilder.html"},{"type":"function","title":"Bonfire.Common.HTTP.RequestBuilder.add_param/4","doc":"","ref":"Bonfire.Common.HTTP.RequestBuilder.html#add_param/4"},{"type":"function","title":"Bonfire.Common.HTTP.RequestBuilder.headers/2","doc":"","ref":"Bonfire.Common.HTTP.RequestBuilder.html#headers/2"},{"type":"function","title":"Bonfire.Common.HTTP.RequestBuilder.method/2","doc":"","ref":"Bonfire.Common.HTTP.RequestBuilder.html#method/2"},{"type":"function","title":"Bonfire.Common.HTTP.RequestBuilder.opts/2","doc":"","ref":"Bonfire.Common.HTTP.RequestBuilder.html#opts/2"},{"type":"function","title":"Bonfire.Common.HTTP.RequestBuilder.url/2","doc":"","ref":"Bonfire.Common.HTTP.RequestBuilder.html#url/2"},{"type":"module","title":"Bonfire.Common.Localise","doc":"Various helpers for localisation","ref":"Bonfire.Common.Localise.html"},{"type":"function","title":"Bonfire.Common.Localise.default_locale/0","doc":"","ref":"Bonfire.Common.Localise.html#default_locale/0"},{"type":"function","title":"Bonfire.Common.Localise.get_locale/0","doc":"","ref":"Bonfire.Common.Localise.html#get_locale/0"},{"type":"function","title":"Bonfire.Common.Localise.get_locale_id/0","doc":"","ref":"Bonfire.Common.Localise.html#get_locale_id/0"},{"type":"function","title":"Bonfire.Common.Localise.known_locales/0","doc":"","ref":"Bonfire.Common.Localise.html#known_locales/0"},{"type":"function","title":"Bonfire.Common.Localise.locale_name/1","doc":"","ref":"Bonfire.Common.Localise.html#locale_name/1"},{"type":"function","title":"Bonfire.Common.Localise.put_locale/1","doc":"","ref":"Bonfire.Common.Localise.html#put_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.set_locale_config/0","doc":"","ref":"Bonfire.Common.Localise.html#set_locale_config/0"},{"type":"module","title":"Bonfire.Common.Localise.Cldr","doc":"Provides the core functions to retrieve and manage the CLDR data that supports formatting and localisation. It provides the core functions to access formatted CLDR data, set and retrieve a current locale and validate certain core data types such as locales, currencies and territories.","ref":"Bonfire.Common.Localise.Cldr.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.available_locale_name?/1","doc":"See Cldr.available_locale_name?/1 .","ref":"Bonfire.Common.Localise.Cldr.html#available_locale_name?/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.default_locale/0","doc":"Returns the default locale . Example iex&gt; Bonfire.Common.Localise.Cldr . default_locale ( ) % Cldr.LanguageTag { backend : Bonfire.Common.Localise.Cldr , canonical_locale_name : &quot;en-001&quot; , cldr_locale_name : :&quot;en-001&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :en , requested_locale_name : &quot;en-001&quot; , script : :Latn , territory : :&quot;001&quot; , transform : %{ } , language_variants : [ ] }","ref":"Bonfire.Common.Localise.Cldr.html#default_locale/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.default_territory/0","doc":"Returns the default territory when a locale does not specify one and none can be inferred. Example iex&gt; Bonfire.Common.Localise.Cldr . default_territory ( ) :&quot;001&quot;","ref":"Bonfire.Common.Localise.Cldr.html#default_territory/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.ellipsis/2","doc":"Add locale-specific ellipsis to a string. Arguments string is any String.t or a 2-element list of String.t between which the ellipsis is inserted. backend is any module that includes use Cldr and therefore is a Cldr backend module. The default is Cldr.default_backend!/0 . Note that Cldr.default_backend!/0 will raise an exception if no :default_backend is configured under the :ex_cldr key in config.exs . options is a keyword list of options Options :locale is any valid locale name returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale/0 . :location determines where to place the ellipsis. The options are :after (the default for a single string argument), :between (the default and only valid location for an argument that is a list of two strings) and :before . :format formats based upon whether the ellipsis is inserted between words or sentences. The valid options are :word or :sentence . The default is :sentence . Examples iex&gt; Bonfire.Common.Localise.Cldr . ellipsis &quot;And furthermore&quot; &quot;And furthermore…&quot; iex&gt; Bonfire.Common.Localise.Cldr . ellipsis [ &quot;And furthermore&quot; , &quot;there is much to be done&quot; ] , locale : :ja &quot;And furthermore…there is much to be done&quot; iex&gt; Bonfire.Common.Localise.Cldr . ellipsis &quot;And furthermore&quot; , format : :word &quot;And furthermore …&quot; iex&gt; Bonfire.Common.Localise.Cldr . ellipsis [ &quot;And furthermore&quot; , &quot;there is much to be done&quot; ] , locale : :ja , format : :word &quot;And furthermore … there is much to be done&quot;","ref":"Bonfire.Common.Localise.Cldr.html#ellipsis/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.get_locale/0","doc":"Return the current locale to be used for Cldr functions that take an optional locale parameter for which a locale is not supplied. Example iex&gt; Bonfire.Common.Localise.Cldr . put_locale ( &quot;pl&quot; ) iex&gt; Bonfire.Common.Localise.Cldr . get_locale % Cldr.LanguageTag { backend : Elixir.Bonfire.Common.Localise.Cldr , canonical_locale_name : &quot;pl&quot; , cldr_locale_name : :pl , extensions : %{ } , language : &quot;pl&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :pl , territory : :PL , requested_locale_name : &quot;pl&quot; , script : :Latn , transform : %{ } , language_variants : [ ] }","ref":"Bonfire.Common.Localise.Cldr.html#get_locale/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_calendars/0","doc":"See Cldr.known_calendars/0 .","ref":"Bonfire.Common.Localise.Cldr.html#known_calendars/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_currencies/0","doc":"See Cldr.known_currencies/0 .","ref":"Bonfire.Common.Localise.Cldr.html#known_currencies/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_gettext_locale_name/1","doc":"Returns either the Gettext locale_name in Cldr format or false based upon whether the locale name is configured in Gettext . Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_gettext_locale_names/0 Examples iex&gt; Bonfire.Common.Localise.Cldr . known_gettext_locale_name &quot;en&quot; &quot;en&quot; iex&gt; Bonfire.Common.Localise.Cldr . known_gettext_locale_name &quot;en-SA&quot; false","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_name/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_gettext_locale_name?/1","doc":"Returns a boolean indicating if the specified locale name is configured and available in Gettext. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Examples iex&gt; Bonfire.Common.Localise.Cldr . known_gettext_locale_name? ( &quot;en&quot; ) true iex&gt; Bonfire.Common.Localise.Cldr . known_gettext_locale_name? ( &quot;!!&quot; ) false","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_name?/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_gettext_locale_names/0","doc":"Returns a list of Gettext locale names but in CLDR format with underscore replaced by hyphen in order to facilitate comparisons with Cldr locale names.","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_names/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_locale_name/1","doc":"Returns either the locale_name or false based upon whether the locale name is configured in Cldr . This is helpful when building a list of or expressions to return the first known locale name from a list. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Examples iex&gt; Bonfire.Common.Localise.Cldr . known_locale_name :&quot;en-AU&quot; :&quot;en-AU&quot; iex&gt; Bonfire.Common.Localise.Cldr . known_locale_name :&quot;en-SA&quot; false","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_name/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_locale_name?/1","doc":"Returns a boolean indicating if the specified locale name is configured and available in Cldr. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Examples iex&gt; Bonfire.Common.Localise.Cldr . known_locale_name? ( :en ) true iex&gt; Bonfire.Common.Localise.Cldr . known_locale_name? ( :&quot;!!&quot; ) false","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_name?/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_locale_names/0","doc":"Returns a list of the known locale names. Known locales are those locales which are the subset of all CLDR locales that have been configured for use either in this module or in Gettext .","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_names/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_number_system_types/0","doc":"Returns a list of atoms representing the number systems types known to Cldr . Example iex&gt; Bonfire.Common.Localise.Cldr . known_number_system_types [ :default , :finance , :native , :traditional ]","ref":"Bonfire.Common.Localise.Cldr.html#known_number_system_types/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_number_systems/0","doc":"See Cldr.known_number_systems/0 .","ref":"Bonfire.Common.Localise.Cldr.html#known_number_systems/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_rbnf_locale_name/1","doc":"Returns either the RBNF locale_name or false based upon whether the locale name is configured in Cldr and has RBNF rules defined. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Examples iex&gt; Bonfire.Common.Localise.Cldr . known_rbnf_locale_name :en :en iex&gt; Bonfire.Common.Localise.Cldr . known_rbnf_locale_name :&quot;en-SA&quot; false","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_name/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_rbnf_locale_name?/1","doc":"Returns a boolean indicating if the specified locale name is configured and available in Cldr and supports rules based number formats (RBNF). Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Examples iex&gt; Bonfire.Common.Localise.Cldr . known_rbnf_locale_name? ( :en ) true iex&gt; Bonfire.Common.Localise.Cldr . known_rbnf_locale_name? ( :&quot;!!&quot; ) false","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_name?/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_rbnf_locale_names/0","doc":"Returns a list of locale names which have rules-based number formats (RBNF).","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_names/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.known_territories/0","doc":"See Cldr.known_territories/0 .","ref":"Bonfire.Common.Localise.Cldr.html#known_territories/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.normalize_lenient_parse/3","doc":"Normalizes a string by applying transliteration of common symbols in numbers, currencies and dates","ref":"Bonfire.Common.Localise.Cldr.html#normalize_lenient_parse/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.put_locale/1","doc":"Set the current locale to be used for Cldr functions that take an optional locale parameter for which a locale is not supplied. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a t:Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 See rfc5646 for the specification of a language tag. Examples iex&gt; Bonfire.Common.Localise.Cldr . put_locale ( &quot;en&quot; ) { :ok , % Cldr.LanguageTag { backend : Bonfire.Common.Localise.Cldr , canonical_locale_name : &quot;en&quot; , cldr_locale_name : :en , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :en , requested_locale_name : &quot;en&quot; , script : :Latn , territory : :US , transform : %{ } , language_variants : [ ] } } iex&gt; Bonfire.Common.Localise.Cldr . put_locale ( &quot;invalid-locale!&quot; ) { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; ! \\&quot; starting at position 15&quot; } }","ref":"Bonfire.Common.Localise.Cldr.html#put_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.quote/2","doc":"Add locale-specific quotation marks around a string. Arguments string is any valid Elixir string options is a keyword list of options Options locale is any valid locale name returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale/0 Examples iex&gt; Bonfire.Common.Localise.Cldr . quote &quot;Quoted String&quot; &quot;“Quoted String”&quot; iex&gt; Bonfire.Common.Localise.Cldr . quote &quot;Quoted String&quot; , locale : :ja &quot;「Quoted String」&quot;","ref":"Bonfire.Common.Localise.Cldr.html#quote/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.unknown_locale_names/0","doc":"Returns a list of the locales names that are configured, but not known in CLDR. Since there is a compile-time exception raised if there are any unknown locales this function should always return an empty list.","ref":"Bonfire.Common.Localise.Cldr.html#unknown_locale_names/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.validate_calendar/1","doc":"See Cldr.validate_calendar/1 .","ref":"Bonfire.Common.Localise.Cldr.html#validate_calendar/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.validate_currency/1","doc":"See Cldr.validate_currency/1 .","ref":"Bonfire.Common.Localise.Cldr.html#validate_currency/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.validate_locale/1","doc":"Normalise and validate a locale name. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 Returns {:ok, language_tag} {:error, reason} Notes See rfc5646 for the specification of a language tag. Examples iex&gt; Bonfire.Common.Localise.Cldr . validate_locale ( :en ) { :ok , % Cldr.LanguageTag { backend : Bonfire.Common.Localise.Cldr , canonical_locale_name : &quot;en&quot; , cldr_locale_name : :en , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :en , requested_locale_name : &quot;en&quot; , script : :Latn , territory : :US , transform : %{ } , language_variants : [ ] } } iex&gt; Bonfire.Common.Localise.Cldr . validate_locale Bonfire.Common.Localise.Cldr . default_locale ( ) { :ok , % Cldr.LanguageTag { backend : Bonfire.Common.Localise.Cldr , canonical_locale_name : &quot;en-001&quot; , cldr_locale_name : :&quot;en-001&quot; , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :en , requested_locale_name : &quot;en-001&quot; , script : :Latn , territory : :&quot;001&quot; , transform : %{ } , language_variants : [ ] } } iex&gt; Bonfire.Common.Localise.Cldr . validate_locale ( &quot;zzz&quot; ) { :error , { Cldr.InvalidLanguageError , &quot;The language \\&quot; zzz \\&quot; is invalid&quot; } }","ref":"Bonfire.Common.Localise.Cldr.html#validate_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.validate_number_system/1","doc":"See Cldr.validate_number_system/1 .","ref":"Bonfire.Common.Localise.Cldr.html#validate_number_system/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.validate_number_system_type/1","doc":"Normalise and validate a number system type. Arguments number_system_type is any number system type returned by Cldr.known_number_system_types/1 Returns {:ok, normalized_number_system_type} or {:error, {exception, message}} Examples iex&gt; Bonfire.Common.Localise.Cldr . validate_number_system_type :default { :ok , :default } iex&gt; Bonfire.Common.Localise.Cldr . validate_number_system_type :traditional { :ok , :traditional } iex&gt; Bonfire.Common.Localise.Cldr . validate_number_system_type :latn { :error , { Cldr.UnknownNumberSystemTypeError , &quot;The number system type :latn is unknown&quot; } } iex&gt; Bonfire.Common.Localise.Cldr . validate_number_system_type &quot;bork&quot; { :error , { Cldr.UnknownNumberSystemTypeError , &quot;The number system type \\&quot; bork \\&quot; is invalid&quot; } }","ref":"Bonfire.Common.Localise.Cldr.html#validate_number_system_type/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.validate_territory/1","doc":"See Cldr.validate_territory/1 .","ref":"Bonfire.Common.Localise.Cldr.html#validate_territory/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.with_locale/2","doc":"Execute a function with a locale ensuring that the current locale is restored after the function. Arguments locale is any valid locale name returned by Cldr.known_locale_names/1 . fun is any 0-arity function or function capture. Returns The value returned by the function fun/0 or {:error, {exception, reason}} if the locale is invalid or raises an exception if the current locale cannot be identified.","ref":"Bonfire.Common.Localise.Cldr.html#with_locale/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.AcceptLanguage","doc":"Parses HTTP Accept-Language header values as defined in rfc2616 . The Accept-Language request-header field is similar to Accept, but restricts the set of natural languages that are preferred as a response to the request. Language tags function are provided in Cldr.LanguageTag . The format of an Accept-Language header is as follows in ABNF format: Accept - Language = &quot;Accept-Language&quot; &quot;:&quot; 1 #( language-range [ &quot;;&quot; &quot;q&quot; &quot;=&quot; qvalue ] ) language - range = ( ( 1 * 8 ALPHA * ( &quot;-&quot; 1 * 8 ALPHA ) ) | &quot;*&quot; ) Each language-range MAY be given an associated quality value which represents an estimate of the user's preference for the languages specified by that range. The quality value defaults to &quot;q=1&quot;. For example, Accept - Language : da , en - gb ; q = 0.8 , en ; q = 0.7 would mean: &quot;I prefer Danish, but will accept British English and other types of English.&quot;","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match/1","doc":"Parse an Accept-Language string and return the best match for a configured Cldr locale. Arguments accept_langauge is a string representing an accept language header Returns {:ok, language_tag} or {:error, reason} Examples iex&gt; Bonfire.Common.Localise.Cldr.AcceptLanguage . best_match ( &quot;da;q=0.1,zh-TW;q=0.3&quot; , TestBackend.Cldr ) { :ok , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } iex&gt; Bonfire.Common.Localise.Cldr.AcceptLanguage . best_match ( &quot;da;q=0.1,zh-TW;q=0.3&quot; , TestBackend.Cldr ) { :ok , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } iex&gt; Bonfire.Common.Localise.Cldr.AcceptLanguage . best_match ( &quot;xx,yy;q=0.3&quot; ) { :error , { Cldr.NoMatchingLocale , &quot;No configured locale could be matched to \\&quot; xx,yy;q=0.3 \\&quot; &quot; } } iex&gt; Bonfire.Common.Localise.Cldr.AcceptLanguage . best_match ( &quot;invalid_tag&quot; ) { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; g \\&quot; starting at position 11&quot; } }","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#best_match/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.AcceptLanguage.parse/1","doc":"Parses an Accept-Language header value in its string or tokenized form to return a tuple of the form {:ok, [{quality, %Cldr.LanguageTag{}}, ...]} sorted by quality. Arguments accept-language is any string in the format defined by rfc2616 backend is any module that includes use Cldr and therefore is a Cldr backend module Returns {:ok, [{quality, language_tag}, ...]} or {:error, {Cldr.AcceptLanguageError, String.t}} If at least one valid language tag is found but errors are also detected on one more more tags, an {ok, list} tuple is returned wuth an error tuple for each invalid tag added at the end of the list. Example iex&gt; Cldr.AcceptLanguage . parse ( &quot;da,zh-TW;q=0.3&quot; , TestBackend.Cldr ) { :ok , [ { 1.0 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;da&quot; , cldr_locale_name : :da , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;da&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :da , requested_locale_name : &quot;da&quot; , script : :Latn , territory : :DK , transform : %{ } , language_variants : [ ] } } , { 0.3 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } ] } iex&gt; Bonfire.Common.Localise.Cldr.AcceptLanguage . parse ( &quot;invalid_tag&quot; ) { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; g \\&quot; starting at position 11&quot; } } iex&gt; Bonfire.Common.Localise.Cldr.AcceptLanguage . parse ( &quot;da,zh-TW;q=0.3,invalid_tag&quot; ) { :ok , [ { 1.0 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;da&quot; , cldr_locale_name : :da , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;da&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :da , requested_locale_name : &quot;da&quot; , script : :Latn , territory : :DK , transform : %{ } , language_variants : [ ] } } , { 0.3 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } , { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; g \\&quot; starting at position 11&quot; } } ] }","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.AcceptLanguage.parse!/1","doc":"Parses an Accept-Language header value in its string or tokenized form to produce a list of tuples of the form [{quality, %Cldr.LanguageTag{}}, ...] sorted by quality in descending order. Arguments accept-language is any string in the format defined by rfc2616 Returns {:ok, [{quality, language_tag}, ...]} or raises a Cldr.AcceptLanguageError exception If at least one valid language tag is found but errors are also detected on one more more tags, an {ok, list} tuple is returned wuth an error tuple for each invalid tag added at the end of the list. Example iex&gt; Bonfire.Common.Localise.Cldr.AcceptLanguage . parse! ( &quot;da,zh-TW;q=0.3&quot; ) [ { 1.0 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;da&quot; , cldr_locale_name : :da , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;da&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :da , requested_locale_name : &quot;da&quot; , script : :Latn , territory : :DK , transform : %{ } , language_variants : [ ] } } , { 0.3 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } ] Bonfire.Common.Localise.Cldr.AcceptLanguage . parse! &quot;invalid_tag&quot; ** (Cldr.AcceptLanguageError) &quot;Expected a BCP47 language tag. Could not parse the remaining &quot;g&quot; starting at position 11 (ex_cldr) lib/cldr/accept_language.ex:304: Cldr.AcceptLanguage.parse!/1 iex&gt; Bonfire.Common.Localise.Cldr.AcceptLanguage . parse! ( &quot;da,zh-TW;q=0.3,invalid_tag&quot; ) [ { 1.0 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;da&quot; , cldr_locale_name : :da , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;da&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :da , requested_locale_name : &quot;da&quot; , script : :Latn , territory : :DK , transform : %{ } , language_variants : [ ] } } , { 0.3 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } , { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; g \\&quot; starting at position 11&quot; } } ]","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse!/1"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Calendar","doc":"Data functions to retrieve localised calendar information. Cldr defines formats for several calendars, the names of which are returned by Cldr.known_calendars/0 . Currently this implementation only supports the :gregorian , :persian , :coptic and ethiopic calendars. The :gregorian calendar aligns with the proleptic Gregorian calendar defined by Elixir, Calendar.ISO .","ref":"Bonfire.Common.Localise.Cldr.Calendar.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale/1","doc":"Return the calendar module for a locale. Arguments :locale is any locale or locale name validated by Cldr.validate_locale/2 . The default is Cldr.get_locale() which returns the locale set for the current process Returns {:ok, calendar_module} or {:error, {exception, reason}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Calendar . calendar_from_locale &quot;en-GB&quot; { :ok , Cldr.Calendar.GB } iex&gt; Bonfire.Common.Localise.Cldr.Calendar . calendar_from_locale &quot;en-GB-u-ca-gregory&quot; { :ok , Cldr.Calendar.Gregorian } iex&gt; Bonfire.Common.Localise.Cldr.Calendar . calendar_from_locale &quot;en&quot; { :ok , Cldr.Calendar.US } iex&gt; Bonfire.Common.Localise.Cldr.Calendar . calendar_from_locale &quot;fa-IR&quot; { :ok , Cldr.Calendar.Persian }","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.calendar_from_territory/1","doc":"Returns the calendar module preferred for a territory. Arguments territory is any valid ISO3166-2 code as an String.t or upcased atom() Returns {:ok, calendar_module} or {:error, {exception, reason}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Calendar . calendar_from_territory :US { :ok , Cldr.Calendar.Gregorian } iex&gt; Bonfire.Common.Localise.Cldr.Calendar . calendar_from_territory :XX { :error , { Cldr.UnknownTerritoryError , &quot;The territory :XX is unknown&quot; } } Notes The overwhelming majority of territories have :gregorian as their first preferred calendar and therefore Cldr.Calendar.Gregorian will be returned for most territories. Returning any other calendar module would require: That another calendar is preferred over :gregorian for a territory That a calendar module is available to support that calendar. As an example, Iran (territory :IR ) prefers the :persian calendar. If the optional library ex_cldr_calendars_persian is installed, the calendar module Cldr.Calendar.Persian will be returned. If it is not installed, Cldr.Calendar.Gregorian will be returned as :gregorian is the second preference for :IR .","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_territory/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.cyclic_years/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#cyclic_years/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.day_periods/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#day_periods/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.days/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#days/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.eras/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#eras/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.month_patterns/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#month_patterns/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.months/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#months/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.quarters/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#quarters/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Calendar.strftime_options!/2","doc":"Returns a keyword list of options than can be applied to NimbleStrftime.format/3 . The hex package nimble_strftime provides a format/3 function to format dates, times and datetimes. It takes a set of options that can return day, month and am/pm names. strftime_options! returns a keyword list than can be used as these options to return localised names for days, months and am/pm. Arguments locale is any locale returned by MyApp.Cldr.known_locale_names/0 . The default is MyApp.Cldr.get_locale/0 options is a set of keyword options. The default is [] Options :calendar is the name of any known CLDR calendar. The default is :gregorian . Example iex : MyApp.Cldr.Calendar . strftime_options! [ am_pm_names : # Function &lt; 0.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; , month_names : # Function &lt; 1.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; , abbreviated_month_names : # Function &lt; 2.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; , day_of_week_names : # Function &lt; 3.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; , abbreviated_day_of_week_names : # Function &lt; 4.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; ] Typical usage iex : NimbleStrftime . format ( Date . today ( ) , MyApp.Cldr.Calendar . strftime_options! ( ) )","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#strftime_options!/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Currency","doc":"","ref":"Bonfire.Common.Localise.Cldr.Currency.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale/3","doc":"Returns a map of the metadata for all currencies for a given locale. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_map} or {:error, {exception, reason}} Example MyApp.Cldr.Currency.currencies_for_locale &quot;en&quot; =&gt; {:ok, %{ FJD : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;FJD&quot; , count : %{ one : &quot;Fijian dollar&quot; , other : &quot;Fijian dollars&quot; } , digits : 2 , from : nil , iso_digits : 2 , name : &quot;Fijian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;FJD&quot; , tender : true , to : nil } , SUR : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;SUR&quot; , count : %{ one : &quot;Soviet rouble&quot; , other : &quot;Soviet roubles&quot; } , digits : 2 , from : nil , iso_digits : nil , name : &quot;Soviet Rouble&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;SUR&quot; , tender : true , to : nil } , ... } }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale!/3","doc":"Returns a map of the metadata for all currencies for a given locale and raises on error. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_map} or raises an exception Example MyApp.Cldr.Currency.currencies_for_locale! &quot;en&quot; =&gt; %{ FJD : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;FJD&quot; , count : %{ one : &quot;Fijian dollar&quot; , other : &quot;Fijian dollars&quot; } , digits : 2 , from : nil , iso_digits : 2 , name : &quot;Fijian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;FJD&quot; , tender : true , to : nil } , SUR : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;SUR&quot; , count : %{ one : &quot;Soviet rouble&quot; , other : &quot;Soviet roubles&quot; } , digits : 2 , from : nil , iso_digits : nil , name : &quot;Soviet Rouble&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;SUR&quot; , tender : true , to : nil } , ... }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale!/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.currency_for_code/2","doc":"Returns the currency metadata for the requested currency code. Arguments currency_or_currency_code is a binary or atom representation of an ISO 4217 currency code, or a %Cldr.Currency{} struct. Options :locale is any valid locale name returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 Returns A {:ok, currency} or {:error, {exception, reason}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Currency . currency_for_code ( &quot;AUD&quot; ) { :ok , % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;AUD&quot; , count : %{ one : &quot;Australian dollar&quot; , other : &quot;Australian dollars&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Australian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;A$&quot; , tender : true } } iex&gt; Bonfire.Common.Localise.Cldr.Currency . currency_for_code ( &quot;THB&quot; ) { :ok , % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;THB&quot; , count : %{ one : &quot;Thai baht&quot; , other : &quot;Thai baht&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Thai Baht&quot; , narrow_symbol : &quot;฿&quot; , rounding : 0 , symbol : &quot;THB&quot; , tender : true } }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.currency_for_code!/2","doc":"Returns the currency metadata for the requested currency code. Arguments currency_or_currency_code is a binary or atom representation of an ISO 4217 currency code, or a %Cldr.Currency{} struct. Options :locale is any valid locale name returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 Returns A t:Cldr.Current.t/0 or raises an exception Examples iex&gt; Bonfire.Common.Localise.Cldr.Currency . currency_for_code! ( &quot;AUD&quot; ) % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;AUD&quot; , count : %{ one : &quot;Australian dollar&quot; , other : &quot;Australian dollars&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Australian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;A$&quot; , tender : true } iex&gt; Bonfire.Common.Localise.Cldr.Currency . currency_for_code! ( &quot;THB&quot; ) % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;THB&quot; , count : %{ one : &quot;Thai baht&quot; , other : &quot;Thai baht&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Thai Baht&quot; , narrow_symbol : &quot;฿&quot; , rounding : 0 , symbol : &quot;THB&quot; , tender : true }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code!/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.currency_from_locale/1","doc":"Returns the effective currency for a given locale Arguments locale is a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 Returns A ISO 4217 currency code as an upcased atom Examples iex&gt; { :ok , locale } = Bonfire.Common.Localise.Cldr . validate_locale &quot;en&quot; iex&gt; Bonfire.Common.Localise.Cldr.Currency . currency_from_locale locale :USD iex&gt; { :ok , locale } = Bonfire.Common.Localise.Cldr . validate_locale &quot;en-AU&quot; iex&gt; Bonfire.Common.Localise.Cldr.Currency . currency_from_locale locale :AUD iex&gt; Bonfire.Common.Localise.Cldr.Currency . currency_from_locale &quot;en-GB&quot; :GBP","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_from_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.currency_history_for_locale/1","doc":"Returns a list of historic and the current currency for a given locale. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Example iex&gt; MyApp.Cldr.Currency . currency_history_for_locale &quot;en&quot; { :ok , %{ USD : %{ from : ~D[1792-01-01] , to : nil } , USN : %{ tender : false } , USS : %{ from : nil , tender : false , to : ~D[2014-03-01] } } }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_history_for_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.currency_strings/3","doc":"Returns a map that matches a currency string to a currency code. A currency string is a localised name or symbol representing a currency in a locale-specific manner. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_string_map} or {:error, {exception, reason}} Example MyApp.Cldr.Currency . currency_strings &quot;en&quot; =&gt; { :ok , %{ &quot;mexican silver pesos&quot; =&gt; :MXP , &quot;sudanese dinar&quot; =&gt; :SDD , &quot;bad&quot; =&gt; :BAD , &quot;rsd&quot; =&gt; :RSD , &quot;swazi lilangeni&quot; =&gt; :SZL , &quot;zairean new zaire&quot; =&gt; :ZRN , &quot;guyanaese dollars&quot; =&gt; :GYD , &quot;equatorial guinean ekwele&quot; =&gt; :GQE , ... } }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.currency_strings!/3","doc":"Returns a map that matches a currency string to a currency code or raises an exception. A currency string is a localised name or symbol representing a currency in a locale-specific manner. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_string_map} or raises an exception Example MyApp.Cldr.Currency . currency_strings! &quot;en&quot; =&gt; %{ &quot;mexican silver pesos&quot; =&gt; :MXP , &quot;sudanese dinar&quot; =&gt; :SDD , &quot;bad&quot; =&gt; :BAD , &quot;rsd&quot; =&gt; :RSD , &quot;swazi lilangeni&quot; =&gt; :SZL , &quot;zairean new zaire&quot; =&gt; :ZRN , &quot;guyanaese dollars&quot; =&gt; :GYD , &quot;equatorial guinean ekwele&quot; =&gt; :GQE , ... }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings!/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.current_currency_from_locale/1","doc":"Returns the current currency for a given locale. This function does not consider the U extenion parameters cu or rg . It is recommended to us Cldr.Currency.currency_from_locale/1 in most circumstances. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Example iex&gt; MyApp.Cldr.Currency . current_currency_from_locale &quot;en&quot; :USD iex&gt; MyApp.Cldr.Currency . current_currency_from_locale &quot;en-AU&quot; :AUD","ref":"Bonfire.Common.Localise.Cldr.Currency.html#current_currency_from_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.current_territory_currencies/0","doc":"Returns a mapping from a territory code to its current currency code. If a territory has no current currency (like Antartica, territory code :AQ ) then no mapping is returned for that territory. Returns A map of {territory_code =&gt; Cldr.Currency.t} Example iex&gt; Bonfire.Common.Localise.Cldr.Currency . current_territory_currencies ( )","ref":"Bonfire.Common.Localise.Cldr.Currency.html#current_territory_currencies/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.known_currencies/0","doc":"See Bonfire.Common.Localise.Cldr.Currency.known_currency_codes/0 .","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currencies/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.known_currency?/1","doc":"See Bonfire.Common.Localise.Cldr.Currency.known_currency_code?/1 .","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency?/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.known_currency_code/1","doc":"Returns a 2-tuple indicating if the supplied currency code is known. Arguments currency_code is a binary or atom representing an ISO4217 currency code Returns {:ok, currency_code} or {:error, {exception, reason}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Currency . known_currency_code &quot;AUD&quot; { :ok , :AUD } iex&gt; Bonfire.Common.Localise.Cldr.Currency . known_currency_code &quot;GGG&quot; { :error , { Cldr.UnknownCurrencyError , &quot;The currency \\&quot; GGG \\&quot; is invalid&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.known_currency_code?/1","doc":"Returns a boolean indicating if the supplied currency code is known. Arguments currency_code is a binary or atom representing an ISO4217 currency code Returns true or false Examples iex&gt; Bonfire.Common.Localise.Cldr.Currency . known_currency_code? &quot;AUD&quot; true iex&gt; Bonfire.Common.Localise.Cldr.Currency . known_currency_code? &quot;GGG&quot; false iex&gt; Bonfire.Common.Localise.Cldr.Currency . known_currency_code? :XCV false","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code?/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.known_currency_codes/0","doc":"Returns a list of all known currency codes. Example iex&gt; Bonfire.Common.Localise.Cldr.Currency . known_currency_codes","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_codes/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.new/2","doc":"Returns a Currency struct created from the arguments. Arguments currency is a private use currency code in a format defined by ISO4217 which is X followed by two alphanumeric characters. options is a map of options representing the optional elements of the Cldr.Currency.t struct. Options :name is the name of the currency. Required. :digits is the precision of the currency. Required. :symbol is the currency symbol. Optional. :narrow_symbol is an alternative narrow symbol. Optional. :round_nearest is the rounding precision such as 0.05 . Optional. :alt_code is an alternative currency code for application use. :cash_digits is the precision of the currency when used as cash. Optional. :cash_rounding_nearest is the rounding precision when used as cash such as 0.05 . Optional. Returns {:ok, Cldr.Currency.t} or {:error, {exception, message}} Example iex&gt; Bonfire.Common.Localise.Cldr.Currency . new ( :XAE , name : &quot;Custom Name&quot; , digits : 0 ) { :ok , % Cldr.Currency { alt_code : :XAE , cash_digits : 0 , cash_rounding : nil , code : :XAE , count : %{ other : &quot;Custom Name&quot; } , digits : 0 , from : nil , iso_digits : 0 , name : &quot;Custom Name&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;XAE&quot; , tender : false , to : nil } } iex&gt; MyApp.Cldr.Currency . new ( :XAH , name : &quot;Custom Name&quot; ) { :error , &quot;Required options are missing. Required options are [:name, :digits]&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Currency . new ( :XAE , name : &quot;XAE&quot; , digits : 0 ) { :error , { Cldr.CurrencyAlreadyDefined , &quot;Currency :XAE is already defined.&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#new/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.pluralize/3","doc":"Returns the appropriate currency display name for the currency , based on the plural rules in effect for the locale . Arguments number is an integer, float or Decimal currency is any currency returned by Cldr.Currency.known_currencies/0 options is a keyword list of options Options locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 Returns {:ok, plural_string} or {:error, {exception, message}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Currency . pluralize 1 , :USD { :ok , &quot;US dollar&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Currency . pluralize 3 , :USD { :ok , &quot;US dollars&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Currency . pluralize 12 , :USD , locale : &quot;zh&quot; { :ok , &quot;美元&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Currency . pluralize 12 , :USD , locale : &quot;fr&quot; { :ok , &quot;dollars des États-Unis&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Currency . pluralize 1 , :USD , locale : &quot;fr&quot; { :ok , &quot;dollar des États-Unis&quot; }","ref":"Bonfire.Common.Localise.Cldr.Currency.html#pluralize/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Currency.strings_for_currency/2","doc":"Returns the strings associated with a currency in a given locale. Arguments currency is an ISO4217 currency code locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Returns A list of strings or {:error, {exception, reason}} Example iex&gt; MyApp.Cldr.Currency . strings_for_currency :AUD , &quot;en&quot; [ &quot;a$&quot; , &quot;australian dollars&quot; , &quot;aud&quot; , &quot;australian dollar&quot; ]","ref":"Bonfire.Common.Localise.Cldr.Currency.html#strings_for_currency/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Date","doc":"","ref":"Bonfire.Common.Localise.Cldr.Date.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Date.to_string/2","doc":"Formats a date according to a format string as defined in CLDR and described in TR35 Arguments date is a %Date{} struct or any map that contains the keys year , month , day and calendar options is a keyword list of options for formatting. The valid options are: Options format: :short | :medium | :long | :full or a format string. The default is :medium locale: any locale returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale() . number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, formatted_string} or {:error, reason} Examples iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string ~D[2017-07-10] , format : :medium , locale : &quot;en&quot; { :ok , &quot;Jul 10, 2017&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string ~D[2017-07-10] , locale : &quot;en&quot; { :ok , &quot;Jul 10, 2017&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string ~D[2017-07-10] , format : :full , locale : &quot;en&quot; { :ok , &quot;Monday, July 10, 2017&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string ~D[2017-07-10] , format : :short , locale : &quot;en&quot; { :ok , &quot;7/10/17&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string ~D[2017-07-10] , format : :short , locale : &quot;fr&quot; { :ok , &quot;10/07/2017&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string ~D[2017-07-10] , format : :long , locale : &quot;af&quot; { :ok , &quot;10 Julie 2017&quot; }","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Date.to_string!/2","doc":"Formats a date according to a format string as defined in CLDR and described in TR35 Arguments date is a %Date{} struct or any map that contains the keys year , month , day and calendar options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns formatted_date or raises an exception. Examples iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string! ~D[2017-07-10] , format : :medium , locale : &quot;en&quot; &quot;Jul 10, 2017&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string! ~D[2017-07-10] , locale : &quot;en&quot; &quot;Jul 10, 2017&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string! ~D[2017-07-10] , format : :full , locale : &quot;en&quot; &quot;Monday, July 10, 2017&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string! ~D[2017-07-10] , format : :short , locale : &quot;en&quot; &quot;7/10/17&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string! ~D[2017-07-10] , format : :short , locale : &quot;fr&quot; &quot;10/07/2017&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date . to_string! ~D[2017-07-10] , format : :long , locale : &quot;af&quot; &quot;10 Julie 2017&quot;","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string!/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Date.Interval","doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3 and Bonfire.Common.Localise.Cldr.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Date.Interval.do_to_string!/3","doc":"","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#do_to_string!/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3","doc":"Returns a interval formed from two dates as a localised string. Arguments from is any map that conforms to the Calendar.date type. to is any map that conforms to the Calendar.date type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone date. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-12-31] { :ok , &quot;Jan 1 – Dec 31, 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] { :ok , &quot;Jan 1 – 12, 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month { :ok , &quot;January – December 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :short { :ok , &quot;1/1/2020 – 1/12/2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long , locale : &quot;fr&quot; { :ok , &quot;mer. 1 – dim. 12 janv. 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long , locale : &quot;th&quot; , number_system : :thai { :ok , &quot;พ. ๑ ม.ค. – อา. ๑๒ ม.ค. ๒๐๒๐&quot; }","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Date.Interval.to_string!/3","doc":"Returns a interval formed from two dates as a localised string. Arguments from is any map that conforms to the Calendar.date type. to is any map that conforms to the Calendar.date type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone date. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) &quot;Jan 1 – 12, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-01] ) , ...&gt; format : :long , style : :year_and_month &quot;January – December 2020&quot; iex&gt; use CalendarInterval iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string! ~I&quot;2020-01/12&quot; &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :short &quot;1/1/2020 – 1/12/2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :long , locale : &quot;fr&quot; &quot;mer. 1 – dim. 12 janv. 2020&quot;","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string!/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.DateTime","doc":"","ref":"Bonfire.Common.Localise.Cldr.DateTime.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.to_string/2","doc":"Formats a DateTime according to a format string as defined in CLDR and described in TR35 Arguments datetime is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys :year , :month , :day , :calendar . :hour , :minute and :second with optional :microsecond . options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string or any of the keys returned by Cldr.DateTime.available_format_names . The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; for example, the locale era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns {:ok, formatted_datetime} or {:error, reason} Examples iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string datetime { :ok , &quot;Jan 1, 2000, 11:59:59 PM&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string datetime , locale : &quot;en&quot; { :ok , &quot;Jan 1, 2000, 11:59:59 PM&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string datetime , format : :long , locale : &quot;en&quot; { :ok , &quot;January 1, 2000, 11:59:59 PM UTC&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string datetime , format : :hms , locale : &quot;en&quot; { :ok , &quot;11:59:59 PM&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string datetime , format : :full , locale : &quot;en&quot; { :ok , &quot;Saturday, January 1, 2000, 11:59:59 PM GMT&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string datetime , format : :full , locale : &quot;fr&quot; { :ok , &quot;samedi 1 janvier 2000, 23:59:59 UTC&quot; }","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.to_string!/2","doc":"Formats a DateTime according to a format string as defined in CLDR and described in TR35 returning a formatted string or raising on error. Arguments datetime is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys :year , :month , :day , :calendar . :hour , :minute and :second with optional :microsecond . options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string or any of the keys returned by Cldr.DateTime.available_format_names or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; for example, the locale era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns formatted_datetime or raises an exception Examples iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string! datetime , locale : &quot;en&quot; &quot;Jan 1, 2000, 11:59:59 PM&quot; iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string! datetime , format : :long , locale : &quot;en&quot; &quot;January 1, 2000, 11:59:59 PM UTC&quot; iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string! datetime , format : :full , locale : &quot;en&quot; &quot;Saturday, January 1, 2000, 11:59:59 PM GMT&quot; iex&gt; Bonfire.Common.Localise.Cldr.DateTime . to_string! datetime , format : :full , locale : &quot;fr&quot; &quot;samedi 1 janvier 2000, 23:59:59 UTC&quot;","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string!/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.DateTime.Format","doc":"Manages the Date, TIme and DateTime formats defined by CLDR. The functions in Cldr.DateTime.Format are primarily concerned with encapsulating the data from CLDR in functions that are used during the formatting process.","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.calendars_for/1","doc":"Returns a list of calendars defined for a given locale. Arguments locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 Example iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . calendars_for &quot;en&quot; { :ok , [ :buddhist , :chinese , :coptic , :dangi , :ethiopic , :ethiopic_amete_alem , :generic , :gregorian , :hebrew , :indian , :islamic , :islamic_civil , :islamic_rgsa , :islamic_tbla , :islamic_umalqura , :japanese , :persian , :roc ] }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#calendars_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_formats/2","doc":"Returns a map of the standard date formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . date_formats &quot;en&quot; { :ok , % Cldr.Date.Styles { full : &quot;EEEE, MMMM d, y&quot; , long : &quot;MMMM d, y&quot; , medium : &quot;MMM d, y&quot; , short : &quot;M/d/yy&quot; } } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . date_formats &quot;en&quot; , :buddhist { :ok , % Cldr.Date.Styles { full : &quot;EEEE, MMMM d, y G&quot; , long : &quot;MMMM d, y G&quot; , medium : &quot;MMM d, y G&quot; , short : &quot;M/d/y GGGGG&quot; } }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_formats/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_available_formats/2","doc":"Returns a map of the available non-standard datetime formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t() calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . date_time_available_formats &quot;en&quot; { :ok , %{ d : &quot;d&quot; , h : &quot;h a&quot; , hm : &quot;h:mm a&quot; , hms : &quot;h:mm:ss a&quot; , hmsv : &quot;h:mm:ss a v&quot; , hmv : &quot;h:mm a v&quot; , ms : &quot;mm:ss&quot; , y : &quot;y&quot; , yw : %{ one : &quot;&#39;week&#39; w &#39;of&#39; Y&quot; , other : &quot;&#39;week&#39; w &#39;of&#39; Y&quot; } , Bh : &quot;h B&quot; , Bhm : &quot;h:mm B&quot; , Bhms : &quot;h:mm:ss B&quot; , E : &quot;ccc&quot; , EBhm : &quot;E h:mm B&quot; , EBhms : &quot;E h:mm:ss B&quot; , EHm : &quot;E HH:mm&quot; , EHms : &quot;E HH:mm:ss&quot; , Ed : &quot;d E&quot; , Ehm : &quot;E h:mm a&quot; , Ehms : &quot;E h:mm:ss a&quot; , Gy : &quot;y G&quot; , GyMMM : &quot;MMM y G&quot; , GyMMMEd : &quot;E, MMM d, y G&quot; , GyMMMd : &quot;MMM d, y G&quot; , GyMd : &quot;M/d/y G&quot; , H : &quot;HH&quot; , Hm : &quot;HH:mm&quot; , Hms : &quot;HH:mm:ss&quot; , Hmsv : &quot;HH:mm:ss v&quot; , Hmv : &quot;HH:mm v&quot; , M : &quot;L&quot; , MEd : &quot;E, M/d&quot; , MMM : &quot;LLL&quot; , MMMEd : &quot;E, MMM d&quot; , MMMMW : %{ one : &quot;&#39;week&#39; W &#39;of&#39; MMMM&quot; , other : &quot;&#39;week&#39; W &#39;of&#39; MMMM&quot; } , MMMMd : &quot;MMMM d&quot; , MMMd : &quot;MMM d&quot; , Md : &quot;M/d&quot; , yM : &quot;M/y&quot; , yMEd : &quot;E, M/d/y&quot; , yMMM : &quot;MMM y&quot; , yMMMEd : &quot;E, MMM d, y&quot; , yMMMM : &quot;MMMM y&quot; , yMMMd : &quot;MMM d, y&quot; , yMd : &quot;M/d/y&quot; , yQQQ : &quot;QQQ y&quot; , yQQQQ : &quot;QQQQ y&quot; } }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_available_formats/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_formats/2","doc":"Returns a map of the standard datetime formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . date_time_formats &quot;en&quot; { :ok , % Cldr.DateTime.Styles { full : &quot;{1}, {0}&quot; , long : &quot;{1}, {0}&quot; , medium : &quot;{1}, {0}&quot; , short : &quot;{1}, {0}&quot; } } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . date_time_formats &quot;en&quot; , :buddhist { :ok , % Cldr.DateTime.Styles { full : &quot;{1}, {0}&quot; , long : &quot;{1}, {0}&quot; , medium : &quot;{1}, {0}&quot; , short : &quot;{1}, {0}&quot; } }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_formats/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_fallback/2","doc":"Returns the fallback format for a given locale and calendar type Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t() calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . date_time_interval_fallback &quot;en&quot; , :gregorian [ 0 , &quot; – &quot; , 1 ]","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_interval_fallback/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_formats/2","doc":"Returns a map of the interval formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples:","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_interval_formats/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.day_period_for/2","doc":"Returns the time period for a given time of day. Arguments time is any Time.t or a map with at least :hour , :minute and :second keys language is a binary representation of a valid and configured language in Cldr The time period is a locale-specific key that is used to localise a time into a textual representation of &quot;am&quot;, &quot;pm&quot;, &quot;noon&quot;, &quot;midnight&quot;, &quot;evening&quot;, &quot;morning&quot; and so on as defined in the CLDR day period rules. Examples iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . day_period_for ~T[06:05:54.515228] , &quot;en&quot; :morning1 iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . day_period_for ~T[13:05:54.515228] , &quot;en&quot; :afternoon1 iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . day_period_for ~T[21:05:54.515228] , &quot;en&quot; :night1 iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . day_period_for ~T[21:05:54.515228] , &quot;fr&quot; :evening1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#day_period_for/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_format/1","doc":"Returns the GMT offset format list for a for a timezone offset for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . gmt_format &quot;en&quot; { :ok , [ &quot;GMT&quot; , 0 ] }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#gmt_format/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_zero_format/1","doc":"Returns the GMT format string for a for a timezone with an offset of zero for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . gmt_zero_format :en { :ok , &quot;GMT&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . gmt_zero_format &quot;fr&quot; { :ok , &quot;UTC&quot; }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#gmt_zero_format/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.hour_format/1","doc":"Returns the positive and negative hour format for a timezone offset for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . hour_format &quot;en&quot; { :ok , { &quot;+HH:mm&quot; , &quot;-HH:mm&quot; } }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#hour_format/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","doc":"Returns a boolean indicating is a given language defines the notion of &quot;noon&quot; and &quot;midnight&quot; Arguments language is a binary representation of a valid and configured language in Cldr Examples iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;fr&quot; true iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;en&quot; true iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;af&quot; false","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.time_formats/2","doc":"Returns a map of the standard time formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . time_formats &quot;en&quot; { :ok , % Cldr.Time.Styles { full : &quot;h:mm:ss a zzzz&quot; , long : &quot;h:mm:ss a z&quot; , medium : &quot;h:mm:ss a&quot; , short : &quot;h:mm a&quot; } } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Format . time_formats &quot;en&quot; , :buddhist { :ok , % Cldr.Time.Styles { full : &quot;h:mm:ss a zzzz&quot; , long : &quot;h:mm:ss a z&quot; , medium : &quot;h:mm:ss a&quot; , short : &quot;h:mm a&quot; } }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#time_formats/2"},{"type":"type","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.calendar/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#t:calendar/0"},{"type":"type","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.formats/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#t:formats/0"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.DateTime.Formatter","doc":"Implements the compilation and execution of date, time and datetime formats.","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.format/4","doc":"Returns the formatted and localised date, time or datetime for a given Date , Time , DateTime or struct with the appropriate fields. Arguments date is a Date , Time , DateTime or other struct that contains the required date and time fields. format is a valid format string, for example yy/MM/dd hh:MM locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 options is a keyword list of options. The valid options are: Options :number_system . The resulting formatted and localised date/time string will be transliterated into this number system. Number system is anything returned from Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1 NOTE This function is called by Cldr.Date.to_string/2 , Cldr.Time.to_string/2 and Cldr.DateTime.to_string/2 which is the preferred API. Examples iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Formatter . format ~U[2017-09-03 10:23:00.0Z] , &quot;yy/MM/dd hh:MM&quot; , &quot;en&quot; { :ok , &quot;17/09/03 10:09&quot; }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html#format/4"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.gmt_tz_format/3","doc":"","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html#gmt_tz_format/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval","doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See Cldr.Interval.to_string/3 and Cldr.DateTime.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval.do_to_string/3","doc":"","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#do_to_string/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval.do_to_string!/3","doc":"","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#do_to_string!/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string/3","doc":"Returns a string representing the formatted interval formed by two dates. Arguments from is any map that conforms to the Calendar.datetime type. to is any map that conforms to the Calendar.datetime type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone datetime. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ...&gt; ~U[2020-12-31 10:00:00.0Z] { :ok , &quot;Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , nil { :ok , &quot;Jan 1, 2020, 12:00:00 AM –&quot; }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string!/3","doc":"Returns a string representing the formatted interval formed by two dates or raises an exception. Arguments from is any map that conforms to the Calendar.datetime type. to is any map that conforms to the Calendar.datetime type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone datetime. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval. Examples iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ...&gt; ~U[2020-12-31 10:00:00.0Z] &quot;Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM&quot;","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string!/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.DateTime.Relative","doc":"","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string/2","doc":"Returns a {:ok, string} representing a relative time (ago, in) for a given number, Date or Datetime. Returns {:error, reason} when errors are detected. relative is a number or Date/Datetime representing the time distance from now or from options[:relative_to] options is a Keyword list of options which are: Options :locale is the locale in which the binary is formatted. The default is Cldr.get_locale/0 :style is the style of the binary. Style may be :default , :narrow or :short :unit is the time unit for the formatting. The allowable units are :second , :minute , :hour , :day , :week , :month , :year , :mon , :tue , :wed , :thu , :fri , :sat , :sun , :quarter :relative_to is the baseline Date or Datetime from which the difference from relative is calculated when relative is a Date or a DateTime. The default for a Date is Date.utc_today , for a DateTime it is DateTime.utc_now Notes When options[:unit] is not specified, MyApp.Cldr.DateTime.Relative.to_string/2 attempts to identify the appropriate unit based upon the magnitude of relative . For example, given a parameter of less than 60 , then to_string/2 will assume :seconds as the unit. See unit_from_relative_time/1 . Examples iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( - 1 ) { :ok , &quot;1 second ago&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 1 ) { :ok , &quot;in 1 second&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 1 , unit : :day ) { :ok , &quot;tomorrow&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 1 , unit : :day , locale : &quot;fr&quot; ) { :ok , &quot;demain&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 1 , unit : :day , style : :narrow ) { :ok , &quot;tomorrow&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 1234 , unit : :year ) { :ok , &quot;in 1,234 years&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 1234 , unit : :year , locale : &quot;fr&quot; ) { :ok , &quot;dans 1 234 ans&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 31 ) { :ok , &quot;in 31 seconds&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( ~D[2017-04-29] , relative_to : ~D[2017-04-26] ) { :ok , &quot;in 3 days&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 310 , style : :short , locale : &quot;fr&quot; ) { :ok , &quot;dans 5 min&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( 310 , style : :narrow , locale : &quot;fr&quot; ) { :ok , &quot;+5 min&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string 2 , unit : :wed , style : :short , locale : &quot;en&quot; { :ok , &quot;in 2 Wed.&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string 1 , unit : :wed , style : :short { :ok , &quot;next Wed.&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string - 1 , unit : :wed , style : :short { :ok , &quot;last Wed.&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string - 1 , unit : :wed { :ok , &quot;last Wednesday&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string - 1 , unit : :quarter { :ok , &quot;last quarter&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string - 1 , unit : :mon , locale : &quot;fr&quot; { :ok , &quot;lundi dernier&quot; } iex&gt; Bonfire.Common.Localise.Cldr.DateTime.Relative . to_string ( ~D[2017-04-29] , unit : :ziggeraut ) { :error , { Cldr.UnknownTimeUnit , &quot;Unknown time unit :ziggeraut. Valid time units are [:day, :hour, :minute, :month, :second, :week, :year, :mon, :tue, :wed, :thu, :fri, :sat, :sun, :quarter]&quot; } }","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string!/2","doc":"Returns a {:ok, string} representing a relative time (ago, in) for a given number, Date or Datetime or raises an exception on error. Arguments relative is a number or Date/Datetime representing the time distance from now or from options[:relative_to]. options is a Keyword list of options. Options :locale is the locale in which the binary is formatted. The default is Cldr.get_locale/0 :style is the format of the binary. Style may be :default , :narrow or :short . The default is :default :unit is the time unit for the formatting. The allowable units are :second , :minute , :hour , :day , :week , :month , :year , :mon , :tue , :wed , :thu , :fri , :sat , :sun , :quarter :relative_to is the baseline Date or Datetime from which the difference from relative is calculated when relative is a Date or a DateTime. The default for a Date is Date.utc_today , for a DateTime it is DateTime.utc_now See to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string!/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Interval","doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. The interval functions in this library will determine the calendar field with the greatest difference between the two datetimes before using the format pattern. For example, the greatest difference in &quot;Jan 10-12, 2008&quot; is the day field, while the greatest difference in &quot;Jan 10 - Feb 12, 2008&quot; is the month field. This is used to pick the exact pattern to be used. See Cldr.Interval for further detail.","ref":"Bonfire.Common.Localise.Cldr.Interval.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Interval.to_string/2","doc":"Returns a Date.Range or CalendarInterval as a localised string. Arguments range is either a Date.Range.t returned from Date.range/2 or a CalendarInterval.t options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be omitted. If a style is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time For a datetime there are no style options, the default for each of the date and time part is used locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes to_string/2 will decide which formatter to call based upon the arguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; use CalendarInterval iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Thu, Dec 31, 2020&quot; }","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Interval.to_string/3","doc":"Returns a string representing the formatted interval formed by two dates. Arguments from is any map that conforms to the any one of the Calendar types. to is any map that conforms to the any one of the Calendar types. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be omitted. If styling is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time For a datetime there are no style options, the default for each of the date and time part is used locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes to_string/2 will decide which formatter to call based upon the arguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-12-31] { :ok , &quot;Jan 1 – Dec 31, 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] { :ok , &quot;Jan 1 – 12, 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month { :ok , &quot;January – December 2020&quot; } iex&gt; use CalendarInterval iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-12-01 10:05:00.0Z] , ...&gt; format : :long { :ok , &quot;January 1, 2020, 12:00:00 AM UTC – December 1, 2020, 10:05:00 AM UTC&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:05:00.0Z] , ...&gt; format : :long { :ok , &quot;January 1, 2020, 12:00:00 AM UTC – 10:05:00 AM UTC&quot; }","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Interval.to_string!/2","doc":"Returns a Date.Range or CalendarInterval as a localised string or raises an exception. Arguments range is either a Date.Range.t returned from Date.range/2 or a CalendarInterval.t options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be omitted. If a style is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time . For a datetime there are no style options, the default for each of the date and time part is used. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes to_string/3 will decide which formatter to call based upon the arguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Otherwise it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; use CalendarInterval iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) , ...&gt; format : :long &quot;Wed, Jan 1 – Thu, Dec 31, 2020&quot;","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Interval.to_string!/3","doc":"Returns a string representing the formatted interval formed by two date or raises an exception. Arguments from is any map that conforms to the any one of the Calendar types. to is any map that conforms to the any one of the Calendar types. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be omitted. If styling is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time . For a datetime there are no style options, the default for each of the date and time part is used. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises and exception Notes to_string/3 will decide which formatter to call based upon the arguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-12-31] &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-01-12] &quot;Jan 1 – 12, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month &quot;January – December 2020&quot; iex&gt; use CalendarInterval iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-12-01 10:05:00.0Z] , ...&gt; format : :long &quot;January 1, 2020, 12:00:00 AM UTC – December 1, 2020, 10:05:00 AM UTC&quot; iex&gt; Bonfire.Common.Localise.Cldr.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:05:00.0Z] , ...&gt; format : :long &quot;January 1, 2020, 12:00:00 AM UTC – 10:05:00 AM UTC&quot;","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Language","doc":"","ref":"Bonfire.Common.Localise.Cldr.Language.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Language.available_languages/1","doc":"Return all the languages' iso-codes available for a given locale. Defaults to the current locale. Example &gt; Bonfire.Common.Localise.Cldr.Language.Language . available_languages ( :en ) [ &quot;aa&quot; , &quot;ab&quot; , &quot;ace&quot; , &quot;ach&quot; , &quot;ada&quot; , &quot;ady&quot; , &quot;ae&quot; , &quot;aeb&quot; , &quot;af&quot; , &quot;afh&quot; , &quot;agq&quot; , &quot;ain&quot; , &quot;ak&quot; , &quot;akk&quot; , &quot;akz&quot; , &quot;ale&quot; , &quot;aln&quot; , &quot;alt&quot; , &quot;am&quot; , &quot;an&quot; , &quot;ang&quot; , &quot;anp&quot; , &quot;ar&quot; , &quot;ar-001&quot; , &quot;arc&quot; , &quot;arn&quot; , &quot;aro&quot; , &quot;arp&quot; , &quot;arq&quot; , &quot;ars&quot; , &quot;arw&quot; , &quot;ary&quot; , &quot;arz&quot; , &quot;as&quot; , &quot;asa&quot; , &quot;ase&quot; , &quot;ast&quot; , &quot;av&quot; , &quot;avk&quot; , &quot;awa&quot; , &quot;ay&quot; , &quot;az&quot; , &quot;ba&quot; , &quot;bal&quot; , &quot;ban&quot; , &quot;bar&quot; , &quot;bas&quot; , &quot;bax&quot; , &quot;bbc&quot; , &quot;bbj&quot; , ... ]","ref":"Bonfire.Common.Localise.Cldr.Language.html#available_languages/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Language.known_languages/1","doc":"Return a map of iso-code keyed maps of language names in any available formats for the given locale. Defaults to the current locale. Example &gt; Bonfire.Common.Localise.Cldr.Language.Language . known_languages ( :en ) %{ &quot;bez&quot; =&gt; %{ standard : &quot;Bena&quot; } , &quot;lo&quot; =&gt; %{ standard : &quot;Lao&quot; } , &quot;kha&quot; =&gt; %{ standard : &quot;Khasi&quot; } , &quot;eo&quot; =&gt; %{ standard : &quot;Esperanto&quot; } , &quot;rm&quot; =&gt; %{ standard : &quot;Romansh&quot; } , &quot;ja&quot; =&gt; %{ standard : &quot;Japanese&quot; } , &quot;sw-CD&quot; =&gt; %{ standard : &quot;Congo Swahili&quot; } , &quot;pdc&quot; =&gt; %{ standard : &quot;Pennsylvania German&quot; } , &quot;om&quot; =&gt; %{ standard : &quot;Oromo&quot; } , &quot;jut&quot; =&gt; %{ standard : &quot;Jutish&quot; } , &quot;lij&quot; =&gt; %{ standard : &quot;Ligurian&quot; } , &quot;kut&quot; =&gt; %{ standard : &quot;Kutenai&quot; } , &quot;vep&quot; =&gt; %{ standard : &quot;Veps&quot; } , &quot;yao&quot; =&gt; %{ standard : &quot;Yao&quot; } , &quot;gez&quot; =&gt; %{ standard : &quot;Geez&quot; } , &quot;cr&quot; =&gt; %{ standard : &quot;Cree&quot; } , &quot;ne&quot; =&gt; %{ standard : &quot;Nepali&quot; } , &quot;zbl&quot; =&gt; %{ standard : &quot;Blissymbols&quot; } , &quot;ae&quot; =&gt; %{ standard : &quot;Avestan&quot; } , &quot;rof&quot; =&gt; %{ standard : &quot;Rombo&quot; } , &quot;tkl&quot; =&gt; %{ standard : &quot;Tokelau&quot; } , &quot;rgn&quot; =&gt; %{ standard : &quot;Romagnol&quot; } , &quot;el&quot; =&gt; %{ standard : &quot;Greek&quot; } , &quot;myv&quot; =&gt; %{ standard : &quot;Erzya&quot; } , &quot;smj&quot; =&gt; %{ standard : &quot;Lule Sami&quot; } , &quot;fo&quot; =&gt; %{ standard : &quot;Faroese&quot; } , &quot;ii&quot; =&gt; %{ standard : &quot;Sichuan Yi&quot; } , &quot;bum&quot; =&gt; %{ standard : &quot;Bulu&quot; } , &quot;za&quot; =&gt; %{ standard : &quot;Zhuang&quot; } , &quot;raj&quot; =&gt; %{ standard : &quot;Rajasthani&quot; } , &quot;mrj&quot; =&gt; %{ standard : &quot;Western Mari&quot; } , &quot;stq&quot; =&gt; %{ standard : &quot;Saterland Frisian&quot; } , &quot;hu&quot; =&gt; %{ standard : &quot;Hungarian&quot; } , &quot;mga&quot; =&gt; %{ standard : &quot;Middle Irish&quot; } , &quot;bej&quot; =&gt; %{ standard : &quot;Beja&quot; } , &quot;yue&quot; =&gt; %{ standard : &quot;Cantonese&quot; } , &quot;xog&quot; =&gt; %{ standard : &quot;Soga&quot; } , &quot;ttt&quot; =&gt; %{ standard : &quot;Muslim Tat&quot; } , &quot;uga&quot; =&gt; %{ standard : &quot;Ugaritic&quot; } , &quot;rup&quot; =&gt; %{ standard : &quot;Aromanian&quot; } , &quot;crs&quot; =&gt; %{ standard : &quot;Seselwa Creole French&quot; } , &quot;oc&quot; =&gt; %{ standard : &quot;Occitan&quot; } , &quot;chp&quot; =&gt; %{ standard : &quot;Chipewyan&quot; } , &quot;zen&quot; =&gt; %{ standard : &quot;Zenaga&quot; } , &quot;kmb&quot; =&gt; %{ standard : &quot;Kimbundu&quot; } , &quot;nr&quot; =&gt; %{ standard : &quot;South Ndebele&quot; } , &quot;tiv&quot; =&gt; %{ standard : &quot;Tiv&quot; } , &quot;aln&quot; =&gt; %{ standard : &quot;Gheg Albanian&quot; } , &quot;sh&quot; =&gt; %{ standard : &quot;Serbo-Croatian&quot; } , &quot;fil&quot; =&gt; %{ ... } , ... }","ref":"Bonfire.Common.Localise.Cldr.Language.html#known_languages/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Language.to_string/2","doc":"Try to translate the given language iso code or language tag. Example iex&gt; Bonfire.Common.Localise.Cldr.Language.Language . to_string ( &quot;eo&quot; ) { :ok , &quot;Esperanto&quot; }","ref":"Bonfire.Common.Localise.Cldr.Language.html#to_string/2"},{"type":"type","title":"Bonfire.Common.Localise.Cldr.Language.styles/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.Language.html#t:styles/0"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Locale","doc":"Backend module that provides functions to define new locales and display human-readable locale names for presentation purposes.","ref":"Bonfire.Common.Localise.Cldr.Locale.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.fallback_locale_names/1","doc":"Returns the list of fallback locale names, starting with the provided locale name. Fallbacks are a list of locate names which can be used to resolve translation or other localization data if such localised data does not exist for this specific locale.. Arguments locale_name is any locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Returns {:ok, list_of_locale_names} or {:error, {exception, reason}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Locale . fallback_locale_names ( :&quot;fr-CA&quot; ) { :ok , [ :&quot;fr-CA&quot; , :fr , :und ] } # Fallbacks are typically formed by progressively # stripping variant, territory and script from the # given locale name. But not always - there are # certain fallbacks that take a different path. iex&gt; Bonfire.Common.Localise.Cldr.Locale . fallback_locale_names ( :nb ) { :ok , [ :nb , :no , :und ] }","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locale_names/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.fallback_locales/1","doc":"Returns the list of fallback locales, starting with the provided locale name. Fallbacks are a list of locate names which can be used to resolve translation or other localization data if such localised data does not exist for this specific locale. Arguments locale_name is any locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Returns {:ok, list_of_locales} or {:error, {exception, reason}} Examples Bonfire.Common.Localise.Cldr.Locale . fallback_locales ( :&quot;fr-CA&quot; ) =&gt; { :ok , [ # Cldr.LanguageTag &lt; fr - CA [ validated ] &gt; , # Cldr.LanguageTag &lt; fr [ validated ] &gt; , # Cldr.LanguageTag &lt; und [ validated ] &gt; ] } # Fallbacks are typically formed by progressively # stripping variant, territory and script from the # given locale name. But not always - there are # certain fallbacks that take a different path. Bonfire.Common.Localise.Cldr.Locale . fallback_locales ( :nb ) ) =&gt; { :ok , [ # Cldr.LanguageTag &lt; nb [ validated ] &gt; , # Cldr.LanguageTag &lt; no [ validated ] &gt; , # Cldr.LanguageTag &lt; und [ validated ] &gt; ] }","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locales/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.locale_for_territory/1","doc":"Returns the &quot;best fit&quot; locale for a given territory. Using the population percentage data from CLDR, the language most commonly spoken in the given territory is used to form a locale name which is then validated against the given backend. First a territory-specific locale is validated and if that fails, the base language only is validate. For example, if the territory is AU then then the language most spoken is &quot;en&quot;. First, the locale &quot;en-AU&quot; is validated and if that fails, &quot;en&quot; is validated. Arguments territory is any ISO 3166 Alpha-2 territory code that can be validated by Cldr.validate_territory/1 Returns {:ok, language_tag} or {:error, {exception, reason}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Locale.locale_for_territory(:AU) Elixir.Bonfire.Common.Localise.Cldr.validate_locale(:&quot;en-AU&quot;) iex&gt; Bonfire.Common.Localise.Cldr.Locale.locale_for_territory(:US) Elixir.Bonfire.Common.Localise.Cldr.validate_locale(:&quot;en-US&quot;) iex&gt; Bonfire.Common.Localise.Cldr.Locale.locale_for_territory(:ZZ) {:error, {Cldr.UnknownTerritoryError, &quot;The territory :ZZ is unknown&quot;}}","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_for_territory/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.locale_from_host/2","doc":"Returns a &quot;best fit&quot; locale for a host name. Arguments host is any valid host name options is a keyword list of options. The default is [] . Options :tlds is a list of territory codes as upper-cased atoms that are to be considered as top-level domains. See Cldr.Locale.locale_from_host/2 for the default list. Returns {:ok, langauge_tag} or {:error, {exception, reason}} Notes Certain top-level domains have become associated with content underlated to the territory for who the domain is registered. Therefore Google (and perhaps others) do not associate these TLDs as belonging to the territory but rather are considered generic top-level domain names. Examples iex&gt; Bonfire.Common.Localise.Cldr.Locale . locale_from_host &quot;a.b.com.au&quot; Elixir.Bonfire.Common.Localise.Cldr . validate_locale ( :&quot;en-AU&quot; ) iex&gt; Bonfire.Common.Localise.Cldr.Locale . locale_from_host ( &quot;a.b.com.tv&quot; ) { :error , { Cldr.UnknownLocaleError , &quot;No locale was identified for territory \\&quot; tv \\&quot; &quot; } } iex&gt; Bonfire.Common.Localise.Cldr.Locale . locale_from_host ( &quot;a.b.com&quot; ) { :error , { Cldr.UnknownLocaleError , &quot;No locale was identified for territory \\&quot; com \\&quot; &quot; } }","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_from_host/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.new/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Locale.html#new/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.new!/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Locale.html#new!/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.script_direction_from_locale/1","doc":"Returns the script direction for a locale. Arguments language_tag is any language tag returned by Cldr.Locale.new/2 or any locale_name returned by Cldr.known_locale_names/1 . Returns The script direction which is either :ltr (for left-to-right scripts) or :rtl (for right-to-left scripts). Examples iex&gt; Bonfire.Common.Localise.Cldr.Locale . script_direction_from_locale &quot;en-US&quot; :ltr iex&gt; Bonfire.Common.Localise.Cldr.Locale . script_direction_from_locale :ar :rtl","ref":"Bonfire.Common.Localise.Cldr.Locale.html#script_direction_from_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.territory_from_host/1","doc":"Returns the last segment of a host that might be a territory. Arguments host is any valid host name Returns {:ok, territory} or {:error, {exception, reason}} Examples iex&gt; Cldr.Locale . territory_from_host ( &quot;a.b.com.au&quot; ) { :ok , :AU } iex&gt; Cldr.Locale . territory_from_host ( &quot;a.b.com&quot; ) { :error , { Cldr.UnknownLocaleError , &quot;No locale was identified for territory \\&quot; com \\&quot; &quot; } }","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_host/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.territory_from_locale/1","doc":"Returns the territory from a language tag or locale name. Arguments locale is any language tag returned by Bonfire.Common.Localise.Cldr.Locale.new/1 or a locale name in the list returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Returns A territory code as an atom Examples iex&gt; Bonfire.Common.Localise.Cldr.Locale . territory_from_locale &quot;en-US&quot; :US iex&gt; Bonfire.Common.Localise.Cldr.Locale . territory_from_locale &quot;en-US-u-rg-GBzzzz&quot; :GB","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Locale.timezone_from_locale/1","doc":"Returns the time zone from a language tag or locale name. Arguments locale is any language tag returned by Bonfire.Common.Localise.Cldr.Locale.new/1 or a locale name in the list returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 Returns A time zone ID as a string or :error if no time zone can be determined Examples iex&gt; Bonfire.Common.Localise.Cldr.Locale . timezone_from_locale &quot;en-US-u-tz-ausyd&quot; &quot;Australia/Sydney&quot;","ref":"Bonfire.Common.Localise.Cldr.Locale.html#timezone_from_locale/1"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number","doc":"Formats numbers and currencies based upon CLDR's decimal formats specification. The format specification is documentated in Unicode TR35 . There are several classes of formatting including non-scientific, scientific, rules based (for spelling and ordinal formats), compact formats that display 1k rather than 1,000 and so on. See Cldr.Number.to_string/2 for specific formatting options. Non-Scientific Notation Formatting The following description applies to formats that do not use scientific notation or significant digits: If the number of actual integer digits exceeds the maximum integer digits, then only the least significant digits are shown. For example, 1997 is formatted as &quot;97&quot; if the maximum integer digits is set to 2. If the number of actual integer digits is less than the minimum integer digits, then leading zeros are added. For example, 1997 is formatted as &quot;01997&quot; if the minimum integer digits is set to 5. If the number of actual fraction digits exceeds the maximum fraction digits, then half-even rounding it performed to the maximum fraction digits. For example, 0.125 is formatted as &quot;0.12&quot; if the maximum fraction digits is 2. This behavior can be changed by specifying a rounding increment and a rounding mode. If the number of actual fraction digits is less than the minimum fraction digits, then trailing zeros are added. For example, 0.125 is formatted as &quot;0.1250&quot; if the minimum fraction digits is set to 4. Trailing fractional zeros are not displayed if they occur j positions after the decimal, where j is less than the maximum fraction digits. For example, 0.10004 is formatted as &quot;0.1&quot; if the maximum fraction digits is four or less. Scientific Notation Formatting Numbers in scientific notation are expressed as the product of a mantissa and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3. The mantissa is typically in the half-open interval [1.0, 10.0) or sometimes [0.0, 1.0), but it need not be. In a pattern, the exponent character immediately followed by one or more digit characters indicates scientific notation. Example: &quot;0.###E0&quot; formats the number 1234 as &quot;1.234E3&quot;. The number of digit characters after the exponent character gives the minimum exponent digit count. There is no maximum. Negative exponents are formatted using the localized minus sign, not the prefix and suffix from the pattern. This allows patterns such as &quot;0.###E0 m/s&quot;. To prefix positive exponents with a localized plus sign, specify '+' between the exponent and the digits: &quot;0.###E+0&quot; will produce formats &quot;1E+1&quot;, &quot;1E+0&quot;, &quot;1E-1&quot;, and so on. (In localized patterns, use the localized plus sign rather than '+'.) The minimum number of integer digits is achieved by adjusting the exponent. Example: 0.00123 formatted with &quot;00.###E0&quot; yields &quot;12.3E-4&quot;. This only happens if there is no maximum number of integer digits. If there is a maximum, then the minimum number of integer digits is fixed at one. The maximum number of integer digits, if present, specifies the exponent grouping. The most common use of this is to generate engineering notation, in which the exponent is a multiple of three, for example, &quot;##0.###E0&quot;. The number 12345 is formatted using &quot;##0.####E0&quot; as &quot;12.345E3&quot;. When using scientific notation, the formatter controls the digit counts using significant digits logic. The maximum number of significant digits limits the total number of integer and fraction digits that will be shown in the mantissa; it does not affect parsing. For example, 12345 formatted with &quot;##0.##E0&quot; is &quot;12.3E3&quot;. Exponential patterns may not contain grouping separators. Significant Digits There are two ways of controlling how many digits are shows: (a) significant digits counts, or (b) integer and fraction digit counts. Integer and fraction digit counts are described above. When a formatter is using significant digits counts, it uses however many integer and fraction digits are required to display the specified number of significant digits. It may ignore min/max integer/fraction digits, or it may use them to the extent possible.","ref":"Bonfire.Common.Localise.Cldr.Number.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.parse/2","doc":"Parse a string locale-aware manner and return a number. Arguments string is any String.t options is a keyword list of options Options :number is one of :integer , :float , :decimal or nil . The default is nil meaning that the type auto-detected as either an integer or a float . :locale is any locale returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag.t . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Returns A number of the requested or default type or {:error, {exception, error}} if no number could be determined Notes This function parses a string to return a number but in a locale-aware manner. It will normalise grouping characters and decimal separators, different forms of the + and - symbols that appear in Unicode and strips any _ characters that might be used for formatting in a string. It then parses the number using the Elixir standard library functions. Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . parse ( &quot;＋1.000,34&quot; , locale : &quot;de&quot; ) { :ok , 1000.34 } iex&gt; Bonfire.Common.Localise.Cldr.Number . parse ( &quot;-1_000_000.34&quot; ) { :ok , - 1000000.34 } iex&gt; Bonfire.Common.Localise.Cldr.Number . parse ( &quot;1.000&quot; , locale : &quot;de&quot; , number : :integer ) { :ok , 1000 } iex&gt; Bonfire.Common.Localise.Cldr.Number . parse ( &quot;＋1.000,34&quot; , locale : &quot;de&quot; , number : :integer ) { :error , { Cldr.Number.ParseError , &quot;The string \\&quot; ＋1.000,34 \\&quot; could not be parsed as a number&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Number.html#parse/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.resolve_currencies/2","doc":"Resolve curencies from strings within a list. Arguments list is any list in which currency names and symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is Bonfire.Common.Localise.Cldr.get_locale() :only is an atom or list of atoms representing the currencies or currency types to be considered for a match. The equates to a list of acceptable currencies for parsing. See the notes below for currency types. :except is an atom or list of atoms representing the currencies or currency types to be not considered for a match. This equates to a list of unacceptable currencies for parsing. See the notes below for currency types. :fuzzy is a float greater than 0.0 and less than or equal to 1.0 which is used as input to String.jaro_distance/2 to determine is the provided currency string is close enough to a known currency string for it to identify definitively a currency code. It is recommended to use numbers greater than 0.8 in order to reduce false positives. Notes The :only and :except options accept a list of currency codes and/or currency types. The following types are recognised. If both :only and :except are specified, the :except entries take priority - that means any entries in :except are removed from the :only entries. :all , the default, considers all currencies :current considers those currencies that have a :to date of nil and which also is a known ISO4217 currency :historic is the opposite of :current :tender considers currencies that are legal tender :unannotated considers currencies that don't have &quot;(some string)&quot; in their names. These are usually financial instruments. Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;100 US dollars&quot; ) ...&gt; |&gt; Bonfire.Common.Localise.Cldr.Number . resolve_currencies [ 100 , :USD ] iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;100 eurosports&quot; ) ...&gt; |&gt; Bonfire.Common.Localise.Cldr.Number . resolve_currencies ( fuzzy : 0.75 ) [ 100 , :EUR ] iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;100 dollars des États-Unis&quot; ) ...&gt; |&gt; Bonfire.Common.Localise.Cldr.Number . resolve_currencies ( locale : &quot;fr&quot; ) [ 100 , :USD ]","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currencies/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.resolve_currency/2","doc":"Resolve a currency from a string Arguments list is any list in which currency names and symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is Bonfire.Common.Localise.Cldr.get_locale() :only is an atom or list of atoms representing the currencies or currency types to be considered for a match. The equates to a list of acceptable currencies for parsing. See the notes below for currency types. :except is an atom or list of atoms representing the currencies or currency types to be not considered for a match. This equates to a list of unacceptable currencies for parsing. See the notes below for currency types. :fuzzy is a float greater than 0.0 and less than or equal to 1.0 which is used as input to String.jaro_distance/2 to determine is the provided currency string is close enough to a known currency string for it to identify definitively a currency code. It is recommended to use numbers greater than 0.8 in order to reduce false positives. Returns An ISO4217 currency code as an atom or {:error, {exception, message}} Notes The :only and :except options accept a list of currency codes and/or currency types. The following types are recognised. If both :only and :except are specified, the :except entries take priority - that means any entries in :except are removed from the :only entries. :all , the default, considers all currencies :current considers those currencies that have a :to date of nil and which also is a known ISO4217 currency :historic is the opposite of :current :tender considers currencies that are legal tender :unannotated considers currencies that don't have &quot;(some string)&quot; in their names. These are usually financial instruments. Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . resolve_currency ( &quot;US dollars&quot; ) [ :USD ] iex&gt; Bonfire.Common.Localise.Cldr.Number . resolve_currency ( &quot;100 eurosports&quot; , fuzzy : 0.75 ) [ :EUR ] iex&gt; Bonfire.Common.Localise.Cldr.Number . resolve_currency ( &quot;dollars des États-Unis&quot; , locale : &quot;fr&quot; ) [ :USD ] iex&gt; Bonfire.Common.Localise.Cldr.Number . resolve_currency ( &quot;not a known currency&quot; , locale : &quot;fr&quot; ) { :error , { Cldr.UnknownCurrencyError , &quot;The currency \\&quot; not a known currency \\&quot; is unknown or not supported&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currency/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.resolve_per/2","doc":"Resolve and tokenize percent or permille from the beginning and/or the end of a string Arguments list is any list in which percent and permille symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is options[:backend].get_locale() Returns An :percent or permille or {:error, {exception, message}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . resolve_per &quot;11%&quot; [ &quot;11&quot; , :percent ] iex&gt; Bonfire.Common.Localise.Cldr.Number . resolve_per &quot;% of linguists&quot; [ :percent , &quot; of linguists&quot; ] iex&gt; Bonfire.Common.Localise.Cldr.Number . resolve_per &quot;% of linguists %&quot; [ :percent , &quot; of linguists &quot; , :percent ]","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_per/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.resolve_pers/2","doc":"Resolve and tokenize percent and permille sybols from strings within a list. Percent and permille symbols can be identified at the beginning and/or the end of a string. Arguments list is any list in which percent and permille symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a t:Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is options[:backend].get_locale() Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;100%&quot; ) ...&gt; |&gt; Bonfire.Common.Localise.Cldr.Number . resolve_pers ( ) [ 100 , :percent ]","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_pers/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.scan/2","doc":"Scans a string locale-aware manner and returns a list of strings and numbers. Arguments string is any String.t options is a keyword list of options Options :number is one of :integer , :float , :decimal or nil . The default is nil meaning that the type auto-detected as either an integer or a float . :locale is any locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag.t . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Returns A list of strings and numbers Notes Number parsing is performed by Cldr.Number.Parser.parse/2 and any options provided are passed to that function. Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;£1_000_000.34&quot; ) [ &quot;£&quot; , 1000000.34 ] iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;I want £1_000_000 dollars&quot; ) [ &quot;I want £&quot; , 1000000 , &quot; dollars&quot; ] iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;The prize is 23&quot; ) [ &quot;The prize is &quot; , 23 ] iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;The lottery number is 23 for the next draw&quot; ) [ &quot;The lottery number is &quot; , 23 , &quot; for the next draw&quot; ] iex&gt; Bonfire.Common.Localise.Cldr.Number . scan ( &quot;The loss is -1.000 euros&quot; , locale : &quot;de&quot; , number : :integer ) [ &quot;The loss is &quot; , - 1000 , &quot; euros&quot; ]","ref":"Bonfire.Common.Localise.Cldr.Number.html#scan/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.to_approx_string/2","doc":"Formats a number and applies the :approximately format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; Bonfire.Common.Localise.Cldr.Number . to_approx_string 1234 { :ok , &quot;~1,234&quot; }","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_approx_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.to_at_least_string/2","doc":"Formats a number and applies the :at_least format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Bonfire.Common.Localise.Cldr.Number.to_string/2 for a description of the available options. Example iex&gt; Bonfire.Common.Localise.Cldr.Number . to_at_least_string 1234 { :ok , &quot;1,234+&quot; }","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_at_least_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.to_at_most_string/2","doc":"Formats a number and applies the :at_most format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; Bonfire.Common.Localise.Cldr.Number . to_at_most_string 1234 { :ok , &quot;≤1,234&quot; }","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_at_most_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.to_range_string/2","doc":"Formats the first and last numbers of a range and applies the :range format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; Bonfire.Common.Localise.Cldr.Number . to_range_string 1234 .. 5678 { :ok , &quot;1,234–5,678&quot; }","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_range_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.to_string/2","doc":"Returns a number formatted into a string according to a format pattern and options. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. Options format : the format style or a format string defining how the number is formatted. See Cldr.Number.Format for how format strings can be constructed. See Cldr.Number.Format.format_styles_for/3 to return available format styles for a locale. The default format is :standard . If :format is set to :long or :short then the formatting depends on whether :currency is specified. If not specified then the number is formatted as :decimal_long or :decimal_short . If :currency is specified the number is formatted as :currency_long or :currency_short and :fractional_digits is set to 0 as a default. :format may also be a format defined by CLDR's Rules Based Number Formats (RBNF). Further information is found in the module Cldr.Rbnf . The most commonly used formats in this category are to spell out the number in a the locales language. The applicable formats are :spellout , :spellout_year , :ordinal . A number can also be formatted as roman numbers by using the format :roman or :roman_lower . currency : is the currency for which the number is formatted. For available currencies see Cldr.Currency.known_currencies/0 . This option is required if :format is set to :currency . If currency is set and no :format is set, :format will be set to :currency as well. currency_symbol : Allows overriding a currency symbol. The alternatives are: :iso the ISO currency code will be used instead of the default currency symbol. :narrow uses the narrow symbol defined for the locale. The same narrow symbol can be defined for more than one currency and therefore this should be used with care. If no narrow symbol is defined, the standard symbol is used. :symbol uses the standard symbol defined in CLDR. A symbol is unique for each currency and can be safely used. &quot;string&quot; uses string as the currency symbol :standard (the default and recommended) uses the CLDR-defined symbol based upon the currency format for the locale. :cash : a boolean which indicates whether a number being formatted as a :currency is to be considered a cash value or not. Currencies can be rounded differently depending on whether :cash is true or false . *This option is deprecated in favour of currency_digits: :cash . :currency_digits indicates which of the rounding and digits should be used. The options are :accounting which is the default, :cash or :iso :rounding_mode : determines how a number is rounded to meet the precision of the format requested. The available rounding modes are :down , :half_up, :half_even, :ceiling, :floor, :half_down, :up. The default is :half_even . :number_system : determines which of the number systems for a locale should be used to define the separators and digits for the formatted number. If number_system is an atom then number_system is interpreted as a number system. If the :number_system is binary then it is interpreted as a number system name. See Cldr.Number.System.number_system_names_for/2 . The default is :default . :locale : determines the locale in which the number is formatted. See Cldr.known_locale_names/0 . The default is Cldr.get_locale/0 which is the locale currently in affect for this Process and which is set by Cldr.put_locale/1 . If :fractional_digits is set to a positive integer value then the number will be rounded to that number of digits and displayed accordingly - overriding settings that would be applied by default. For example, currencies have fractional digits defined reflecting each currencies minor unit. Setting :fractional_digits will override that setting. If :maximum_integer_digits is set to a positive integer value then the number is left truncated before formatting. For example if the number 1234 is formatted with the option maximum_integer_digits: 2 , the number is truncated to 34 and formatted. If :round_nearest is set to a positive integer value then the number will be rounded to nearest increment of that value - overriding settings that would be applied by default. :minimum_grouping_digits overrides the CLDR definition of minimum grouping digits. For example in the locale es the number 1234 is formatted by default as 1345 because the locale defines the minimium_grouping_digits as 2 . If minimum_grouping_digits: 1 is set as an option the number is formatting as 1.345 . The :minimum_grouping_digits is added to the grouping defined by the number format. If the sum of these two digits is greater than the number of digits in the integer (or fractional) part of the number then no grouping is performed. :wrapper is a 2-arity function that will be called for each number component with parameters string and tag where tag is one of :number , :currency_symbol , :currency_space , :literal , :quote , :percent , :permille , :minus or :plus . The function must return a string. The function can be used to wrap format elements in HTML or other tags. Locale extensions affecting formatting A locale identifier can specify options that affect number formatting. These options are: nu : defines the number system to be used if none is specified by the :number_system option to to_string/2 This key is part of the u extension and that document should be consulted for details on how to construct a locale identifier with these extensions. Wrapping format elements Wrapping elements is particularly useful when formatting a number with a currency symbol and the requirement is to have different HTML formatting applied to the symbol than the number. For example: iex&gt; Cldr.Number . to_string ( 100 , format : :currency , currency : :USD , wrapper : fn ...&gt; string , :currency_symbol -&gt; &quot;&lt;span class= \\&quot; symbol \\&quot; &gt;&quot; &lt;&gt; string &lt;&gt; &quot;&lt;/span&gt;&quot; ...&gt; string , :number -&gt; &quot;&lt;span class= \\&quot; number \\&quot; &gt;&quot; &lt;&gt; string &lt;&gt; &quot;&lt;/span&gt;&quot; ...&gt; string , :currency_space -&gt; &quot;&lt;span&gt;&quot; &lt;&gt; string &lt;&gt; &quot;&lt;/span&gt;&quot; ...&gt; string , _other -&gt; string ...&gt; end ) { :ok , &quot;&lt;span class= \\&quot; symbol \\&quot; &gt;$&lt;/span&gt;&lt;span class= \\&quot; number \\&quot; &gt;100.00&lt;/span&gt;&quot; } It is also possible and recommended to use the Phoenix.HTML.Tag.content_tag/3 function if wrapping HTML tags since these will ensure HTML entities are correctly encoded. For example: iex&gt; Cldr.Number . to_string ( 100 , format : :currency , currency : :USD , wrapper : fn ...&gt; string , :currency_symbol -&gt; Phoenix.HTML.Tag . content_tag ( :span , string , class : &quot;symbol&quot; ) ...&gt; string , :number -&gt; Phoenix.HTML.Tag . content_tag ( :span , string , class : &quot;number&quot; ) ...&gt; string , :currency_space -&gt; Phoenix.HTML.Tag . content_tag ( :span , string ) ...&gt; string , _other -&gt; string ...&gt; end ) { :ok , &quot;&lt;span class= \\&quot; symbol \\&quot; &gt;$&lt;/span&gt;&lt;span class= \\&quot; number \\&quot; &gt;100.00&lt;/span&gt;&quot; } When formatting a number the format is parsed into format elements that might include a currency symbol, a literal string, inserted text between a currency symbol and the currency amount, a percent sign, the number itself and several other elements. In some cases it is helpful to be apply specific formatting to each element. This can be achieved by specifying a :wrapper option. This option takes a 2-arity function as an argument. For each element of the format the wrapper function is called with two parameters: the format element as a string and an atom representing the element type. The wrapper function is required to return a string that is then inserted in the final formatted number. Returns {:ok, string} or {:error, {exception, message}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 12345 { :ok , &quot;12,345&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 12345 , locale : &quot;fr&quot; { :ok , &quot;12 345&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1345.32 , currency : :EUR , locale : &quot;es&quot; , minimum_grouping_digits : 1 { :ok , &quot;1.345,32 €&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1345.32 , currency : :EUR , locale : &quot;es&quot; { :ok , &quot;1345,32 €&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 12345 , locale : &quot;fr&quot; , currency : &quot;USD&quot; { :ok , &quot;12 345,00 $US&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 12345 , format : &quot;#E0&quot; { :ok , &quot;1.2345E4&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; { :ok , &quot;THB 12,345.00&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string - 12345 , format : :accounting , currency : &quot;THB&quot; { :ok , &quot;(THB 12,345.00)&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; , ...&gt; locale : &quot;th&quot; { :ok , &quot;฿12,345.00&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; , ...&gt; locale : &quot;th&quot; , number_system : :native { :ok , &quot;฿๑๒,๓๔๕.๐๐&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1244.30 , format : :long { :ok , &quot;1 thousand&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1244.30 , format : :long , currency : &quot;USD&quot; { :ok , &quot;1,244 US dollars&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1244.30 , format : :short { :ok , &quot;1K&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1244.30 , format : :short , currency : &quot;EUR&quot; { :ok , &quot;€1K&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1234 , format : :spellout { :ok , &quot;one thousand two hundred thirty-four&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1234 , format : :spellout_verbose { :ok , &quot;one thousand two hundred and thirty-four&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 1989 , format : :spellout_year { :ok , &quot;nineteen eighty-nine&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 123 , format : :ordinal { :ok , &quot;123rd&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 123 , format : :roman { :ok , &quot;CXXIII&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string 123 , locale : &quot;th-u-nu-thai&quot; { :ok , &quot;๑๒๓&quot; } Errors An error tuple {:error, reason} will be returned if an error is detected. The two most likely causes of an error return are: A format cannot be compiled. In this case the error tuple will look like: iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string ( 12345 , format : &quot;0#&quot; ) { :error , { Cldr.FormatCompileError , &quot;Decimal format compiler: syntax error before: \\&quot; # \\&quot; &quot; } } The format style requested is not defined for the locale and number_system . This happens typically when the number system is :algorithmic rather than the more common :numeric . In this case the error return looks like: iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string ( 1234 , locale : &quot;he&quot; , number_system : &quot;hebr&quot; ) { :error , { Cldr.UnknownFormatError , &quot;The locale :he with number system :hebr does not define a format :standard&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.to_string!/2","doc":"Same as the execution of to_string/2 but raises an exception if an error would be returned. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Bonfire.Common.Localise.Cldr.Number.to_string/2 Returns a formatted number as a string or raises an exception Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string! 12345 &quot;12,345&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string! 12345 , locale : &quot;fr&quot; &quot;12 345&quot;","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string!/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.validate_number_system/2","doc":"Return a valid number system from a provided locale and number system name or type. The number system or number system type must be valid for the given locale. If a number system type is provided, the underlying number system is returned. Arguments locale is any valid locale name returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 Examples iex&gt; Bonfire.Common.Localise.Cldr.Number . validate_number_system &quot;en&quot; , :latn { :ok , :latn } iex&gt; Bonfire.Common.Localise.Cldr.Number . validate_number_system &quot;en&quot; , :default { :ok , :latn } iex&gt; Bonfire.Common.Localise.Cldr.Number . validate_number_system &quot;en&quot; , :unknown { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :unknown is unknown&quot; } } iex&gt; Bonfire.Common.Localise.Cldr.Number . validate_number_system &quot;zz&quot; , :default { :error , { Cldr.InvalidLanguageError , &quot;The language \\&quot; zz \\&quot; is invalid&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Number.html#validate_number_system/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal","doc":"Implements cardinal plural rules for numbers.","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.available_locale_names/0","doc":"The locale names for which plural rules are defined.","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#available_locale_names/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.known_locale_names/0","doc":"The configured locales for which plural rules are defined. Returns the intersection of Bonfire.Common.Localise.Cldr.known_locale_names/0 and the locales for which Cardinal plural rules are defined. There are many Cldr locales which don't have their own plural rules so this list is the intersection of Cldr 's configured locales and those that have rules.","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#known_locale_names/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rule/3","doc":"Return the plural key for a given number in a given locale Returns which plural key ( :zero , :one , :two , :few , :many or :other ) a given number fits into within the context of a given locale. Note that these key names should not be interpreted literally. For example, the key returned from Cldr.Number.Ordinal.plural_rule(0, &quot;en&quot;) is actually :other , not :zero . This key can then be used to format a number, date, time, unit, list or other content in a plural-sensitive way. Arguments number is any integer , float or Decimal locale is any locale returned by Cldr.Locale.new!/2 or any locale_name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 rounding is one of [:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down] . The default is :half_even . Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . plural_rule 0 , &quot;fr&quot; :one iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . plural_rule 0 , &quot;en&quot; :other","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rule/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rules/0","doc":"Returns all the plural rules defined in CLDR.","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rules/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rules_for/1","doc":"Return the plural rules for a locale. Arguments locale is any locale returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 or any locale_name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 The rules are returned in AST form after parsing.","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rules_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize/3","doc":"Pluralize a number using cardinal plural rules and a substitution map. Arguments number is an integer, float or Decimal locale is any locale returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 or any locale_name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 substitutions is a map that maps plural keys to a string. The valid substitution keys are :zero , :one , :two , :few , :many and :other . See also Bonfire.Common.Localise.Cldr.Number.Cardinal.Cardinal.plural_rule/3 . Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize 1 , &quot;en&quot; , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize 2 , &quot;en&quot; , %{ one : &quot;one&quot; } nil iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize 2 , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize 22 , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize Decimal . new ( 1 ) , &quot;en&quot; , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize Decimal . new ( 2 ) , &quot;en&quot; , %{ one : &quot;one&quot; } nil iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize Decimal . new ( 2 ) , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; } nil iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize 1 .. 10 , &quot;ar&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;few&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Cardinal . pluralize 1 .. 10 , &quot;en&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot;","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#pluralize/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number.Format","doc":"Functions to manage the collection of number patterns defined in Cldr. Number patterns affect how numbers are interpreted in a localized context. Here are some examples, based on the French locale. The &quot;.&quot; shows where the decimal point should go. The &quot;,&quot; shows where the thousands separator should go. A &quot;0&quot; indicates zero-padding: if the number is too short, a zero (in the locale's numeric set) will go there. A &quot;#&quot; indicates no padding: if the number is too short, nothing goes there. A &quot;¤&quot; shows where the currency sign will go. The following illustrates the effects of different patterns for the French locale, with the number &quot;1234.567&quot;. Notice how the pattern characters ',' and '.' are replaced by the characters appropriate for the locale. Number Pattern Examples Pattern Currency Text #,##0.## n/a 1 234,57 #,##0.### n/a 1 234,567 ###0.##### n/a 1234,567 ###0.0000# n/a 1234,5670 00000.0000 n/a 01234,5670 #,##0.00 ¤ EUR 1 234,57 € The number of # placeholder characters before the decimal do not matter, since no limit is placed on the maximum number of digits. There should, however, be at least one zero some place in the pattern. In currency formats, the number of digits after the decimal also do not matter, since the information in the supplemental data (see Supplemental Currency Data) is used to override the number of decimal places — and the rounding — according to the currency that is being formatted. That can be seen in the above chart, with the difference between Yen and Euro formatting. Details of the number formats are described in the Unicode documentation","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.all_formats_for/1","doc":"Returns the decimal formats defined for a given locale. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Returns {:ok, map} where map is a map of decimal formats keyed by number system or {:error, {exception, message}}","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#all_formats_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.all_formats_for!/1","doc":"Returns the decimal formats defined for a given locale. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Returns {:ok, map} where map is a map of decimal formats keyed by number system or raises an exception See Bonfire.Common.Localise.Cldr.Number.Format.Number.Format.all_formats_for/1 for further information.","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#all_formats_for!/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.currency_spacing/2","doc":"Returns the currency space for a given locale and number system.","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#currency_spacing/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.decimal_format_list/0","doc":"Returns the list of decimal formats in the configured locales including the list of locales configured for precompilation in config.exs . This function exists to allow the decimal formatter to precompile all the known formats at compile time. Example #=&gt; Bonfire.Common.Localise.Cldr.Number.Format.Format.decimal_format_list [ &quot;#&quot; , &quot;#,##,##0%&quot; , &quot;#,##,##0.###&quot; , &quot;#,##,##0.00¤&quot; , &quot;#,##,##0.00¤;(#,##,##0.00¤)&quot; , &quot;#,##,##0 %&quot; , &quot;#,##0%&quot; , &quot;#,##0.###&quot; , &quot;#,##0.00 ¤&quot; , &quot;#,##0.00 ¤;(#,##0.00 ¤)&quot; , &quot;#,##0.00¤&quot; , &quot;#,##0.00¤;(#,##0.00¤)&quot; , &quot;#,##0 %&quot; , &quot;#0%&quot; , &quot;#0.######&quot; , &quot;#0.00 ¤&quot; , &quot;#E0&quot; , &quot;%#,##0&quot; , &quot;% #,##0&quot; , &quot;0&quot; , &quot;0.000000E+000&quot; , &quot;0000 M ¤&quot; , &quot;0000¤&quot; , &quot;000G ¤&quot; , &quot;000K ¤&quot; , &quot;000M ¤&quot; , &quot;000T ¤&quot; , &quot;000mM ¤&quot; , &quot;000m ¤&quot; , &quot;000 Bio&#39;.&#39; ¤&quot; , &quot;000 Bln ¤&quot; , &quot;000 Bn ¤&quot; , &quot;000 B ¤&quot; , &quot;000 E ¤&quot; , &quot;000 K ¤&quot; , &quot;000 MRD ¤&quot; , &quot;000 Md ¤&quot; , &quot;000 Mio&#39;.&#39; ¤&quot; , &quot;000 Mio ¤&quot; , &quot;000 Mld ¤&quot; , &quot;000 Mln ¤&quot; , &quot;000 Mn ¤&quot; , &quot;000 Mrd&#39;.&#39; ¤&quot; , &quot;000 Mrd ¤&quot; , &quot;000 Mr ¤&quot; , &quot;000 M ¤&quot; , &quot;000 NT ¤&quot; , &quot;000 N ¤&quot; , &quot;000 Tn ¤&quot; , &quot;000 Tr ¤&quot; , ... ]","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#decimal_format_list/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.decimal_format_list_for/1","doc":"Returns the list of decimal formats for a configured locale. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . This function exists to allow the decimal formatter to precompile all the known formats at compile time. Its use is not otherwise recommended. Example iex&gt; Bonfire.Common.Localise.Cldr.Number.Format . decimal_format_list_for ( :en ) { :ok , [ &quot;#,##0%&quot; , &quot;#,##0.###&quot; , &quot;#,##0.00&quot; , &quot;#,##0.00;(#,##0.00)&quot; , &quot;#E0&quot; , &quot;0 billion&quot; , &quot;0 million&quot; , &quot;0 thousand&quot; , &quot;0 trillion&quot; , &quot;00 billion&quot; , &quot;00 million&quot; , &quot;00 thousand&quot; , &quot;00 trillion&quot; , &quot;000 billion&quot; , &quot;000 million&quot; , &quot;000 thousand&quot; , &quot;000 trillion&quot; , &quot;000B&quot; , &quot;000K&quot; , &quot;000M&quot; , &quot;000T&quot; , &quot;00B&quot; , &quot;00K&quot; , &quot;00M&quot; , &quot;00T&quot; , &quot;0B&quot; , &quot;0K&quot; , &quot;0M&quot; , &quot;0T&quot; , &quot;¤#,##0.00&quot; , &quot;¤#,##0.00;(¤#,##0.00)&quot; , &quot;¤000B&quot; , &quot;¤000K&quot; , &quot;¤000M&quot; , &quot;¤000T&quot; , &quot;¤00B&quot; , &quot;¤00K&quot; , &quot;¤00M&quot; , &quot;¤00T&quot; , &quot;¤0B&quot; , &quot;¤0K&quot; , &quot;¤0M&quot; , &quot;¤0T&quot; , &quot;¤ #,##0.00&quot; , &quot;¤ #,##0.00;(¤ #,##0.00)&quot; , &quot;¤ 000B&quot; , &quot;¤ 000K&quot; , &quot;¤ 000M&quot; , &quot;¤ 000T&quot; , &quot;¤ 00B&quot; , &quot;¤ 00K&quot; , &quot;¤ 00M&quot; , &quot;¤ 00T&quot; , &quot;¤ 0B&quot; , &quot;¤ 0K&quot; , &quot;¤ 0M&quot; , &quot;¤ 0T&quot; ] }","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#decimal_format_list_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for/1","doc":"Returns the default grouping for a locale as a map. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Returns {:ok, grouping} or {:error, {exception, message}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Format . default_grouping_for ( :en ) { :ok , %{ fraction : %{ first : 0 , rest : 0 } , integer : %{ first : 3 , rest : 3 } } }","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for!/1","doc":"Returns the default grouping for a locale or raises on error. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Returns grouping as a map or raises an exception Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Format . default_grouping_for! ( :en ) %{ fraction : %{ first : 0 , rest : 0 } , integer : %{ first : 3 , rest : 3 } }","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for!/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.formats_for/2","doc":"Return the predfined formats for a given locale and number_system . Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . number_system is any valid number system or number system type returned by Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1 . Example Bonfire.Common.Localise.Cldr.Number.Format . formats_for :fr , :native #=&gt; %Cldr.Number.Format{ accounting : &quot;#,##0.00 ¤;(#,##0.00 ¤)&quot; , currency : &quot;#,##0.00 ¤&quot; , percent : &quot;#,##0 %&quot; , scientific : &quot;#E0&quot; , standard : &quot;#,##0.###&quot; currency_short : [ { &quot;1000&quot; , [ one : &quot;0 k ¤&quot; , other : &quot;0 k ¤&quot; ] } , { &quot;10000&quot; , [ one : &quot;00 k ¤&quot; , other : &quot;00 k ¤&quot; ] } , { &quot;100000&quot; , [ one : &quot;000 k ¤&quot; , other : &quot;000 k ¤&quot; ] } , { &quot;1000000&quot; , [ one : &quot;0 M ¤&quot; , other : &quot;0 M ¤&quot; ] } , { &quot;10000000&quot; , [ one : &quot;00 M ¤&quot; , other : &quot;00 M ¤&quot; ] } , { &quot;100000000&quot; , [ one : &quot;000 M ¤&quot; , other : &quot;000 M ¤&quot; ] } , { &quot;1000000000&quot; , [ one : &quot;0 Md ¤&quot; , other : &quot;0 Md ¤&quot; ] } , { &quot;10000000000&quot; , [ one : &quot;00 Md ¤&quot; , other : &quot;00 Md ¤&quot; ] } , { &quot;100000000000&quot; , [ one : &quot;000 Md ¤&quot; , other : &quot;000 Md ¤&quot; ] } , { &quot;1000000000000&quot; , [ one : &quot;0 Bn ¤&quot; , other : &quot;0 Bn ¤&quot; ] } , { &quot;10000000000000&quot; , [ one : &quot;00 Bn ¤&quot; , other : &quot;00 Bn ¤&quot; ] } , { &quot;100000000000000&quot; , [ one : &quot;000 Bn ¤&quot; , other : &quot;000 Bn ¤&quot; ] } ] , ... }","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#formats_for/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.formats_for!/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#formats_for!/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for/1","doc":"Returns the minimum grouping digits for a locale. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Returns {:ok, minumum_digits} or {:error, {exception, message}} Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Format . minimum_grouping_digits_for ( &quot;en&quot; ) { :ok , 1 }","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for!/1","doc":"Returns the minimum grouping digits for a locale or raises on error. Arguments locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Returns minumum_digits or raises an exception Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Format . minimum_grouping_digits_for! ( &quot;en&quot; ) 1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for!/1"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.metadata!/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.html#metadata!/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.to_string/3","doc":"Formats a number according to a decimal format string. Arguments number is an integer, float or Decimal format is a format string. See Bonfire.Common.Localise.Cldr.Number for further information. options is a map of options. See Bonfire.Common.Localise.Cldr.Number.to_string/2 for further information.","ref":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.html#to_string/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal","doc":"Implements ordinal plural rules for numbers.","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.available_locale_names/0","doc":"The locale names for which plural rules are defined.","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#available_locale_names/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.known_locale_names/0","doc":"The configured locales for which plural rules are defined. Returns the intersection of Bonfire.Common.Localise.Cldr.known_locale_names/0 and the locales for which Ordinal plural rules are defined. There are many Cldr locales which don't have their own plural rules so this list is the intersection of Cldr 's configured locales and those that have rules.","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#known_locale_names/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rule/3","doc":"Return the plural key for a given number in a given locale Returns which plural key ( :zero , :one , :two , :few , :many or :other ) a given number fits into within the context of a given locale. Note that these key names should not be interpreted literally. For example, the key returned from Cldr.Number.Ordinal.plural_rule(0, &quot;en&quot;) is actually :other , not :zero . This key can then be used to format a number, date, time, unit, list or other content in a plural-sensitive way. Arguments number is any integer , float or Decimal locale is any locale returned by Cldr.Locale.new!/2 or any locale_name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 rounding is one of [:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down] . The default is :half_even . Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . plural_rule 0 , &quot;fr&quot; :other iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . plural_rule 1 , &quot;en&quot; :one","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rule/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rules/0","doc":"Returns all the plural rules defined in CLDR.","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rules/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rules_for/1","doc":"Return the plural rules for a locale. Arguments locale is any locale returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 or any locale_name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 The rules are returned in AST form after parsing.","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rules_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize/3","doc":"Pluralize a number using ordinal plural rules and a substitution map. Arguments number is an integer, float or Decimal or a Range.t{} . When a range, The is that in any usage, the start value is strictly less than the end value, and that no values are negative. Results for any cases that do not meet these criteria are undefined. locale is any locale returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 or any locale_name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 substitutions is a map that maps plural keys to a string. The valid substitution keys are :zero , :one , :two , :few , :many and :other . See also Bonfire.Common.Localise.Cldr.Number.Ordinal.Ordinal.plural_rule/3 . Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize 1 , :en , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize 2 , :en , %{ one : &quot;one&quot; } nil iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize 2 , :en , %{ one : &quot;one&quot; , two : &quot;two&quot; } &quot;two&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize 22 , :en , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;two&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize Decimal . new ( 1 ) , :en , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize Decimal . new ( 2 ) , :en , %{ one : &quot;one&quot; } nil iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize Decimal . new ( 2 ) , :en , %{ one : &quot;one&quot; , two : &quot;two&quot; } &quot;two&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize 1 .. 10 , &quot;ar&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Ordinal . pluralize 1 .. 10 , &quot;en&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot;","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#pluralize/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range","doc":"Implements plural rules for ranges","ref":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.plural_rule/3","doc":"Returns a final plural type for a start-of-range plural type, an end-of-range plural type and a locale. Arguments first is a plural type for the start of a range last is a plural type for the end of a range locale is any Cldr.LanguageTag.t or a language name (not locale name) Example iex&gt; Bonfire.Common.Localise.Cldr.Number.PluralRule.Range . plural_rule :other , :few , &quot;ar&quot; :few","ref":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.html#plural_rule/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number.Symbol","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.all_decimal_symbols/0","doc":"Returns a list of all decimal symbols defined by the locales configured in this backend as a list.","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#all_decimal_symbols/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.all_decimal_symbols_class/0","doc":"Returns a list of all decimal symbols defined by the locales configured in this backend as a string. This string can be used as a character class when builing a regular expression.","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#all_decimal_symbols_class/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.all_grouping_symbols/0","doc":"Returns a list of all grouping symbols defined by the locales configured in this backend as a list.","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#all_grouping_symbols/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.all_grouping_symbols_class/0","doc":"Returns a list of all grouping symbols defined by the locales configured in this backend as a string. This string can be used as a character class when builing a regular expression.","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#all_grouping_symbols_class/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for/1","doc":"Returns a map of Cldr.Number.Symbol.t structs of the number symbols for each of the number systems of a locale. Options locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 . The default is Bonfire.Common.Localise.Cldr.get_locale/0 . Example: iex&gt; Bonfire.Common.Localise.Cldr.Number.Symbol . number_symbols_for ( :th ) { :ok , %{ latn : % Cldr.Number.Symbol { decimal : &quot;.&quot; , exponential : &quot;E&quot; , group : &quot;,&quot; , infinity : &quot;∞&quot; , list : &quot;;&quot; , minus_sign : &quot;-&quot; , nan : &quot;NaN&quot; , per_mille : &quot;‰&quot; , percent_sign : &quot;%&quot; , plus_sign : &quot;+&quot; , superscripting_exponent : &quot;×&quot; , time_separator : &quot;:&quot; } , thai : % Cldr.Number.Symbol { decimal : &quot;.&quot; , exponential : &quot;E&quot; , group : &quot;,&quot; , infinity : &quot;∞&quot; , list : &quot;;&quot; , minus_sign : &quot;-&quot; , nan : &quot;NaN&quot; , per_mille : &quot;‰&quot; , percent_sign : &quot;%&quot; , plus_sign : &quot;+&quot; , superscripting_exponent : &quot;×&quot; , time_separator : &quot;:&quot; } } }","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#number_symbols_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#number_symbols_for/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number.System","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.System.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_for/2","doc":"Returns the actual number system from a number system type. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 This function will decode a number system type into the actual number system. If the number system provided can't be decoded it is returned as is. Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_for &quot;th&quot; , :latn { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_for &quot;en&quot; , :default { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_for &quot;he&quot; , :traditional { :ok , %{ rules : &quot;hebrew&quot; , type : :algorithmic } } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_for &quot;en&quot; , :native { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_for &quot;en&quot; , :finance { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :finance is unknown for the locale named :en. Valid number systems are %{default: :latn, native: :latn}&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_for/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_from_locale/1","doc":"Returns the number system from a language tag or locale name. Arguments locale is any language tag returned be Cldr.Locale.new/2 or a locale name in the list returned by Cldr.known_locale_names/1 Returns A number system name as an atom Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_from_locale &quot;en-US-u-nu-thai&quot; :thai iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_from_locale &quot;en-US&quot; :latn","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_from_locale/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_names_for/1","doc":"Returns the number systems available for a locale or {:error, message} if the locale is not known. locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_names_for &quot;en&quot; { :ok , [ :latn ] } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_system_names_for &quot;zz&quot; { :error , { Cldr.InvalidLanguageError , &quot;The language \\&quot; zz \\&quot; is invalid&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_names_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_names_for!/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_names_for!/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_types_for/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_types_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1","doc":"Returns the number systems available for a locale or {:error, message} if the locale is not known. locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_systems_for &quot;en&quot; { :ok , %{ default : :latn , native : :latn } } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_systems_for &quot;th&quot; { :ok , %{ default : :latn , native : :thai } } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . number_systems_for &quot;zz&quot; { :error , { Cldr.InvalidLanguageError , &quot;The language \\&quot; zz \\&quot; is invalid&quot; } }","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_systems_for/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.number_systems_for!/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_systems_for!/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.number_systems_like/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_systems_like/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.system_name_from/2","doc":"Returns a number system name for a given locale and number system reference. system_name is any number system name returned by Bonfire.Common.Localise.Cldr.known_number_systems/0 or a number system type returned by Bonfire.Common.Localise.Cldr.known_number_system_types/0 locale is any valid locale name returned by Bonfire.Common.Localise.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Bonfire.Common.Localise.Cldr.Locale.new!/1 Number systems can be references in one of two ways: As a number system type such as :default, :native, :traditional and :finance. This allows references to a number system for a locale in a consistent fashion for a given use WIth the number system name directly, such as :latn, :arab or any of the other 70 or so This function dereferences the supplied system_name and returns the actual system name. Examples ex &gt; Bonfire.Common.Localise.Cldr.Number.System . system_name_from ( :default , &quot;en&quot; ) { :ok , :latn } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . system_name_from ( &quot;latn&quot; , &quot;en&quot; ) { :ok , :latn } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . system_name_from ( :native , &quot;en&quot; ) { :ok , :latn } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . system_name_from ( :nope , &quot;en&quot; ) { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :nope is unknown&quot; } } Note that return value is not guaranteed to be a valid number system for the given locale as demonstrated in the third example.","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#system_name_from/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.to_system/2","doc":"Converts a number into the representation of a non-latin number system. This function converts numbers to a known number system only, it does not provide number formatting. number is a float , integer or Decimal system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 There are two types of number systems in CLDR: :numeric in which the number system defines a direct mapping between the latin digits 0..9 into a the number system equivalent. In this case, to_system/2 invokes Cldr.Number.Transliterate.transliterate_digits/3 for the given number. :algorithmic in which the number system does not have the same structure as the :latn number system and therefore the conversion is done algorithmically. For CLDR the algorithm is implemented through Cldr.Rbnf rulesets. These rulesets are considered by CLDR to be less rigorous than the :numeric number systems and caution and testing for a specific use case is recommended. Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.System . to_system 123456 , :hebr { :ok , &quot;קכ״ג׳תנ״ו&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . to_system 123 , :hans { :ok , &quot;一百二十三&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . to_system 123 , :hant { :ok , &quot;一百二十三&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Number.System . to_system 123 , :hansfin { :ok , &quot;壹佰贰拾叁&quot; }","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#to_system/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.System.to_system!/2","doc":"Converts a number into the representation of a non-latin number system. Returns a converted string or raises on error. number is a float , integer or Decimal system_name is any number system name returned by Bonfire.Common.Localise.Cldr.known_number_systems/0 or a number system type returned by Bonfire.Common.Localise.Cldr.known_number_system_types/0 See Bonfire.Common.Localise.Cldr.Number.System.to_system/2 for further information. Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.System . to_system! 123 , :hans &quot;一百二十三&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.System . to_system! 123 , :hant &quot;一百二十三&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.System . to_system! 123 , :hansfin &quot;壹佰贰拾叁&quot;","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#to_system!/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Number.Transliterate","doc":"Transliteration for digits and separators. Transliterating a string is an expensive business. First the string has to be exploded into its component graphemes. Then for each grapheme we have to map to the equivalent in the other {locale, number_system} . Then we have to reassemble the string. Effort is made to short circuit where possible. Transliteration is not required for any {locale, number_system} that is the same as {&quot;en&quot;, &quot;latn&quot;} since the implementation uses this combination for the placeholders during formatting already. When short circuiting is possible (typically the en-* locales with &quot;latn&quot; number_system - the total number of short circuited locales is 211 of the 537 in CLDR) the overall number formatting is twice as fast than when formal transliteration is required. Configuring precompilation of digit transliterations This module includes Cldr.Number.Transliterate.transliterate_digits/3 which transliterates digits between number systems. For example from :arabic to :latn. Since generating a transliteration map is slow, pairs of transliterations can be configured so that the transliteration map is created at compile time and therefore speeding up transliteration at run time. To configure these transliteration pairs, add the to the use Cldr configuration in a backend module: defmodule MyApp.Cldr do use Cldr , locale : [ &quot;en&quot; , &quot;fr&quot; , &quot;th&quot; ] , default_locale : &quot;en&quot; , precompile_transliterations : [ { :latn , :thai } , { :arab , :thai } ] end Where each tuple in the list configures one transliteration map. In this example, two maps are configured: from :latn to :thai and from :arab to :thai . A list of configurable number systems is returned by Cldr.Number.System.systems_with_digits/0 . If a transliteration is requested between two number pairs that have not been configured for precompilation, a warning is logged.","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate/3","doc":"Transliterates from latin digits to another number system's digits. Transliterates the latin digits 0..9 to their equivalents in another number system. Also transliterates the decimal and grouping separators as well as the plus, minus and exponent symbols. Any other character in the string will be returned &quot;as is&quot;. Arguments sequence is the string to be transliterated. locale is any known locale, defaulting to Bonfire.Common.Localise.Cldr.get_locale/0 . number_system is any known number system. If expressed as a string it is the actual name of a known number system. If epressed as an atom it is used as a key to look up a number system for the locale (the usual keys are :default and :native but :traditional and :finance are also part of the standard). See Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1 for a locale to see what number system types are defined. The default is :default . For available number systems see Cldr.Number.System.number_systems/0 and Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1 . Also see Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for/1 . Examples iex&gt; Bonfire.Common.Localise.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; ) &quot;123556&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Transliterate . transliterate ( &quot;123,556.000&quot; , &quot;fr&quot; , :default ) &quot;123 556,000&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , :default ) &quot;123556&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , &quot;thai&quot; ) &quot;๑๒๓๕๕๖&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , :native ) &quot;๑๒๓๕๕๖&quot; iex&gt; Bonfire.Common.Localise.Cldr.Number.Transliterate . transliterate ( &quot;Some number is: 123556&quot; , &quot;th&quot; , &quot;thai&quot; ) &quot;Some number is: ๑๒๓๕๕๖&quot;","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate!/3","doc":"","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate!/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate_digits/3","doc":"Transliterates digits from one number system to another number system digits is binary representation of a number from_system and to_system are number system names in atom form. See Cldr.Number.System.systems_with_digits/0 for available number systems. Example iex&gt; Bonfire.Common.Localise.Cldr.Number.Transliterate . transliterate_digits &quot;٠١٢٣٤٥٦٧٨٩&quot; , :arab , :latn &quot;0123456789&quot;","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate_digits/3"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem","doc":"Functions to implement the number system rule-based-number-format rules of CLDR. These rules are defined only on the &quot;und&quot; locale and represent specialised number formatting. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem . rule_sets ( :und ) ...&gt; |&gt; Enum . sort ( ) [ :armenian_lower , :armenian_upper , :cyrillic_lower , :ethiopic , :georgian , :greek_lower , :greek_upper , :hebrew , :hebrew_item , :roman_lower , :roman_upper , :tamil , :zz_default ] A rule can then be invoked on an available rule_set. For example iex&gt; Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem . roman_upper ( 123 , :und ) &quot;CXXIII&quot; This particular call is equivalent to the call through the public API of: iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string ( 123 , format : :roman ) { :ok , &quot;CXXIII&quot; }","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.all_rule_sets/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#all_rule_sets/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.armenian_lower/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#armenian_lower/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.armenian_lower/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#armenian_lower/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.armenian_upper/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#armenian_upper/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.armenian_upper/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#armenian_upper/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower_1_10/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_1_10/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower_final/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_final/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower_post/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_post/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower_thousands/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_thousands/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic_p1/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic_p1/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic_p2/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic_p2/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic_p3/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic_p3/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic_p/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic_p/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.georgian/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#georgian/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.georgian/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#georgian/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_lower/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_lower/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_lower/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_lower/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_numeral_majuscules/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_numeral_majuscules/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_numeral_minuscules/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_numeral_minuscules/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_upper/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_upper/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_upper/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_upper/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_0_99/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_0_99/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_item/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_item/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_item/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_item/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_item_hundreds/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_item_hundreds/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_thousands/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_thousands/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_lower/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#roman_lower/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_lower/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#roman_lower/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_upper/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#roman_upper/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_upper/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#roman_upper/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.rule_sets/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#rule_sets/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.rule_sets/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#rule_sets/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.tamil/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#tamil/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.tamil/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#tamil/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.tamil_thousands/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#tamil_thousands/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.zz_default/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#zz_default/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.zz_default/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#zz_default/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal","doc":"Functions to implement the ordinal rule-based-number-format rules of CLDR. As CLDR notes, the data is incomplete or non-existent for many languages. It is considered complete for English however. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; Bonfire.Common.Localise.Cldr.Rbnf.Ordinal . rule_sets ( :en ) [ :digits_ordinal ] iex&gt; Bonfire.Common.Localise.Cldr.Rbnf.Ordinal . rule_sets ( &quot;fr&quot; ) ...&gt; |&gt; Enum . sort ( ) [ :digits_ordinal , :digits_ordinal_feminine , :digits_ordinal_feminine_plural , :digits_ordinal_masculine , :digits_ordinal_masculine_plural ] A rule can then be invoked on an available rule_set. For example iex&gt; Bonfire.Common.Localise.Cldr.Rbnf.Ordinal . digits_ordinal ( 123 , :en ) &quot;123rd&quot; This call is equivalent to the call through the public API of: iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string ( 123 , format : :ordinal ) { :ok , &quot;123rd&quot; }","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.all_rule_sets/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#all_rule_sets/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_feminine/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_feminine/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_feminine_plural/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_feminine_plural/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_indicator_m/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_indicator_m/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_masculine/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_masculine/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_masculine_adjective/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_masculine_adjective/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_masculine_plural/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_masculine_plural/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.dord_femabbrev/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#dord_femabbrev/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.dord_mascabbrev/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#dord_mascabbrev/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.rule_sets/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#rule_sets/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.rule_sets/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#rule_sets/1"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout","doc":"Functions to implement the spellout rule-based-number-format rules of CLDR. As CLDR notes, the data is incomplete or non-existent for many languages. It is considered complete for English however. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; Bonfire.Common.Localise.Cldr.Rbnf.Spellout . rule_sets ( &quot;en&quot; ) ...&gt; |&gt; Enum . sort ( ) [ :spellout_cardinal , :spellout_cardinal_verbose , :spellout_numbering , :spellout_numbering_verbose , :spellout_numbering_year , :spellout_ordinal , :spellout_ordinal_verbose ] A rule can then be invoked on an available rule_set. For example: iex&gt; Bonfire.Common.Localise.Cldr.Rbnf.Spellout . spellout_ordinal ( 123 , &quot;en&quot; ) &quot;one hundred twenty-third&quot; This call is equivalent to the call through the public API of: iex&gt; Bonfire.Common.Localise.Cldr.Number . to_string ( 123 , format : :spellout ) { :ok , &quot;one hundred twenty-three&quot; }","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.after_hundred/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#after_hundred/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.after_thousand_or_more/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#after_thousand_or_more/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.all_rule_sets/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#all_rule_sets/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.and/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#and/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.and_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#and_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.cents_f/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#cents_f/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.cents_m/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#cents_m/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.cents_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#cents_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.commas/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#commas/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.commas_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#commas_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.et_un/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#et_un/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.et_une/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#et_une/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.et_unieme/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#et_unieme/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.fem_with_a/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#fem_with_a/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.fem_with_i/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#fem_with_i/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.fem_with_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#fem_with_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.lenient_parse/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#lenient_parse/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.mille_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#mille_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_no_final/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_no_final/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_a/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_a/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_a_nofinal/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_a_nofinal/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_i/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_i/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_i_nofinal/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_i_nofinal/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_o_nofinal/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_o_nofinal/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msco_with_a/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msco_with_a/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msco_with_i/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msco_with_i/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msco_with_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msco_with_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esima/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esima/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esima_with_a/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esima_with_a/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esima_with_i/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esima_with_i/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esima_with_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esima_with_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esime/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esime/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esime_with_a/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esime_with_a/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esime_with_i/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esime_with_i/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esime_with_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esime_with_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimi/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimi/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimi_with_a/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimi_with_a/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimi_with_i/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimi_with_i/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimi_with_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimi_with_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimo/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimo/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimo_with_a/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimo_with_a/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimo_with_i/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimo_with_i/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimo_with_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimo_with_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.r2d_year/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#r2d_year/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.rule_sets/0","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#rule_sets/0"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.rule_sets/1","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#rule_sets/1"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_feminine/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_feminine/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_feminine_cents/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_feminine_cents/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_masculine/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_masculine/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_masculine_cents/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_masculine_cents/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_verbose/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_verbose/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_leading/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_leading/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_numbering/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_numbering/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_numbering_cents/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_numbering_cents/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_numbering_verbose/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_numbering_verbose/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_numbering_year/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_numbering_year/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_feminine/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_feminine/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_feminine_cont/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_feminine_cont/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_feminine_conts/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_feminine_conts/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_feminine_plural/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_feminine_plural/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine_adjective/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine_adjective/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine_cont/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine_cont/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine_conts/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine_conts/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine_plural/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine_plural/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_verbose/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_verbose/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.subcents_f/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#subcents_f/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.subcents_m/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#subcents_m/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.subcents_o/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#subcents_o/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.teen/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#teen/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.th/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#th/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.tieth/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#tieth/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.x_ty/2","doc":"","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#x_ty/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Time","doc":"","ref":"Bonfire.Common.Localise.Cldr.Time.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Time.to_string/2","doc":"Formats a time according to a format string as defined in CLDR and described in TR35 Returns {:ok, formatted_time} or {:error, reason} . Arguments time is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys hour , minute , second and optionally calendar and microsecond options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale: any locale returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale() number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; locale, for example, era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Examples iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] { :ok , &quot;7:35:13 AM&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :short { :ok , &quot;7:35 AM&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :medium , locale : &quot;fr&quot; { :ok , &quot;07:35:13&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :medium { :ok , &quot;7:35:13 AM&quot; } iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Cldr.Time . to_string datetime , format : :long { :ok , &quot;11:59:59 PM UTC&quot; }","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string/2"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Time.to_string!/2","doc":"Formats a time according to a format string as defined in CLDR and described in TR35 . Arguments time is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys hour , minute , second and optionally calendar and microsecond options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; locale, for example, era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns formatted_time_string or raises an exception. Examples iex&gt; Bonfire.Common.Localise.Cldr.Time . to_string! ~T[07:35:13.215217] &quot;7:35:13 AM&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :short &quot;7:35 AM&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time . to_string ~T[07:35:13.215217] , format : :short , period : :variant { :ok , &quot;7:35 AM&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :medium , locale : &quot;fr&quot; &quot;07:35:13&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :medium &quot;7:35:13 AM&quot; iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Bonfire.Common.Localise.Cldr.Time . to_string! datetime , format : :long &quot;11:59:59 PM UTC&quot;","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string!/2"},{"type":"module","title":"Bonfire.Common.Localise.Cldr.Time.Interval","doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See Cldr.Interval.to_string/3 and Cldr.Time.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Time.Interval.do_to_string/3","doc":"","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#do_to_string/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Time.Interval.do_to_string!/3","doc":"","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#do_to_string!/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Time.Interval.to_string/3","doc":"Returns a string representing the formatted interval formed by two times. Arguments from is any map that conforms to the Calendar.time type. to is any map that conforms to the Calendar.time type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone time. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :time , :zone , and :flex . The default is :time . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configured locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single time is formatted instead of an interval Examples iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :short { :ok , &quot;10 – 10 AM&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :medium { :ok , &quot;10:00 – 10:03 AM&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :long { :ok , &quot;10:00 – 10:03 AM&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex { :ok , &quot;10:00 – 10:03 in the morning&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :flex { :ok , &quot;12:00 – 10:00 in the morning&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :zone { :ok , &quot;12:00 – 10:00 AM Etc/UTC&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex , locale : &quot;th&quot; { :ok , &quot;10:00 – 10:03 ในตอนเช้า&quot; } iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string ~T[10:00:00] , nil { :ok , &quot;10:00:00 AM –&quot; }","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string/3"},{"type":"function","title":"Bonfire.Common.Localise.Cldr.Time.Interval.to_string!/3","doc":"Returns a string representing the formatted interval formed by two times or raises an exception. Arguments from is any map that conforms to the Calendar.time type. to is any map that conforms to the Calendar.time type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone time. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :time , :zone , and :flex . The default is :time . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Bonfire.Common.Localise.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns string or raises an exception Notes For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configured locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single time is formatted instead of an interval Examples iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :short &quot;10 – 10 AM&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :medium &quot;10:00 – 10:03 AM&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :long &quot;10:00 – 10:03 AM&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex &quot;10:00 – 10:03 in the morning&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :flex &quot;12:00 – 10:00 in the morning&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :zone &quot;12:00 – 10:00 AM Etc/UTC&quot; iex&gt; Bonfire.Common.Localise.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex , locale : &quot;th&quot; &quot;10:00 – 10:03 ในตอนเช้า&quot;","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string!/3"},{"type":"module","title":"Bonfire.Common.Localise.Gettext","doc":"Default Gettext module It is recommended to use the more convenient macros in Bonfire.Common.Localise.Gettext.Helpers instead.","ref":"Bonfire.Common.Localise.Gettext.html"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.dgettext/3","doc":"Callback implementation for Gettext.Backend.dgettext/3 .","ref":"Bonfire.Common.Localise.Gettext.html#dgettext/3"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.dgettext_noop/2","doc":"Callback implementation for Gettext.Backend.dgettext_noop/2 .","ref":"Bonfire.Common.Localise.Gettext.html#dgettext_noop/2"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.dngettext/5","doc":"Callback implementation for Gettext.Backend.dngettext/5 .","ref":"Bonfire.Common.Localise.Gettext.html#dngettext/5"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.dngettext_noop/3","doc":"Callback implementation for Gettext.Backend.dngettext_noop/3 .","ref":"Bonfire.Common.Localise.Gettext.html#dngettext_noop/3"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.dpgettext/4","doc":"Callback implementation for Gettext.Backend.dpgettext/4 .","ref":"Bonfire.Common.Localise.Gettext.html#dpgettext/4"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.dpgettext_noop/3","doc":"","ref":"Bonfire.Common.Localise.Gettext.html#dpgettext_noop/3"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.dpngettext/6","doc":"Callback implementation for Gettext.Backend.dpngettext/6 .","ref":"Bonfire.Common.Localise.Gettext.html#dpngettext/6"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.dpngettext_noop/4","doc":"","ref":"Bonfire.Common.Localise.Gettext.html#dpngettext_noop/4"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.gettext/2","doc":"Callback implementation for Gettext.Backend.gettext/2 .","ref":"Bonfire.Common.Localise.Gettext.html#gettext/2"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.gettext_comment/1","doc":"Callback implementation for Gettext.Backend.gettext_comment/1 .","ref":"Bonfire.Common.Localise.Gettext.html#gettext_comment/1"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.gettext_noop/1","doc":"Callback implementation for Gettext.Backend.gettext_noop/1 .","ref":"Bonfire.Common.Localise.Gettext.html#gettext_noop/1"},{"type":"function","title":"Bonfire.Common.Localise.Gettext.handle_missing_bindings/2","doc":"Callback implementation for Gettext.Backend.handle_missing_bindings/2 .","ref":"Bonfire.Common.Localise.Gettext.html#handle_missing_bindings/2"},{"type":"function","title":"Bonfire.Common.Localise.Gettext.handle_missing_plural_translation/7","doc":"Callback implementation for Gettext.Backend.handle_missing_plural_translation/7 .","ref":"Bonfire.Common.Localise.Gettext.html#handle_missing_plural_translation/7"},{"type":"function","title":"Bonfire.Common.Localise.Gettext.handle_missing_translation/5","doc":"Callback implementation for Gettext.Backend.handle_missing_translation/5 .","ref":"Bonfire.Common.Localise.Gettext.html#handle_missing_translation/5"},{"type":"function","title":"Bonfire.Common.Localise.Gettext.lgettext/5","doc":"","ref":"Bonfire.Common.Localise.Gettext.html#lgettext/5"},{"type":"function","title":"Bonfire.Common.Localise.Gettext.lngettext/7","doc":"","ref":"Bonfire.Common.Localise.Gettext.html#lngettext/7"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.ngettext/4","doc":"Callback implementation for Gettext.Backend.ngettext/4 .","ref":"Bonfire.Common.Localise.Gettext.html#ngettext/4"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.ngettext_noop/2","doc":"Callback implementation for Gettext.Backend.ngettext_noop/2 .","ref":"Bonfire.Common.Localise.Gettext.html#ngettext_noop/2"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.pgettext/3","doc":"Callback implementation for Gettext.Backend.pgettext/3 .","ref":"Bonfire.Common.Localise.Gettext.html#pgettext/3"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.pgettext_noop/2","doc":"","ref":"Bonfire.Common.Localise.Gettext.html#pgettext_noop/2"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.pngettext/5","doc":"Callback implementation for Gettext.Backend.pngettext/5 .","ref":"Bonfire.Common.Localise.Gettext.html#pngettext/5"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.pngettext_noop/3","doc":"","ref":"Bonfire.Common.Localise.Gettext.html#pngettext_noop/3"},{"type":"module","title":"Bonfire.Common.Localise.Gettext.Helpers","doc":"A module providing Internationalization with a gettext-based API. By using Gettext , your module gains a set of macros for translations, for example: import Bonfire.Common.Localise.Gettext # Simple translation usage : &lt; % = l ( &quot;Hello&quot; ) % &gt; &lt; % = l ( &quot;Hello %{name}&quot; , name : &quot;Bookchin&quot; ) % &gt; &lt; % = l ( &quot;Hi&quot; , [ ] , &quot;test context&quot; ) % &gt; output : Hello Hello Bookchin Hi # Plural translation usage : &lt; % = lp ( &quot;Hi friend&quot; , &quot;Hi friends&quot; , 2 ) % &gt; &lt; % = lp ( &quot;Hiya %{user_or_users}&quot; , &quot;Hiyas %{user_or_users}&quot; , 1 , [ user_or_users : &quot;Bookchin&quot; ] , &quot;test context&quot; ) % &gt; output : Hi friends Hiya Bookchin See the Gettext Docs for details.","ref":"Bonfire.Common.Localise.Gettext.Helpers.html"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.Helpers.l/4","doc":"","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#l/4"},{"type":"function","title":"Bonfire.Common.Localise.Gettext.Helpers.localise_dynamic/2","doc":"","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#localise_dynamic/2"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.Helpers.localise_strings/2","doc":"Localise a list of strings at compile time","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#localise_strings/2"},{"type":"macro","title":"Bonfire.Common.Localise.Gettext.Helpers.lp/6","doc":"","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#lp/6"},{"type":"module","title":"Bonfire.Common.Localise.Gettext.Plural","doc":"Defines a plural forms module for Gettext that uses CLDR plural rules https://cldr.unicode.org/index/cldr-spec/plural-rules","ref":"Bonfire.Common.Localise.Gettext.Plural.html"},{"type":"function","title":"Bonfire.Common.Localise.Gettext.Plural.nplurals/1","doc":"Returns the number of plural forms for a given locale. locale is either a locale name in the list {:__aliases__, [counter: {Bonfire.Common.Localise.Gettext.Plural, 2}, line: 6], [:Bonfire, :Common, :Localise, :Cldr]}.known_locale_names/0 or a %LanguageTag{} as returned by Cldr.Locale.new/2 Examples iex&gt; Bonfire.Common.Localise.Gettext.Plural . nplurals ( &quot;pl&quot; ) 4 iex&gt; Bonfire.Common.Localise.Gettext.Plural . nplurals ( &quot;en&quot; ) 2","ref":"Bonfire.Common.Localise.Gettext.Plural.html#nplurals/1"},{"type":"function","title":"Bonfire.Common.Localise.Gettext.Plural.plural/2","doc":"Returns the plural form of a number for a given locale. locale is either a locale name in the list {:__aliases__, [counter: {Bonfire.Common.Localise.Gettext.Plural, 2}, line: 6], [:Bonfire, :Common, :Localise, :Cldr]}.known_locale_names/0 or a %LanguageTag{} as returned by Cldr.Locale.new/2 Examples iex&gt; Bonfire.Common.Localise.Gettext.Plural . plural ( &quot;pl&quot; , 1 ) 0 iex&gt; Bonfire.Common.Localise.Gettext.Plural . plural ( &quot;pl&quot; , 2 ) 1 iex&gt; Bonfire.Common.Localise.Gettext.Plural . plural ( &quot;pl&quot; , 5 ) 2 iex&gt; Bonfire.Common.Localise.Gettext.Plural . plural ( &quot;pl&quot; , 112 ) 2 iex&gt; Bonfire.Common.Localise.Gettext.Plural . plural ( &quot;en&quot; , 1 ) 0 iex&gt; Bonfire.Common.Localise.Gettext.Plural . plural ( &quot;en&quot; , 2 ) 1 iex&gt; Bonfire.Common.Localise.Gettext.Plural . plural ( &quot;en&quot; , 112 ) 1 iex&gt; Bonfire.Common.Localise.Gettext.Plural . plural ( &quot;en_GB&quot; , 112 ) 1","ref":"Bonfire.Common.Localise.Gettext.Plural.html#plural/2"},{"type":"module","title":"Bonfire.Common.Media","doc":"Helpers for handling images and media URLs","ref":"Bonfire.Common.Media.html"},{"type":"function","title":"Bonfire.Common.Media.avatar_fallback/1","doc":"","ref":"Bonfire.Common.Media.html#avatar_fallback/1"},{"type":"function","title":"Bonfire.Common.Media.avatar_media/1","doc":"Takes a Media map (or an object containing one) and returns the avatar's URL.","ref":"Bonfire.Common.Media.html#avatar_media/1"},{"type":"function","title":"Bonfire.Common.Media.avatar_url/1","doc":"","ref":"Bonfire.Common.Media.html#avatar_url/1"},{"type":"function","title":"Bonfire.Common.Media.banner_url/1","doc":"Takes a Media map (or an object containing one) and returns the banner's URL.","ref":"Bonfire.Common.Media.html#banner_url/1"},{"type":"function","title":"Bonfire.Common.Media.extract_tar/2","doc":"Returns a map containing all files and their contents from a tar or compressed tar.gz archive.","ref":"Bonfire.Common.Media.html#extract_tar/2"},{"type":"function","title":"Bonfire.Common.Media.image_url/1","doc":"Takes a Media map (or an object containing one) and returns the image's URL.","ref":"Bonfire.Common.Media.html#image_url/1"},{"type":"function","title":"Bonfire.Common.Media.media_url/1","doc":"Takes a Media map (or an object containing one) and returns a URL for the media","ref":"Bonfire.Common.Media.html#media_url/1"},{"type":"function","title":"Bonfire.Common.Media.read_tar_files/3","doc":"","ref":"Bonfire.Common.Media.html#read_tar_files/3"},{"type":"module","title":"Bonfire.Common.Modularity.DeclareHelpers","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html"},{"type":"function","title":"Bonfire.Common.Modularity.DeclareHelpers.app/1","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#app/1"},{"type":"function","title":"Bonfire.Common.Modularity.DeclareHelpers.component_props/1","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#component_props/1"},{"type":"function","title":"Bonfire.Common.Modularity.DeclareHelpers.component_type/1","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#component_type/1"},{"type":"macro","title":"Bonfire.Common.Modularity.DeclareHelpers.declare_extension/2","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_extension/2"},{"type":"macro","title":"Bonfire.Common.Modularity.DeclareHelpers.declare_nav_component/2","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_nav_component/2"},{"type":"macro","title":"Bonfire.Common.Modularity.DeclareHelpers.declare_nav_link/2","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_nav_link/2"},{"type":"macro","title":"Bonfire.Common.Modularity.DeclareHelpers.declare_settings_component/2","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_settings_component/2"},{"type":"macro","title":"Bonfire.Common.Modularity.DeclareHelpers.declare_settings_nav_component/2","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_settings_nav_component/2"},{"type":"macro","title":"Bonfire.Common.Modularity.DeclareHelpers.declare_settings_nav_link/2","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_settings_nav_link/2"},{"type":"macro","title":"Bonfire.Common.Modularity.DeclareHelpers.declare_widget/2","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_widget/2"},{"type":"function","title":"Bonfire.Common.Modularity.DeclareHelpers.generate_link/3","doc":"","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#generate_link/3"},{"type":"module","title":"Bonfire.Common.Module.Override","doc":"Utility to clone a module under a new name","ref":"Bonfire.Common.Module.Override.html"},{"type":"function","title":"Bonfire.Common.Module.Override.clone/2","doc":"Clone the existing module under a new name","ref":"Bonfire.Common.Module.Override.html#clone/2"},{"type":"function","title":"Bonfire.Common.Module.Override.clone_original/2","doc":"","ref":"Bonfire.Common.Module.Override.html#clone_original/2"},{"type":"function","title":"Bonfire.Common.Module.Override.module_name_atom/1","doc":"","ref":"Bonfire.Common.Module.Override.html#module_name_atom/1"},{"type":"function","title":"Bonfire.Common.Module.Override.module_name_string/1","doc":"","ref":"Bonfire.Common.Module.Override.html#module_name_string/1"},{"type":"function","title":"Bonfire.Common.Module.Override.module_original_name_atom/2","doc":"","ref":"Bonfire.Common.Module.Override.html#module_original_name_atom/2"},{"type":"function","title":"Bonfire.Common.Module.Override.module_original_name_str/2","doc":"","ref":"Bonfire.Common.Module.Override.html#module_original_name_str/2"},{"type":"behaviour","title":"Bonfire.Common.NavModule","doc":"Add items to extensions' navigation sidebar.","ref":"Bonfire.Common.NavModule.html"},{"type":"function","title":"Bonfire.Common.NavModule.app_modules/0","doc":"","ref":"Bonfire.Common.NavModule.html#app_modules/0"},{"type":"callback","title":"Bonfire.Common.NavModule.declared_nav/0","doc":"Declares a nav module, with links or nav components","ref":"Bonfire.Common.NavModule.html#c:declared_nav/0"},{"type":"function","title":"Bonfire.Common.NavModule.modules/0","doc":"Callback implementation for Bonfire.Common.ExtensionBehaviour.modules/0 .","ref":"Bonfire.Common.NavModule.html#modules/0"},{"type":"function","title":"Bonfire.Common.NavModule.nav/0","doc":"Load all navs","ref":"Bonfire.Common.NavModule.html#nav/0"},{"type":"function","title":"Bonfire.Common.NavModule.nav/1","doc":"Get navs for an extension","ref":"Bonfire.Common.NavModule.html#nav/1"},{"type":"function","title":"Bonfire.Common.NavModule.nav_function_error/2","doc":"","ref":"Bonfire.Common.NavModule.html#nav_function_error/2"},{"type":"module","title":"Bonfire.Common.Pointers","doc":"","ref":"Bonfire.Common.Pointers.html"},{"type":"function","title":"Bonfire.Common.Pointers.dataloader/1","doc":"Batch loading of associations for GraphQL API","ref":"Bonfire.Common.Pointers.html#dataloader/1"},{"type":"function","title":"Bonfire.Common.Pointers.exists?/2","doc":"","ref":"Bonfire.Common.Pointers.html#exists?/2"},{"type":"function","title":"Bonfire.Common.Pointers.filter_one/1","doc":"","ref":"Bonfire.Common.Pointers.html#filter_one/1"},{"type":"function","title":"Bonfire.Common.Pointers.filters/3","doc":"","ref":"Bonfire.Common.Pointers.html#filters/3"},{"type":"function","title":"Bonfire.Common.Pointers.follow!/2","doc":"","ref":"Bonfire.Common.Pointers.html#follow!/2"},{"type":"function","title":"Bonfire.Common.Pointers.follow_function_error/2","doc":"","ref":"Bonfire.Common.Pointers.html#follow_function_error/2"},{"type":"function","title":"Bonfire.Common.Pointers.forge!/1","doc":"Forge a pointer from a pointable object Does not hit the database. Is safe so long as the provided struct participates in the meta abstraction.","ref":"Bonfire.Common.Pointers.html#forge!/1"},{"type":"function","title":"Bonfire.Common.Pointers.forge!/2","doc":"Forges a pointer to a participating meta entity. Does not hit the database, is safe so long as the entry we wish to synthesise a pointer for represents a legitimate entry in the database.","ref":"Bonfire.Common.Pointers.html#forge!/2"},{"type":"function","title":"Bonfire.Common.Pointers.get/2","doc":"","ref":"Bonfire.Common.Pointers.html#get/2"},{"type":"function","title":"Bonfire.Common.Pointers.get!/2","doc":"","ref":"Bonfire.Common.Pointers.html#get!/2"},{"type":"function","title":"Bonfire.Common.Pointers.id_binary/1","doc":"","ref":"Bonfire.Common.Pointers.html#id_binary/1"},{"type":"function","title":"Bonfire.Common.Pointers.id_filter/2","doc":"","ref":"Bonfire.Common.Pointers.html#id_filter/2"},{"type":"function","title":"Bonfire.Common.Pointers.is_pointable?/1","doc":"","ref":"Bonfire.Common.Pointers.html#is_pointable?/1"},{"type":"function","title":"Bonfire.Common.Pointers.list!/2","doc":"","ref":"Bonfire.Common.Pointers.html#list!/2"},{"type":"function","title":"Bonfire.Common.Pointers.list_ids/0","doc":"","ref":"Bonfire.Common.Pointers.html#list_ids/0"},{"type":"function","title":"Bonfire.Common.Pointers.many/2","doc":"","ref":"Bonfire.Common.Pointers.html#many/2"},{"type":"function","title":"Bonfire.Common.Pointers.many!/2","doc":"","ref":"Bonfire.Common.Pointers.html#many!/2"},{"type":"function","title":"Bonfire.Common.Pointers.maybe_forge/1","doc":"Turns a thing into a pointer if it is not already or returns nil","ref":"Bonfire.Common.Pointers.html#maybe_forge/1"},{"type":"function","title":"Bonfire.Common.Pointers.maybe_forge!/1","doc":"Turns a thing into a pointer if it is not already. Errors if it cannot be performed","ref":"Bonfire.Common.Pointers.html#maybe_forge!/1"},{"type":"function","title":"Bonfire.Common.Pointers.one/2","doc":"","ref":"Bonfire.Common.Pointers.html#one/2"},{"type":"function","title":"Bonfire.Common.Pointers.one!/2","doc":"","ref":"Bonfire.Common.Pointers.html#one!/2"},{"type":"function","title":"Bonfire.Common.Pointers.pointer_preloads/2","doc":"","ref":"Bonfire.Common.Pointers.html#pointer_preloads/2"},{"type":"function","title":"Bonfire.Common.Pointers.pointer_query/2","doc":"Prepare a query for generic pointer objects","ref":"Bonfire.Common.Pointers.html#pointer_query/2"},{"type":"function","title":"Bonfire.Common.Pointers.preload!/2","doc":"Follows one or more pointers and adds the pointed records to the pointed attrs","ref":"Bonfire.Common.Pointers.html#preload!/2"},{"type":"function","title":"Bonfire.Common.Pointers.query/3","doc":"","ref":"Bonfire.Common.Pointers.html#query/3"},{"type":"module","title":"Bonfire.Common.Pointers.Preload","doc":"","ref":"Bonfire.Common.Pointers.Preload.html"},{"type":"function","title":"Bonfire.Common.Pointers.Preload.maybe_preload_nested_pointers/3","doc":"","ref":"Bonfire.Common.Pointers.Preload.html#maybe_preload_nested_pointers/3"},{"type":"function","title":"Bonfire.Common.Pointers.Preload.maybe_preload_pointer/2","doc":"","ref":"Bonfire.Common.Pointers.Preload.html#maybe_preload_pointer/2"},{"type":"function","title":"Bonfire.Common.Pointers.Preload.maybe_preload_pointers/3","doc":"","ref":"Bonfire.Common.Pointers.Preload.html#maybe_preload_pointers/3"},{"type":"module","title":"Bonfire.Common.Pointers.Queries","doc":"","ref":"Bonfire.Common.Pointers.Queries.html"},{"type":"function","title":"Bonfire.Common.Pointers.Queries.filter/2","doc":"Filter the query according to arbitrary criteria","ref":"Bonfire.Common.Pointers.Queries.html#filter/2"},{"type":"function","title":"Bonfire.Common.Pointers.Queries.query/1","doc":"","ref":"Bonfire.Common.Pointers.Queries.html#query/1"},{"type":"function","title":"Bonfire.Common.Pointers.Queries.query/2","doc":"","ref":"Bonfire.Common.Pointers.Queries.html#query/2"},{"type":"function","title":"Bonfire.Common.Pointers.Queries.schema_module/0","doc":"Callback implementation for Bonfire.Common.QueryModule.schema_module/0 .","ref":"Bonfire.Common.Pointers.Queries.html#schema_module/0"},{"type":"module","title":"Bonfire.Common.Pointers.Tables","doc":"","ref":"Bonfire.Common.Pointers.Tables.html"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.list_ids/0","doc":"","ref":"Bonfire.Common.Pointers.Tables.html#list_ids/0"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.list_schemas/0","doc":"","ref":"Bonfire.Common.Pointers.Tables.html#list_schemas/0"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.list_tables/1","doc":"Lists all Pointable Tables","ref":"Bonfire.Common.Pointers.Tables.html#list_tables/1"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.list_tables_debug/0","doc":"","ref":"Bonfire.Common.Pointers.Tables.html#list_tables_debug/0"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.many/1","doc":"","ref":"Bonfire.Common.Pointers.Tables.html#many/1"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.one/1","doc":"","ref":"Bonfire.Common.Pointers.Tables.html#one/1"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.one!/1","doc":"","ref":"Bonfire.Common.Pointers.Tables.html#one!/1"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.schema_or_table!/1","doc":"","ref":"Bonfire.Common.Pointers.Tables.html#schema_or_table!/1"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.table!/1","doc":"Retrieves the Table that a pointer points to Note: Throws an error if the table cannot be found","ref":"Bonfire.Common.Pointers.Tables.html#table!/1"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.table_fields/1","doc":"","ref":"Bonfire.Common.Pointers.Tables.html#table_fields/1"},{"type":"module","title":"Bonfire.Common.Pointers.Tables.Queries","doc":"","ref":"Bonfire.Common.Pointers.Tables.Queries.html"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.Queries.filter/2","doc":"Filter the query according to arbitrary criteria","ref":"Bonfire.Common.Pointers.Tables.Queries.html#filter/2"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.Queries.query/1","doc":"","ref":"Bonfire.Common.Pointers.Tables.Queries.html#query/1"},{"type":"function","title":"Bonfire.Common.Pointers.Tables.Queries.query/2","doc":"","ref":"Bonfire.Common.Pointers.Tables.Queries.html#query/2"},{"type":"module","title":"Bonfire.Common.PubSub","doc":"","ref":"Bonfire.Common.PubSub.html"},{"type":"function","title":"Bonfire.Common.PubSub.broadcast/2","doc":"Broadcast some data for realtime updates, for example to a feed or thread","ref":"Bonfire.Common.PubSub.html#broadcast/2"},{"type":"macro","title":"Bonfire.Common.PubSub.broadcast_with_telemetry/2","doc":"Broadcast while attaching telemetry info. The receiving module must use Bonfire.Common.PubSub to correctly unwrap the Event","ref":"Bonfire.Common.PubSub.html#broadcast_with_telemetry/2"},{"type":"function","title":"Bonfire.Common.PubSub.broadcast_with_telemetry/3","doc":"","ref":"Bonfire.Common.PubSub.html#broadcast_with_telemetry/3"},{"type":"function","title":"Bonfire.Common.PubSub.current_function/1","doc":"","ref":"Bonfire.Common.PubSub.html#current_function/1"},{"type":"function","title":"Bonfire.Common.PubSub.subscribe/2","doc":"Subscribe to something for realtime updates, like a feed or thread","ref":"Bonfire.Common.PubSub.html#subscribe/2"},{"type":"module","title":"Bonfire.Common.PubSub.Event","doc":"","ref":"Bonfire.Common.PubSub.Event.html"},{"type":"behaviour","title":"Bonfire.Common.QueryModule","doc":"Properly query some data using the appropriate module depending on its schema. Back by a global cache of known query_modules to be queried by their schema, or vice versa. Use of the QueryModule Service requires: Exporting query_module/0 in relevant modules (in schemas pointing to query modules and/or in query modules pointing to schemas), returning a Module atom To populate :pointers, :search_path in config the list of OTP applications where query_modules are declared. Start the Bonfire.Common.QueryModule application before querying. OTP 21.2 or greater, though we recommend using the most recent release available. While this module is a GenServer, it is only responsible for setup of the cache and then exits with :ignore having done so. It is not recommended to restart the service as this will lead to a stop the world garbage collection of all processes and the copying of the entire cache to each process that has queried it since its last local garbage collection.","ref":"Bonfire.Common.QueryModule.html"},{"type":"function","title":"Bonfire.Common.QueryModule.app_modules/0","doc":"","ref":"Bonfire.Common.QueryModule.html#app_modules/0"},{"type":"function","title":"Bonfire.Common.QueryModule.apply_error/2","doc":"","ref":"Bonfire.Common.QueryModule.html#apply_error/2"},{"type":"callback","title":"Bonfire.Common.QueryModule.context_module/0","doc":"Points to the related context module","ref":"Bonfire.Common.QueryModule.html#c:context_module/0"},{"type":"function","title":"Bonfire.Common.QueryModule.linked_context_modules/0","doc":"","ref":"Bonfire.Common.QueryModule.html#linked_context_modules/0"},{"type":"function","title":"Bonfire.Common.QueryModule.linked_schema_modules/0","doc":"","ref":"Bonfire.Common.QueryModule.html#linked_schema_modules/0"},{"type":"function","title":"Bonfire.Common.QueryModule.maybe_query/3","doc":"","ref":"Bonfire.Common.QueryModule.html#maybe_query/3"},{"type":"function","title":"Bonfire.Common.QueryModule.maybe_query_module/1","doc":"","ref":"Bonfire.Common.QueryModule.html#maybe_query_module/1"},{"type":"function","title":"Bonfire.Common.QueryModule.modules/0","doc":"Callback implementation for Bonfire.Common.ExtensionBehaviour.modules/0 .","ref":"Bonfire.Common.QueryModule.html#modules/0"},{"type":"function","title":"Bonfire.Common.QueryModule.query_function_error/3","doc":"","ref":"Bonfire.Common.QueryModule.html#query_function_error/3"},{"type":"callback","title":"Bonfire.Common.QueryModule.query_module/0","doc":"Declares a query module","ref":"Bonfire.Common.QueryModule.html#c:query_module/0"},{"type":"function","title":"Bonfire.Common.QueryModule.query_module/1","doc":"Get a Queryable identified by name or id.","ref":"Bonfire.Common.QueryModule.html#query_module/1"},{"type":"function","title":"Bonfire.Common.QueryModule.query_module!/1","doc":"Look up a Queryable by name or id, throw :not_found if not found.","ref":"Bonfire.Common.QueryModule.html#query_module!/1"},{"type":"function","title":"Bonfire.Common.QueryModule.query_modules/1","doc":"Look up many ids at once, throw :not_found if any of them are not found","ref":"Bonfire.Common.QueryModule.html#query_modules/1"},{"type":"callback","title":"Bonfire.Common.QueryModule.schema_module/0","doc":"Points to the related schema module","ref":"Bonfire.Common.QueryModule.html#c:schema_module/0"},{"type":"module","title":"Bonfire.Common.Repo","doc":"Ecto Repo and related common functions","ref":"Bonfire.Common.Repo.html"},{"type":"function","title":"Bonfire.Common.Repo.aggregate/3","doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"Bonfire.Common.Repo.html#aggregate/3"},{"type":"function","title":"Bonfire.Common.Repo.aggregate/4","doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"Bonfire.Common.Repo.html#aggregate/4"},{"type":"function","title":"Bonfire.Common.Repo.all/2","doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"Bonfire.Common.Repo.html#all/2"},{"type":"function","title":"Bonfire.Common.Repo.checked_out?/0","doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"Bonfire.Common.Repo.html#checked_out?/0"},{"type":"function","title":"Bonfire.Common.Repo.checkout/2","doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"Bonfire.Common.Repo.html#checkout/2"},{"type":"function","title":"Bonfire.Common.Repo.child_spec/1","doc":"","ref":"Bonfire.Common.Repo.html#child_spec/1"},{"type":"function","title":"Bonfire.Common.Repo.config/0","doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"Bonfire.Common.Repo.html#config/0"},{"type":"function","title":"Bonfire.Common.Repo.default_options/1","doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"Bonfire.Common.Repo.html#default_options/1"},{"type":"function","title":"Bonfire.Common.Repo.delete/2","doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"Bonfire.Common.Repo.html#delete/2"},{"type":"function","title":"Bonfire.Common.Repo.delete!/2","doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"Bonfire.Common.Repo.html#delete!/2"},{"type":"function","title":"Bonfire.Common.Repo.delete_all/2","doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"Bonfire.Common.Repo.html#delete_all/2"},{"type":"function","title":"Bonfire.Common.Repo.delete_many/1","doc":"Execute a query to delete all matching records.","ref":"Bonfire.Common.Repo.html#delete_many/1"},{"type":"function","title":"Bonfire.Common.Repo.disconnect_all/2","doc":"A convenience function for SQL-based repositories that forces all connections in the pool to disconnect within the given interval. See Ecto.Adapters.SQL.disconnect_all/3 for more information.","ref":"Bonfire.Common.Repo.html#disconnect_all/2"},{"type":"function","title":"Bonfire.Common.Repo.exists?/2","doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"Bonfire.Common.Repo.html#exists?/2"},{"type":"function","title":"Bonfire.Common.Repo.explain/3","doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"Bonfire.Common.Repo.html#explain/3"},{"type":"function","title":"Bonfire.Common.Repo.fetch/2","doc":"Execute a query for one result where the primary key matches the given id, and return either an {:ok, result} tuple or a {:error, :not_found}","ref":"Bonfire.Common.Repo.html#fetch/2"},{"type":"function","title":"Bonfire.Common.Repo.fetch_all/2","doc":"Execute a query for multiple results given one or multiple IDs.","ref":"Bonfire.Common.Repo.html#fetch_all/2"},{"type":"function","title":"Bonfire.Common.Repo.fetch_by/2","doc":"Execute a query for one result (using a keyword list to specify the key/value to query with), and return either an {:ok, result} tuple or a {:error, :not_found}","ref":"Bonfire.Common.Repo.html#fetch_by/2"},{"type":"function","title":"Bonfire.Common.Repo.find/3","doc":"Like Repo.single, except on failure, adds an error to the changeset","ref":"Bonfire.Common.Repo.html#find/3"},{"type":"function","title":"Bonfire.Common.Repo.get/3","doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"Bonfire.Common.Repo.html#get/3"},{"type":"function","title":"Bonfire.Common.Repo.get!/3","doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"Bonfire.Common.Repo.html#get!/3"},{"type":"function","title":"Bonfire.Common.Repo.get_by/3","doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"Bonfire.Common.Repo.html#get_by/3"},{"type":"function","title":"Bonfire.Common.Repo.get_by!/3","doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"Bonfire.Common.Repo.html#get_by!/3"},{"type":"function","title":"Bonfire.Common.Repo.get_dynamic_repo/0","doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"Bonfire.Common.Repo.html#get_dynamic_repo/0"},{"type":"function","title":"Bonfire.Common.Repo.in_transaction?/0","doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"Bonfire.Common.Repo.html#in_transaction?/0"},{"type":"function","title":"Bonfire.Common.Repo.insert/2","doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"Bonfire.Common.Repo.html#insert/2"},{"type":"function","title":"Bonfire.Common.Repo.insert!/2","doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"Bonfire.Common.Repo.html#insert!/2"},{"type":"function","title":"Bonfire.Common.Repo.insert_all/3","doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"Bonfire.Common.Repo.html#insert_all/3"},{"type":"function","title":"Bonfire.Common.Repo.insert_all_or_ignore/2","doc":"","ref":"Bonfire.Common.Repo.html#insert_all_or_ignore/2"},{"type":"function","title":"Bonfire.Common.Repo.insert_or_ignore/1","doc":"","ref":"Bonfire.Common.Repo.html#insert_or_ignore/1"},{"type":"function","title":"Bonfire.Common.Repo.insert_or_update/2","doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"Bonfire.Common.Repo.html#insert_or_update/2"},{"type":"function","title":"Bonfire.Common.Repo.insert_or_update!/2","doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"Bonfire.Common.Repo.html#insert_or_update!/2"},{"type":"function","title":"Bonfire.Common.Repo.load/2","doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"Bonfire.Common.Repo.html#load/2"},{"type":"function","title":"Bonfire.Common.Repo.many/2","doc":"Execute a query for multiple results and return the results.","ref":"Bonfire.Common.Repo.html#many/2"},{"type":"function","title":"Bonfire.Common.Repo.many_paginated/3","doc":"Execute a query for multiple results and return one page of results. This uses the main implementation for pagination, which is cursor-based and powered by the Paginator library.","ref":"Bonfire.Common.Repo.html#many_paginated/3"},{"type":"function","title":"Bonfire.Common.Repo.maybe_one/2","doc":"Execute a query for one result and return either an result or a fallback value ( nil by default)","ref":"Bonfire.Common.Repo.html#maybe_one/2"},{"type":"function","title":"Bonfire.Common.Repo.maybe_preload/3","doc":"See Bonfire.Common.Repo.Preload.maybe_preload/3 .","ref":"Bonfire.Common.Repo.html#maybe_preload/3"},{"type":"function","title":"Bonfire.Common.Repo.one/2","doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"Bonfire.Common.Repo.html#one/2"},{"type":"function","title":"Bonfire.Common.Repo.one!/2","doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"Bonfire.Common.Repo.html#one!/2"},{"type":"function","title":"Bonfire.Common.Repo.paginate/2","doc":"Different implementation for pagination using Scrivener (used by eg. rauversion)","ref":"Bonfire.Common.Repo.html#paginate/2"},{"type":"function","title":"Bonfire.Common.Repo.preload/3","doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"Bonfire.Common.Repo.html#preload/3"},{"type":"function","title":"Bonfire.Common.Repo.preload_all/2","doc":"See Bonfire.Common.Repo.Preload.preload_all/2 .","ref":"Bonfire.Common.Repo.html#preload_all/2"},{"type":"function","title":"Bonfire.Common.Repo.preload_mixins/2","doc":"See Bonfire.Common.Repo.Preload.preload_mixins/2 .","ref":"Bonfire.Common.Repo.html#preload_mixins/2"},{"type":"function","title":"Bonfire.Common.Repo.prepare_query/3","doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"Bonfire.Common.Repo.html#prepare_query/3"},{"type":"function","title":"Bonfire.Common.Repo.put/1","doc":"Like insert/1 , but understands remapping changeset errors to attr names from config (and only config, no overrides at present!)","ref":"Bonfire.Common.Repo.html#put/1"},{"type":"function","title":"Bonfire.Common.Repo.put_dynamic_repo/1","doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"Bonfire.Common.Repo.html#put_dynamic_repo/1"},{"type":"function","title":"Bonfire.Common.Repo.put_many/1","doc":"Like put/1 but for multiple changesets","ref":"Bonfire.Common.Repo.html#put_many/1"},{"type":"function","title":"Bonfire.Common.Repo.query/3","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"Bonfire.Common.Repo.html#query/3"},{"type":"function","title":"Bonfire.Common.Repo.query!/3","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Bonfire.Common.Repo.html#query!/3"},{"type":"function","title":"Bonfire.Common.Repo.query_many/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many/4 for more information.","ref":"Bonfire.Common.Repo.html#query_many/3"},{"type":"function","title":"Bonfire.Common.Repo.query_many!/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many!/4 for more information.","ref":"Bonfire.Common.Repo.html#query_many!/3"},{"type":"function","title":"Bonfire.Common.Repo.reload/2","doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"Bonfire.Common.Repo.html#reload/2"},{"type":"function","title":"Bonfire.Common.Repo.reload!/2","doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"Bonfire.Common.Repo.html#reload!/2"},{"type":"function","title":"Bonfire.Common.Repo.rollback/1","doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"Bonfire.Common.Repo.html#rollback/1"},{"type":"function","title":"Bonfire.Common.Repo.single/1","doc":"Execute a query for one result and return either an {:ok, result} or {:error, :not_found} tuple","ref":"Bonfire.Common.Repo.html#single/1"},{"type":"function","title":"Bonfire.Common.Repo.sql/3","doc":"","ref":"Bonfire.Common.Repo.html#sql/3"},{"type":"function","title":"Bonfire.Common.Repo.start_link/1","doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"Bonfire.Common.Repo.html#start_link/1"},{"type":"function","title":"Bonfire.Common.Repo.stop/1","doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"Bonfire.Common.Repo.html#stop/1"},{"type":"function","title":"Bonfire.Common.Repo.stream/2","doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"Bonfire.Common.Repo.html#stream/2"},{"type":"function","title":"Bonfire.Common.Repo.to_sql/2","doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Bonfire.Common.Repo.html#to_sql/2"},{"type":"function","title":"Bonfire.Common.Repo.transact_many/1","doc":"","ref":"Bonfire.Common.Repo.html#transact_many/1"},{"type":"function","title":"Bonfire.Common.Repo.transact_with/1","doc":"Run a transaction, similar to Repo.transaction/1 , but it expects an ok or error tuple. If an error tuple is returned, the transaction is aborted.","ref":"Bonfire.Common.Repo.html#transact_with/1"},{"type":"function","title":"Bonfire.Common.Repo.transaction/2","doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"Bonfire.Common.Repo.html#transaction/2"},{"type":"function","title":"Bonfire.Common.Repo.update/2","doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"Bonfire.Common.Repo.html#update/2"},{"type":"function","title":"Bonfire.Common.Repo.update!/2","doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"Bonfire.Common.Repo.html#update!/2"},{"type":"function","title":"Bonfire.Common.Repo.update_all/3","doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"Bonfire.Common.Repo.html#update_all/3"},{"type":"function","title":"Bonfire.Common.Repo.upsert/3","doc":"Inserts or updates data in the database with upsert semantics. cs - The changeset or schema to insert or update. keys_or_attrs_to_update - A list of keys or a map of attributes to update. conflict_target - The column(s) or constraint to check for conflicts, defaults to [:id] .","ref":"Bonfire.Common.Repo.html#upsert/3"},{"type":"function","title":"Bonfire.Common.Repo.upsert_all/3","doc":"","ref":"Bonfire.Common.Repo.html#upsert_all/3"},{"type":"module","title":"Bonfire.Common.Repo.Delete","doc":"","ref":"Bonfire.Common.Repo.Delete.html"},{"type":"function","title":"Bonfire.Common.Repo.Delete.deletion_result/1","doc":"","ref":"Bonfire.Common.Repo.Delete.html#deletion_result/1"},{"type":"function","title":"Bonfire.Common.Repo.Delete.deletion_result!/1","doc":"","ref":"Bonfire.Common.Repo.Delete.html#deletion_result!/1"},{"type":"function","title":"Bonfire.Common.Repo.Delete.federation_module/0","doc":"","ref":"Bonfire.Common.Repo.Delete.html#federation_module/0"},{"type":"function","title":"Bonfire.Common.Repo.Delete.hard_delete/1","doc":"Actually deletes an entry from the database","ref":"Bonfire.Common.Repo.Delete.html#hard_delete/1"},{"type":"function","title":"Bonfire.Common.Repo.Delete.hard_delete!/1","doc":"Deletes an entry from the database, or throws an error","ref":"Bonfire.Common.Repo.Delete.html#hard_delete!/1"},{"type":"function","title":"Bonfire.Common.Repo.Delete.maybe_allow_delete?/2","doc":"","ref":"Bonfire.Common.Repo.Delete.html#maybe_allow_delete?/2"},{"type":"function","title":"Bonfire.Common.Repo.Delete.schema/1","doc":"","ref":"Bonfire.Common.Repo.Delete.html#schema/1"},{"type":"function","title":"Bonfire.Common.Repo.Delete.soft_delete/1","doc":"Just marks an entry as deleted in the database","ref":"Bonfire.Common.Repo.Delete.html#soft_delete/1"},{"type":"function","title":"Bonfire.Common.Repo.Delete.soft_delete!/1","doc":"Marks an entry as deleted in the database or throws an error","ref":"Bonfire.Common.Repo.Delete.html#soft_delete!/1"},{"type":"function","title":"Bonfire.Common.Repo.Delete.soft_delete_changeset/4","doc":"Creates a changeset for deleting an entity","ref":"Bonfire.Common.Repo.Delete.html#soft_delete_changeset/4"},{"type":"function","title":"Bonfire.Common.Repo.Delete.undelete/1","doc":"","ref":"Bonfire.Common.Repo.Delete.html#undelete/1"},{"type":"module","title":"Bonfire.Common.Repo.Preload","doc":"Preload helpers for Ecto Repo","ref":"Bonfire.Common.Repo.Preload.html"},{"type":"function","title":"Bonfire.Common.Repo.Preload.aggregate/3","doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"Bonfire.Common.Repo.Preload.html#aggregate/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.aggregate/4","doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"Bonfire.Common.Repo.Preload.html#aggregate/4"},{"type":"function","title":"Bonfire.Common.Repo.Preload.all/2","doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"Bonfire.Common.Repo.Preload.html#all/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.checked_out?/0","doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"Bonfire.Common.Repo.Preload.html#checked_out?/0"},{"type":"function","title":"Bonfire.Common.Repo.Preload.checkout/2","doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"Bonfire.Common.Repo.Preload.html#checkout/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.child_spec/1","doc":"","ref":"Bonfire.Common.Repo.Preload.html#child_spec/1"},{"type":"function","title":"Bonfire.Common.Repo.Preload.config/0","doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"Bonfire.Common.Repo.Preload.html#config/0"},{"type":"function","title":"Bonfire.Common.Repo.Preload.default_options/1","doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"Bonfire.Common.Repo.Preload.html#default_options/1"},{"type":"function","title":"Bonfire.Common.Repo.Preload.delete/2","doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"Bonfire.Common.Repo.Preload.html#delete/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.delete!/2","doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"Bonfire.Common.Repo.Preload.html#delete!/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.delete_all/2","doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"Bonfire.Common.Repo.Preload.html#delete_all/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.disconnect_all/2","doc":"A convenience function for SQL-based repositories that forces all connections in the pool to disconnect within the given interval. See Ecto.Adapters.SQL.disconnect_all/3 for more information.","ref":"Bonfire.Common.Repo.Preload.html#disconnect_all/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.exists?/2","doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"Bonfire.Common.Repo.Preload.html#exists?/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.explain/3","doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"Bonfire.Common.Repo.Preload.html#explain/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.get/3","doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"Bonfire.Common.Repo.Preload.html#get/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.get!/3","doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"Bonfire.Common.Repo.Preload.html#get!/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.get_by/3","doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"Bonfire.Common.Repo.Preload.html#get_by/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.get_by!/3","doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"Bonfire.Common.Repo.Preload.html#get_by!/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.get_dynamic_repo/0","doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"Bonfire.Common.Repo.Preload.html#get_dynamic_repo/0"},{"type":"function","title":"Bonfire.Common.Repo.Preload.in_transaction?/0","doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"Bonfire.Common.Repo.Preload.html#in_transaction?/0"},{"type":"function","title":"Bonfire.Common.Repo.Preload.insert/2","doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"Bonfire.Common.Repo.Preload.html#insert/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.insert!/2","doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"Bonfire.Common.Repo.Preload.html#insert!/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.insert_all/3","doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"Bonfire.Common.Repo.Preload.html#insert_all/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.insert_or_update/2","doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"Bonfire.Common.Repo.Preload.html#insert_or_update/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.insert_or_update!/2","doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"Bonfire.Common.Repo.Preload.html#insert_or_update!/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.load/2","doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"Bonfire.Common.Repo.Preload.html#load/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.maybe_preload/3","doc":"","ref":"Bonfire.Common.Repo.Preload.html#maybe_preload/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.maybe_preloads_per_nested_schema/4","doc":"","ref":"Bonfire.Common.Repo.Preload.html#maybe_preloads_per_nested_schema/4"},{"type":"function","title":"Bonfire.Common.Repo.Preload.maybe_preloads_per_schema/3","doc":"","ref":"Bonfire.Common.Repo.Preload.html#maybe_preloads_per_schema/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.one/2","doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"Bonfire.Common.Repo.Preload.html#one/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.one!/2","doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"Bonfire.Common.Repo.Preload.html#one!/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.preload/3","doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"Bonfire.Common.Repo.Preload.html#preload/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.preload_all/2","doc":"","ref":"Bonfire.Common.Repo.Preload.html#preload_all/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.preload_mixins/2","doc":"","ref":"Bonfire.Common.Repo.Preload.html#preload_mixins/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.prepare_query/3","doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"Bonfire.Common.Repo.Preload.html#prepare_query/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.put_dynamic_repo/1","doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"Bonfire.Common.Repo.Preload.html#put_dynamic_repo/1"},{"type":"function","title":"Bonfire.Common.Repo.Preload.query/3","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"Bonfire.Common.Repo.Preload.html#query/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.query!/3","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Bonfire.Common.Repo.Preload.html#query!/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.query_many/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many/4 for more information.","ref":"Bonfire.Common.Repo.Preload.html#query_many/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.query_many!/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many!/4 for more information.","ref":"Bonfire.Common.Repo.Preload.html#query_many!/3"},{"type":"function","title":"Bonfire.Common.Repo.Preload.reload/2","doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"Bonfire.Common.Repo.Preload.html#reload/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.reload!/2","doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"Bonfire.Common.Repo.Preload.html#reload!/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.rollback/1","doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"Bonfire.Common.Repo.Preload.html#rollback/1"},{"type":"function","title":"Bonfire.Common.Repo.Preload.schema_mixins/1","doc":"","ref":"Bonfire.Common.Repo.Preload.html#schema_mixins/1"},{"type":"function","title":"Bonfire.Common.Repo.Preload.start_link/1","doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"Bonfire.Common.Repo.Preload.html#start_link/1"},{"type":"function","title":"Bonfire.Common.Repo.Preload.stop/1","doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"Bonfire.Common.Repo.Preload.html#stop/1"},{"type":"function","title":"Bonfire.Common.Repo.Preload.stream/2","doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"Bonfire.Common.Repo.Preload.html#stream/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.to_sql/2","doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Bonfire.Common.Repo.Preload.html#to_sql/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.transaction/2","doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"Bonfire.Common.Repo.Preload.html#transaction/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.update/2","doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"Bonfire.Common.Repo.Preload.html#update/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.update!/2","doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"Bonfire.Common.Repo.Preload.html#update!/2"},{"type":"function","title":"Bonfire.Common.Repo.Preload.update_all/3","doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"Bonfire.Common.Repo.Preload.html#update_all/3"},{"type":"module","title":"Bonfire.Common.Repo.Utils","doc":"Helper functions for changesets","ref":"Bonfire.Common.Repo.Utils.html"},{"type":"function","title":"Bonfire.Common.Repo.Utils.change_disabled/1","doc":"Keeps disabled_at in accord with is_disabled","ref":"Bonfire.Common.Repo.Utils.html#change_disabled/1"},{"type":"function","title":"Bonfire.Common.Repo.Utils.change_muted/1","doc":"Keeps muted_at in accord with is_muted","ref":"Bonfire.Common.Repo.Utils.html#change_muted/1"},{"type":"function","title":"Bonfire.Common.Repo.Utils.change_public/1","doc":"Keeps published_at in accord with is_public","ref":"Bonfire.Common.Repo.Utils.html#change_public/1"},{"type":"macro","title":"Bonfire.Common.Repo.Utils.match_admin/0","doc":"","ref":"Bonfire.Common.Repo.Utils.html#match_admin/0"},{"type":"function","title":"Bonfire.Common.Repo.Utils.validate_email/2","doc":"Validates an email for correctness","ref":"Bonfire.Common.Repo.Utils.html#validate_email/2"},{"type":"function","title":"Bonfire.Common.Repo.Utils.validate_email_domain/2","doc":"","ref":"Bonfire.Common.Repo.Utils.html#validate_email_domain/2"},{"type":"module","title":"Bonfire.Common.RepoTemplate","doc":"","ref":"Bonfire.Common.RepoTemplate.html"},{"type":"module","title":"Bonfire.Common.RuntimeConfig","doc":"","ref":"Bonfire.Common.RuntimeConfig.html"},{"type":"function","title":"Bonfire.Common.RuntimeConfig.config/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config/0 .","ref":"Bonfire.Common.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.Common.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.Common.RuntimeConfig.html#config_module/0"},{"type":"function","title":"Bonfire.Common.RuntimeConfig.skip_test_tags/1","doc":"","ref":"Bonfire.Common.RuntimeConfig.html#skip_test_tags/1"},{"type":"behaviour","title":"Bonfire.Common.SchemaModule","doc":"Find a context or query module via its schema, backed by a global cache of known schema modules to be queried by their schema, or vice versa (eg. via ContextModule).","ref":"Bonfire.Common.SchemaModule.html"},{"type":"function","title":"Bonfire.Common.SchemaModule.app_modules/0","doc":"","ref":"Bonfire.Common.SchemaModule.html#app_modules/0"},{"type":"callback","title":"Bonfire.Common.SchemaModule.context_module/0","doc":"Points to the related context module","ref":"Bonfire.Common.SchemaModule.html#c:context_module/0"},{"type":"function","title":"Bonfire.Common.SchemaModule.linked_context_modules/0","doc":"","ref":"Bonfire.Common.SchemaModule.html#linked_context_modules/0"},{"type":"function","title":"Bonfire.Common.SchemaModule.linked_query_modules/0","doc":"","ref":"Bonfire.Common.SchemaModule.html#linked_query_modules/0"},{"type":"function","title":"Bonfire.Common.SchemaModule.modules/0","doc":"Callback implementation for Bonfire.Common.ExtensionBehaviour.modules/0 .","ref":"Bonfire.Common.SchemaModule.html#modules/0"},{"type":"callback","title":"Bonfire.Common.SchemaModule.query_module/0","doc":"Points to the related query module","ref":"Bonfire.Common.SchemaModule.html#c:query_module/0"},{"type":"callback","title":"Bonfire.Common.SchemaModule.schema_module/0","doc":"Declares a schema module","ref":"Bonfire.Common.SchemaModule.html#c:schema_module/0"},{"type":"behaviour","title":"Bonfire.Common.SettingsModule","doc":"Settings nav &amp; components","ref":"Bonfire.Common.SettingsModule.html"},{"type":"function","title":"Bonfire.Common.SettingsModule.app_modules/0","doc":"","ref":"Bonfire.Common.SettingsModule.html#app_modules/0"},{"type":"function","title":"Bonfire.Common.SettingsModule.component_function_error/2","doc":"","ref":"Bonfire.Common.SettingsModule.html#component_function_error/2"},{"type":"function","title":"Bonfire.Common.SettingsModule.components/0","doc":"Load all components at once","ref":"Bonfire.Common.SettingsModule.html#components/0"},{"type":"function","title":"Bonfire.Common.SettingsModule.components/1","doc":"Load components for an extension","ref":"Bonfire.Common.SettingsModule.html#components/1"},{"type":"callback","title":"Bonfire.Common.SettingsModule.declared_component/0","doc":"Declares a component component","ref":"Bonfire.Common.SettingsModule.html#c:declared_component/0"},{"type":"callback","title":"Bonfire.Common.SettingsModule.declared_nav/0","doc":"Declares a nav module, with links or nav components","ref":"Bonfire.Common.SettingsModule.html#c:declared_nav/0"},{"type":"function","title":"Bonfire.Common.SettingsModule.extension_has_components?/2","doc":"List extensions that have settings component(s)","ref":"Bonfire.Common.SettingsModule.html#extension_has_components?/2"},{"type":"function","title":"Bonfire.Common.SettingsModule.modules/0","doc":"Callback implementation for Bonfire.Common.ExtensionBehaviour.modules/0 .","ref":"Bonfire.Common.SettingsModule.html#modules/0"},{"type":"function","title":"Bonfire.Common.SettingsModule.modules_component/1","doc":"Get components identified by their module","ref":"Bonfire.Common.SettingsModule.html#modules_component/1"},{"type":"function","title":"Bonfire.Common.SettingsModule.modules_nav/1","doc":"","ref":"Bonfire.Common.SettingsModule.html#modules_nav/1"},{"type":"function","title":"Bonfire.Common.SettingsModule.nav/0","doc":"Load all navs","ref":"Bonfire.Common.SettingsModule.html#nav/0"},{"type":"function","title":"Bonfire.Common.SettingsModule.nav/1","doc":"Get navs for an extension","ref":"Bonfire.Common.SettingsModule.html#nav/1"},{"type":"function","title":"Bonfire.Common.SettingsModule.nav_function_error/2","doc":"","ref":"Bonfire.Common.SettingsModule.html#nav_function_error/2"},{"type":"module","title":"Bonfire.Common.Simulation","doc":"","ref":"Bonfire.Common.Simulation.html"},{"type":"function","title":"Bonfire.Common.Simulation.ap_url_base/0","doc":"Picks a unique random url for an ap endpoint","ref":"Bonfire.Common.Simulation.html#ap_url_base/0"},{"type":"function","title":"Bonfire.Common.Simulation.base64/0","doc":"Generates random base64 text","ref":"Bonfire.Common.Simulation.html#base64/0"},{"type":"function","title":"Bonfire.Common.Simulation.bool/0","doc":"Generates a random boolean","ref":"Bonfire.Common.Simulation.html#bool/0"},{"type":"function","title":"Bonfire.Common.Simulation.canonical_url/0","doc":"Picks a random canonical url and makes it unique","ref":"Bonfire.Common.Simulation.html#canonical_url/0"},{"type":"function","title":"Bonfire.Common.Simulation.content_type/0","doc":"Generate a random content type","ref":"Bonfire.Common.Simulation.html#content_type/0"},{"type":"function","title":"Bonfire.Common.Simulation.content_url/0","doc":"Picks a remote url from a set of available ones.","ref":"Bonfire.Common.Simulation.html#content_url/0"},{"type":"function","title":"Bonfire.Common.Simulation.date_of_birth/0","doc":"Generates a random date of birth based on an age range of 18-99","ref":"Bonfire.Common.Simulation.html#date_of_birth/0"},{"type":"function","title":"Bonfire.Common.Simulation.domain/0","doc":"Generates a random domain name","ref":"Bonfire.Common.Simulation.html#domain/0"},{"type":"function","title":"Bonfire.Common.Simulation.email/0","doc":"Generates a random unique email","ref":"Bonfire.Common.Simulation.html#email/0"},{"type":"function","title":"Bonfire.Common.Simulation.email_user/0","doc":"Generates the first half of an email address","ref":"Bonfire.Common.Simulation.html#email_user/0"},{"type":"function","title":"Bonfire.Common.Simulation.falsehood/0","doc":"Returns false","ref":"Bonfire.Common.Simulation.html#falsehood/0"},{"type":"function","title":"Bonfire.Common.Simulation.float/0","doc":"Generate a random floating point number","ref":"Bonfire.Common.Simulation.html#float/0"},{"type":"function","title":"Bonfire.Common.Simulation.future_date/0","doc":"Picks a date up to 300 days in the future, not including today","ref":"Bonfire.Common.Simulation.html#future_date/0"},{"type":"function","title":"Bonfire.Common.Simulation.future_datetime/0","doc":"Picks a datetime up to 300 days in the future, not including today","ref":"Bonfire.Common.Simulation.html#future_datetime/0"},{"type":"function","title":"Bonfire.Common.Simulation.future_datetime_iso/0","doc":"Same as future_datetime, but as an ISO8601 formatted string.","ref":"Bonfire.Common.Simulation.html#future_datetime_iso/0"},{"type":"function","title":"Bonfire.Common.Simulation.icon/0","doc":"Picks an icon url","ref":"Bonfire.Common.Simulation.html#icon/0"},{"type":"function","title":"Bonfire.Common.Simulation.image/0","doc":"Picks an image url","ref":"Bonfire.Common.Simulation.html#image/0"},{"type":"function","title":"Bonfire.Common.Simulation.integer/0","doc":"Generate a random signed integer","ref":"Bonfire.Common.Simulation.html#integer/0"},{"type":"function","title":"Bonfire.Common.Simulation.license/0","doc":"A random license for content","ref":"Bonfire.Common.Simulation.html#license/0"},{"type":"function","title":"Bonfire.Common.Simulation.location/0","doc":"Returns a city and country","ref":"Bonfire.Common.Simulation.html#location/0"},{"type":"function","title":"Bonfire.Common.Simulation.long_count/0","doc":"","ref":"Bonfire.Common.Simulation.html#long_count/0"},{"type":"function","title":"Bonfire.Common.Simulation.long_list/1","doc":"","ref":"Bonfire.Common.Simulation.html#long_list/1"},{"type":"function","title":"Bonfire.Common.Simulation.markdown/0","doc":"","ref":"Bonfire.Common.Simulation.html#markdown/0"},{"type":"function","title":"Bonfire.Common.Simulation.maybe_bool/0","doc":"Generate a random boolean that can also be nil","ref":"Bonfire.Common.Simulation.html#maybe_bool/0"},{"type":"function","title":"Bonfire.Common.Simulation.maybe_one_of/1","doc":"","ref":"Bonfire.Common.Simulation.html#maybe_one_of/1"},{"type":"function","title":"Bonfire.Common.Simulation.med_count/0","doc":"","ref":"Bonfire.Common.Simulation.html#med_count/0"},{"type":"function","title":"Bonfire.Common.Simulation.med_list/1","doc":"","ref":"Bonfire.Common.Simulation.html#med_list/1"},{"type":"function","title":"Bonfire.Common.Simulation.name/0","doc":"Picks a name","ref":"Bonfire.Common.Simulation.html#name/0"},{"type":"function","title":"Bonfire.Common.Simulation.neg_integer/0","doc":"Generate a random negative integer","ref":"Bonfire.Common.Simulation.html#neg_integer/0"},{"type":"function","title":"Bonfire.Common.Simulation.one_of/1","doc":"","ref":"Bonfire.Common.Simulation.html#one_of/1"},{"type":"function","title":"Bonfire.Common.Simulation.paragraph/0","doc":"Generates a random paragraph","ref":"Bonfire.Common.Simulation.html#paragraph/0"},{"type":"function","title":"Bonfire.Common.Simulation.password/0","doc":"Generates a random password string","ref":"Bonfire.Common.Simulation.html#password/0"},{"type":"function","title":"Bonfire.Common.Simulation.past_date/0","doc":"Picks a date up to 300 days in the past, not including today","ref":"Bonfire.Common.Simulation.html#past_date/0"},{"type":"function","title":"Bonfire.Common.Simulation.past_datetime/0","doc":"Picks a datetime up to 300 days in the past, not including today","ref":"Bonfire.Common.Simulation.html#past_datetime/0"},{"type":"function","title":"Bonfire.Common.Simulation.past_datetime_iso/0","doc":"Same as past_datetime, but as an ISO8601 formatted string.","ref":"Bonfire.Common.Simulation.html#past_datetime_iso/0"},{"type":"function","title":"Bonfire.Common.Simulation.path/0","doc":"Picks a path from a set of available files.","ref":"Bonfire.Common.Simulation.html#path/0"},{"type":"function","title":"Bonfire.Common.Simulation.pos_integer/0","doc":"Generate a random positive integer","ref":"Bonfire.Common.Simulation.html#pos_integer/0"},{"type":"function","title":"Bonfire.Common.Simulation.preferred_username/0","doc":"Picks a unique preferred_username","ref":"Bonfire.Common.Simulation.html#preferred_username/0"},{"type":"function","title":"Bonfire.Common.Simulation.short_count/0","doc":"","ref":"Bonfire.Common.Simulation.html#short_count/0"},{"type":"function","title":"Bonfire.Common.Simulation.short_list/1","doc":"","ref":"Bonfire.Common.Simulation.html#short_list/1"},{"type":"function","title":"Bonfire.Common.Simulation.signing_key/0","doc":"Picks a fake signing key","ref":"Bonfire.Common.Simulation.html#signing_key/0"},{"type":"function","title":"Bonfire.Common.Simulation.some/2","doc":"Repeats a function count times if count_or_range is a positive integer. If count_or_range is a positive range, a random number from this range is selected and that value used as a count","ref":"Bonfire.Common.Simulation.html#some/2"},{"type":"function","title":"Bonfire.Common.Simulation.summary/0","doc":"Picks a summary text paragraph","ref":"Bonfire.Common.Simulation.html#summary/0"},{"type":"function","title":"Bonfire.Common.Simulation.title/0","doc":"","ref":"Bonfire.Common.Simulation.html#title/0"},{"type":"function","title":"Bonfire.Common.Simulation.truth/0","doc":"Returns true","ref":"Bonfire.Common.Simulation.html#truth/0"},{"type":"function","title":"Bonfire.Common.Simulation.ulid/0","doc":"Generates a random unique ulid","ref":"Bonfire.Common.Simulation.html#ulid/0"},{"type":"function","title":"Bonfire.Common.Simulation.url/0","doc":"Generates a random url","ref":"Bonfire.Common.Simulation.html#url/0"},{"type":"function","title":"Bonfire.Common.Simulation.username/0","doc":"Generates a random username","ref":"Bonfire.Common.Simulation.html#username/0"},{"type":"function","title":"Bonfire.Common.Simulation.uuid/0","doc":"Generates a random unique uuid","ref":"Bonfire.Common.Simulation.html#uuid/0"},{"type":"function","title":"Bonfire.Common.Simulation.verb/0","doc":"A verb to be used for an activity.","ref":"Bonfire.Common.Simulation.html#verb/0"},{"type":"function","title":"Bonfire.Common.Simulation.website/0","doc":"A website address","ref":"Bonfire.Common.Simulation.html#website/0"},{"type":"module","title":"Bonfire.Common.StartupTimer","doc":"Open the console without starting the app: iex -S mix run --no-start or just imix run --no-start And then run Bonfire.Common.StartupTimer.run()","ref":"Bonfire.Common.StartupTimer.html"},{"type":"function","title":"Bonfire.Common.StartupTimer.run/1","doc":"","ref":"Bonfire.Common.StartupTimer.html#run/1"},{"type":"module","title":"Bonfire.Common.Test.Interactive","doc":"This utility allows to get the same effect of using fcwatch | mix test --stale --listen-on-stdin to watch for code changes and run stale tests, but with more control and without the starting time penalty. Note that watching requires fswatch on your system. Eg on Mac run brew install fswatch . To use it, in your project's .iex file add: unless GenServer . whereis ( Bonfire.Common.Test.Interactive ) do { :ok , pid } = Bonfire.Common.Test.Interactive . start_link ( ) # Process will not exit when the iex goes out Process . unlink ( pid ) end import Bonfire.Common.Test.Interactive.Helpers Then to call iex and run tests just do: MIX_ENV = test iex - S mix The Bonfire.Common.Test.Interactive.Helpers allows to call f and s and a to run failed, stale and all tests respectively. You can call w to watch tests and uw to unwatch. There is a really simple throttle mecanism that disallow running the suite concurrently.","ref":"Bonfire.Common.Test.Interactive.html"},{"type":"function","title":"Bonfire.Common.Test.Interactive.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Bonfire.Common.Test.Interactive.html#child_spec/1"},{"type":"function","title":"Bonfire.Common.Test.Interactive.run_all_tests/1","doc":"","ref":"Bonfire.Common.Test.Interactive.html#run_all_tests/1"},{"type":"function","title":"Bonfire.Common.Test.Interactive.run_failed_tests/1","doc":"","ref":"Bonfire.Common.Test.Interactive.html#run_failed_tests/1"},{"type":"function","title":"Bonfire.Common.Test.Interactive.run_stale_tests/1","doc":"","ref":"Bonfire.Common.Test.Interactive.html#run_stale_tests/1"},{"type":"function","title":"Bonfire.Common.Test.Interactive.setup_test_repo/1","doc":"","ref":"Bonfire.Common.Test.Interactive.html#setup_test_repo/1"},{"type":"function","title":"Bonfire.Common.Test.Interactive.start_link/0","doc":"","ref":"Bonfire.Common.Test.Interactive.html#start_link/0"},{"type":"function","title":"Bonfire.Common.Test.Interactive.unlock/0","doc":"","ref":"Bonfire.Common.Test.Interactive.html#unlock/0"},{"type":"function","title":"Bonfire.Common.Test.Interactive.unwatch_tests/0","doc":"","ref":"Bonfire.Common.Test.Interactive.html#unwatch_tests/0"},{"type":"function","title":"Bonfire.Common.Test.Interactive.watch_tests/1","doc":"","ref":"Bonfire.Common.Test.Interactive.html#watch_tests/1"},{"type":"module","title":"Bonfire.Common.Test.Interactive.Helpers","doc":"","ref":"Bonfire.Common.Test.Interactive.Helpers.html"},{"type":"function","title":"Bonfire.Common.Test.Interactive.Helpers.f/1","doc":"See Bonfire.Common.Test.Interactive.run_failed_tests/1 .","ref":"Bonfire.Common.Test.Interactive.Helpers.html#f/1"},{"type":"function","title":"Bonfire.Common.Test.Interactive.Helpers.ready/0","doc":"","ref":"Bonfire.Common.Test.Interactive.Helpers.html#ready/0"},{"type":"function","title":"Bonfire.Common.Test.Interactive.Helpers.s/1","doc":"See Bonfire.Common.Test.Interactive.run_stale_tests/1 .","ref":"Bonfire.Common.Test.Interactive.Helpers.html#s/1"},{"type":"function","title":"Bonfire.Common.Test.Interactive.Helpers.ta/1","doc":"See Bonfire.Common.Test.Interactive.run_all_tests/1 .","ref":"Bonfire.Common.Test.Interactive.Helpers.html#ta/1"},{"type":"function","title":"Bonfire.Common.Test.Interactive.Helpers.uw/0","doc":"See Bonfire.Common.Test.Interactive.unwatch_tests/0 .","ref":"Bonfire.Common.Test.Interactive.Helpers.html#uw/0"},{"type":"function","title":"Bonfire.Common.Test.Interactive.Helpers.w/1","doc":"See Bonfire.Common.Test.Interactive.watch_tests/1 .","ref":"Bonfire.Common.Test.Interactive.Helpers.html#w/1"},{"type":"module","title":"Bonfire.Common.Test.Interactive.Observer","doc":"","ref":"Bonfire.Common.Test.Interactive.Observer.html"},{"type":"function","title":"Bonfire.Common.Test.Interactive.Observer.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Bonfire.Common.Test.Interactive.Observer.html#child_spec/1"},{"type":"module","title":"Bonfire.Common.TestInstanceRepo","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.aggregate/3","doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#aggregate/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.aggregate/4","doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"Bonfire.Common.TestInstanceRepo.html#aggregate/4"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.all/2","doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#all/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.apply/1","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#apply/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.checked_out?/0","doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"Bonfire.Common.TestInstanceRepo.html#checked_out?/0"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.checkout/2","doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#checkout/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.child_spec/1","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#child_spec/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.config/0","doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"Bonfire.Common.TestInstanceRepo.html#config/0"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.default_endpoint/0","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#default_endpoint/0"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.default_options/1","doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"Bonfire.Common.TestInstanceRepo.html#default_options/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.default_repo/0","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#default_repo/0"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.delete/2","doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#delete/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.delete!/2","doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#delete!/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.delete_all/2","doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#delete_all/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.delete_many/1","doc":"Execute a query to delete all matching records.","ref":"Bonfire.Common.TestInstanceRepo.html#delete_many/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.disconnect_all/2","doc":"A convenience function for SQL-based repositories that forces all connections in the pool to disconnect within the given interval. See Ecto.Adapters.SQL.disconnect_all/3 for more information.","ref":"Bonfire.Common.TestInstanceRepo.html#disconnect_all/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.exists?/2","doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#exists?/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.explain/3","doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"Bonfire.Common.TestInstanceRepo.html#explain/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.fetch/2","doc":"Execute a query for one result where the primary key matches the given id, and return either an {:ok, result} tuple or a {:error, :not_found}","ref":"Bonfire.Common.TestInstanceRepo.html#fetch/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.fetch_all/2","doc":"Execute a query for multiple results given one or multiple IDs.","ref":"Bonfire.Common.TestInstanceRepo.html#fetch_all/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.fetch_by/2","doc":"Execute a query for one result (using a keyword list to specify the key/value to query with), and return either an {:ok, result} tuple or a {:error, :not_found}","ref":"Bonfire.Common.TestInstanceRepo.html#fetch_by/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.find/3","doc":"Like Repo.single, except on failure, adds an error to the changeset","ref":"Bonfire.Common.TestInstanceRepo.html#find/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.get/3","doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#get/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.get!/3","doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#get!/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.get_by/3","doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#get_by/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.get_by!/3","doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#get_by!/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.get_dynamic_repo/0","doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"Bonfire.Common.TestInstanceRepo.html#get_dynamic_repo/0"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.in_transaction?/0","doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"Bonfire.Common.TestInstanceRepo.html#in_transaction?/0"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.insert/2","doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#insert/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.insert!/2","doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#insert!/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.insert_all/3","doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#insert_all/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.insert_all_or_ignore/2","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#insert_all_or_ignore/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.insert_or_ignore/1","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_ignore/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.insert_or_update/2","doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_update/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.insert_or_update!/2","doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_update!/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.load/2","doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#load/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.many/2","doc":"Execute a query for multiple results and return the results.","ref":"Bonfire.Common.TestInstanceRepo.html#many/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.many_paginated/3","doc":"Execute a query for multiple results and return one page of results. This uses the main implementation for pagination, which is cursor-based and powered by the Paginator library.","ref":"Bonfire.Common.TestInstanceRepo.html#many_paginated/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.maybe_declare_test_instance/1","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_declare_test_instance/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.maybe_one/2","doc":"Execute a query for one result and return either an result or a fallback value ( nil by default)","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_one/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.maybe_preload/3","doc":"See Bonfire.Common.Repo.Preload.maybe_preload/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_preload/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.one/2","doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#one/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.one!/2","doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#one!/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.paginate/2","doc":"Different implementation for pagination using Scrivener (used by eg. rauversion)","ref":"Bonfire.Common.TestInstanceRepo.html#paginate/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.preload/3","doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#preload/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.preload_all/2","doc":"See Bonfire.Common.Repo.Preload.preload_all/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#preload_all/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.preload_mixins/2","doc":"See Bonfire.Common.Repo.Preload.preload_mixins/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#preload_mixins/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.prepare_query/3","doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#prepare_query/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.process_put/1","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#process_put/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.put/1","doc":"Like insert/1 , but understands remapping changeset errors to attr names from config (and only config, no overrides at present!)","ref":"Bonfire.Common.TestInstanceRepo.html#put/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.put_dynamic_repo/1","doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"Bonfire.Common.TestInstanceRepo.html#put_dynamic_repo/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.put_many/1","doc":"Like put/1 but for multiple changesets","ref":"Bonfire.Common.TestInstanceRepo.html#put_many/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.query/3","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"Bonfire.Common.TestInstanceRepo.html#query/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.query!/3","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Bonfire.Common.TestInstanceRepo.html#query!/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.query_many/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many/4 for more information.","ref":"Bonfire.Common.TestInstanceRepo.html#query_many/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.query_many!/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many!/4 for more information.","ref":"Bonfire.Common.TestInstanceRepo.html#query_many!/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.reload/2","doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#reload/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.reload!/2","doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#reload!/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.rollback/1","doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"Bonfire.Common.TestInstanceRepo.html#rollback/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.single/1","doc":"Execute a query for one result and return either an {:ok, result} or {:error, :not_found} tuple","ref":"Bonfire.Common.TestInstanceRepo.html#single/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.sql/3","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#sql/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.start_link/1","doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"Bonfire.Common.TestInstanceRepo.html#start_link/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.stop/1","doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"Bonfire.Common.TestInstanceRepo.html#stop/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.stream/2","doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#stream/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.to_sql/2","doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Bonfire.Common.TestInstanceRepo.html#to_sql/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.transact_many/1","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#transact_many/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.transact_with/1","doc":"Run a transaction, similar to Repo.transaction/1 , but it expects an ok or error tuple. If an error tuple is returned, the transaction is aborted.","ref":"Bonfire.Common.TestInstanceRepo.html#transact_with/1"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.transaction/2","doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#transaction/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.update/2","doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#update/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.update!/2","doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"Bonfire.Common.TestInstanceRepo.html#update!/2"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.update_all/3","doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"Bonfire.Common.TestInstanceRepo.html#update_all/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.upsert/3","doc":"Inserts or updates data in the database with upsert semantics. cs - The changeset or schema to insert or update. keys_or_attrs_to_update - A list of keys or a map of attributes to update. conflict_target - The column(s) or constraint to check for conflicts, defaults to [:id] .","ref":"Bonfire.Common.TestInstanceRepo.html#upsert/3"},{"type":"function","title":"Bonfire.Common.TestInstanceRepo.upsert_all/3","doc":"","ref":"Bonfire.Common.TestInstanceRepo.html#upsert_all/3"},{"type":"module","title":"Bonfire.Common.Text","doc":"","ref":"Bonfire.Common.Text.html"},{"type":"function","title":"Bonfire.Common.Text.blank?/1","doc":"","ref":"Bonfire.Common.Text.html#blank?/1"},{"type":"function","title":"Bonfire.Common.Text.camelise/1","doc":"","ref":"Bonfire.Common.Text.html#camelise/1"},{"type":"function","title":"Bonfire.Common.Text.code_syntax/2","doc":"","ref":"Bonfire.Common.Text.html#code_syntax/2"},{"type":"function","title":"Bonfire.Common.Text.contains?/2","doc":"","ref":"Bonfire.Common.Text.html#contains?/2"},{"type":"function","title":"Bonfire.Common.Text.contains_html?/1","doc":"","ref":"Bonfire.Common.Text.html#contains_html?/1"},{"type":"function","title":"Bonfire.Common.Text.hash/2","doc":"","ref":"Bonfire.Common.Text.html#hash/2"},{"type":"function","title":"Bonfire.Common.Text.list_checkboxes/1","doc":"","ref":"Bonfire.Common.Text.html#list_checkboxes/1"},{"type":"function","title":"Bonfire.Common.Text.list_checked_boxes/1","doc":"","ref":"Bonfire.Common.Text.html#list_checked_boxes/1"},{"type":"function","title":"Bonfire.Common.Text.list_unchecked_boxes/1","doc":"","ref":"Bonfire.Common.Text.html#list_unchecked_boxes/1"},{"type":"function","title":"Bonfire.Common.Text.make_local_links_live/1","doc":"","ref":"Bonfire.Common.Text.html#make_local_links_live/1"},{"type":"function","title":"Bonfire.Common.Text.markdown_checkboxes/1","doc":"","ref":"Bonfire.Common.Text.html#markdown_checkboxes/1"},{"type":"function","title":"Bonfire.Common.Text.maybe_emote/1","doc":"","ref":"Bonfire.Common.Text.html#maybe_emote/1"},{"type":"function","title":"Bonfire.Common.Text.maybe_markdown_to_html/2","doc":"","ref":"Bonfire.Common.Text.html#maybe_markdown_to_html/2"},{"type":"function","title":"Bonfire.Common.Text.maybe_normalize_html/1","doc":"","ref":"Bonfire.Common.Text.html#maybe_normalize_html/1"},{"type":"function","title":"Bonfire.Common.Text.maybe_render_templated/2","doc":"","ref":"Bonfire.Common.Text.html#maybe_render_templated/2"},{"type":"function","title":"Bonfire.Common.Text.maybe_sane_html/1","doc":"It is recommended to call this before storing any that data is coming in from the user or from a remote instance","ref":"Bonfire.Common.Text.html#maybe_sane_html/1"},{"type":"function","title":"Bonfire.Common.Text.maybe_to_snake/1","doc":"takes a string as input and converts it to snake_case","ref":"Bonfire.Common.Text.html#maybe_to_snake/1"},{"type":"function","title":"Bonfire.Common.Text.normalise_links/1","doc":"","ref":"Bonfire.Common.Text.html#normalise_links/1"},{"type":"function","title":"Bonfire.Common.Text.random_string/1","doc":"","ref":"Bonfire.Common.Text.html#random_string/1"},{"type":"function","title":"Bonfire.Common.Text.regex_list/2","doc":"","ref":"Bonfire.Common.Text.html#regex_list/2"},{"type":"function","title":"Bonfire.Common.Text.sentence_truncate/3","doc":"","ref":"Bonfire.Common.Text.html#sentence_truncate/3"},{"type":"function","title":"Bonfire.Common.Text.slug/1","doc":"","ref":"Bonfire.Common.Text.html#slug/1"},{"type":"function","title":"Bonfire.Common.Text.strlen/1","doc":"","ref":"Bonfire.Common.Text.html#strlen/1"},{"type":"function","title":"Bonfire.Common.Text.text_only/1","doc":"","ref":"Bonfire.Common.Text.html#text_only/1"},{"type":"function","title":"Bonfire.Common.Text.truncate/3","doc":"","ref":"Bonfire.Common.Text.html#truncate/3"},{"type":"function","title":"Bonfire.Common.Text.underscore_truncate/2","doc":"","ref":"Bonfire.Common.Text.html#underscore_truncate/2"},{"type":"function","title":"Bonfire.Common.Text.upcase_first/1","doc":"","ref":"Bonfire.Common.Text.html#upcase_first/1"},{"type":"function","title":"Bonfire.Common.Text.verb_infinitive/1","doc":"Uses the Verbs library to convert an English conjugated verb back to inifinitive form. Currently only supports irregular verbs.","ref":"Bonfire.Common.Text.html#verb_infinitive/1"},{"type":"module","title":"Bonfire.Common.TextExtended","doc":"","ref":"Bonfire.Common.TextExtended.html"},{"type":"function","title":"Bonfire.Common.TextExtended.blank?/1","doc":"See Bonfire.Common.Text.blank?/1 .","ref":"Bonfire.Common.TextExtended.html#blank?/1"},{"type":"function","title":"Bonfire.Common.TextExtended.camelise/1","doc":"See Bonfire.Common.Text.camelise/1 .","ref":"Bonfire.Common.TextExtended.html#camelise/1"},{"type":"function","title":"Bonfire.Common.TextExtended.code_syntax/2","doc":"See Bonfire.Common.Text.code_syntax/2 .","ref":"Bonfire.Common.TextExtended.html#code_syntax/2"},{"type":"function","title":"Bonfire.Common.TextExtended.contains?/2","doc":"See Bonfire.Common.Text.contains?/2 .","ref":"Bonfire.Common.TextExtended.html#contains?/2"},{"type":"function","title":"Bonfire.Common.TextExtended.contains_html?/1","doc":"See Bonfire.Common.Text.contains_html?/1 .","ref":"Bonfire.Common.TextExtended.html#contains_html?/1"},{"type":"function","title":"Bonfire.Common.TextExtended.hash/1","doc":"See Bonfire.Common.Text.hash/1 .","ref":"Bonfire.Common.TextExtended.html#hash/1"},{"type":"function","title":"Bonfire.Common.TextExtended.hash/2","doc":"See Bonfire.Common.Text.hash/2 .","ref":"Bonfire.Common.TextExtended.html#hash/2"},{"type":"function","title":"Bonfire.Common.TextExtended.list_checkboxes/1","doc":"See Bonfire.Common.Text.list_checkboxes/1 .","ref":"Bonfire.Common.TextExtended.html#list_checkboxes/1"},{"type":"function","title":"Bonfire.Common.TextExtended.list_checked_boxes/1","doc":"See Bonfire.Common.Text.list_checked_boxes/1 .","ref":"Bonfire.Common.TextExtended.html#list_checked_boxes/1"},{"type":"function","title":"Bonfire.Common.TextExtended.list_unchecked_boxes/1","doc":"See Bonfire.Common.Text.list_unchecked_boxes/1 .","ref":"Bonfire.Common.TextExtended.html#list_unchecked_boxes/1"},{"type":"function","title":"Bonfire.Common.TextExtended.make_local_links_live/1","doc":"See Bonfire.Common.Text.make_local_links_live/1 .","ref":"Bonfire.Common.TextExtended.html#make_local_links_live/1"},{"type":"function","title":"Bonfire.Common.TextExtended.markdown_checkboxes/1","doc":"See Bonfire.Common.Text.markdown_checkboxes/1 .","ref":"Bonfire.Common.TextExtended.html#markdown_checkboxes/1"},{"type":"function","title":"Bonfire.Common.TextExtended.maybe_emote/1","doc":"See Bonfire.Common.Text.maybe_emote/1 .","ref":"Bonfire.Common.TextExtended.html#maybe_emote/1"},{"type":"function","title":"Bonfire.Common.TextExtended.maybe_markdown_to_html/1","doc":"See Bonfire.Common.Text.maybe_markdown_to_html/1 .","ref":"Bonfire.Common.TextExtended.html#maybe_markdown_to_html/1"},{"type":"function","title":"Bonfire.Common.TextExtended.maybe_markdown_to_html/2","doc":"See Bonfire.Common.Text.maybe_markdown_to_html/2 .","ref":"Bonfire.Common.TextExtended.html#maybe_markdown_to_html/2"},{"type":"function","title":"Bonfire.Common.TextExtended.maybe_normalize_html/1","doc":"See Bonfire.Common.Text.maybe_normalize_html/1 .","ref":"Bonfire.Common.TextExtended.html#maybe_normalize_html/1"},{"type":"function","title":"Bonfire.Common.TextExtended.maybe_render_templated/2","doc":"See Bonfire.Common.Text.maybe_render_templated/2 .","ref":"Bonfire.Common.TextExtended.html#maybe_render_templated/2"},{"type":"function","title":"Bonfire.Common.TextExtended.maybe_sane_html/1","doc":"See Bonfire.Common.Text.maybe_sane_html/1 .","ref":"Bonfire.Common.TextExtended.html#maybe_sane_html/1"},{"type":"function","title":"Bonfire.Common.TextExtended.maybe_to_snake/1","doc":"See Bonfire.Common.Text.maybe_to_snake/1 .","ref":"Bonfire.Common.TextExtended.html#maybe_to_snake/1"},{"type":"function","title":"Bonfire.Common.TextExtended.normalise_links/1","doc":"See Bonfire.Common.Text.normalise_links/1 .","ref":"Bonfire.Common.TextExtended.html#normalise_links/1"},{"type":"function","title":"Bonfire.Common.TextExtended.random_string/0","doc":"See Bonfire.Common.Text.random_string/0 .","ref":"Bonfire.Common.TextExtended.html#random_string/0"},{"type":"function","title":"Bonfire.Common.TextExtended.random_string/1","doc":"See Bonfire.Common.Text.random_string/1 .","ref":"Bonfire.Common.TextExtended.html#random_string/1"},{"type":"function","title":"Bonfire.Common.TextExtended.regex_list/2","doc":"See Bonfire.Common.Text.regex_list/2 .","ref":"Bonfire.Common.TextExtended.html#regex_list/2"},{"type":"function","title":"Bonfire.Common.TextExtended.sentence_truncate/1","doc":"See Bonfire.Common.Text.sentence_truncate/1 .","ref":"Bonfire.Common.TextExtended.html#sentence_truncate/1"},{"type":"function","title":"Bonfire.Common.TextExtended.sentence_truncate/2","doc":"See Bonfire.Common.Text.sentence_truncate/2 .","ref":"Bonfire.Common.TextExtended.html#sentence_truncate/2"},{"type":"function","title":"Bonfire.Common.TextExtended.sentence_truncate/3","doc":"See Bonfire.Common.Text.sentence_truncate/3 .","ref":"Bonfire.Common.TextExtended.html#sentence_truncate/3"},{"type":"function","title":"Bonfire.Common.TextExtended.slug/1","doc":"See Bonfire.Common.Text.slug/1 .","ref":"Bonfire.Common.TextExtended.html#slug/1"},{"type":"function","title":"Bonfire.Common.TextExtended.strlen/1","doc":"See Bonfire.Common.Text.strlen/1 .","ref":"Bonfire.Common.TextExtended.html#strlen/1"},{"type":"function","title":"Bonfire.Common.TextExtended.text_only/1","doc":"See Bonfire.Common.Text.text_only/1 .","ref":"Bonfire.Common.TextExtended.html#text_only/1"},{"type":"function","title":"Bonfire.Common.TextExtended.truncate/1","doc":"See Bonfire.Common.Text.truncate/1 .","ref":"Bonfire.Common.TextExtended.html#truncate/1"},{"type":"function","title":"Bonfire.Common.TextExtended.truncate/2","doc":"See Bonfire.Common.Text.truncate/2 .","ref":"Bonfire.Common.TextExtended.html#truncate/2"},{"type":"function","title":"Bonfire.Common.TextExtended.truncate/3","doc":"See Bonfire.Common.Text.truncate/3 .","ref":"Bonfire.Common.TextExtended.html#truncate/3"},{"type":"function","title":"Bonfire.Common.TextExtended.underscore_truncate/1","doc":"See Bonfire.Common.Text.underscore_truncate/1 .","ref":"Bonfire.Common.TextExtended.html#underscore_truncate/1"},{"type":"function","title":"Bonfire.Common.TextExtended.underscore_truncate/2","doc":"See Bonfire.Common.Text.underscore_truncate/2 .","ref":"Bonfire.Common.TextExtended.html#underscore_truncate/2"},{"type":"function","title":"Bonfire.Common.TextExtended.upcase_first/1","doc":"See Bonfire.Common.Text.upcase_first/1 .","ref":"Bonfire.Common.TextExtended.html#upcase_first/1"},{"type":"function","title":"Bonfire.Common.TextExtended.verb_infinitive/1","doc":"See Bonfire.Common.Text.verb_infinitive/1 .","ref":"Bonfire.Common.TextExtended.html#verb_infinitive/1"},{"type":"module","title":"Bonfire.Common.Types","doc":"","ref":"Bonfire.Common.Types.html"},{"type":"function","title":"Bonfire.Common.Types.all_object_type_names/0","doc":"Outputs the names all object types, for the purpose of adding to the localisation strings, as long as the output is piped through to localise_strings/1 at compile time.","ref":"Bonfire.Common.Types.html#all_object_type_names/0"},{"type":"function","title":"Bonfire.Common.Types.defines_struct?/1","doc":"Takes an object or module name and checks if it defines a struct","ref":"Bonfire.Common.Types.html#defines_struct?/1"},{"type":"function","title":"Bonfire.Common.Types.is_numeric/1","doc":"Takes a value and returns true if it's a number or can be converted to a float","ref":"Bonfire.Common.Types.html#is_numeric/1"},{"type":"function","title":"Bonfire.Common.Types.is_ulid?/1","doc":"Takes a string and returns true if it is a valid ULID (Universally Unique Lexicographically Sortable Identifier)","ref":"Bonfire.Common.Types.html#is_ulid?/1"},{"type":"function","title":"Bonfire.Common.Types.is_uuid?/1","doc":"Takes a string and returns true if it is a valid UUID (Universally Unique Identifier)","ref":"Bonfire.Common.Types.html#is_uuid?/1"},{"type":"function","title":"Bonfire.Common.Types.maybe_convert_ulids/1","doc":"Takes a map or list of maps, and if the value of a key in the map is a ULID, it replaces it with the corresponding Crockford Base32 encoded string.","ref":"Bonfire.Common.Types.html#maybe_convert_ulids/1"},{"type":"function","title":"Bonfire.Common.Types.maybe_to_atom/1","doc":"Takes a string and returns an atom if it can be converted to one, else returns the input itself","ref":"Bonfire.Common.Types.html#maybe_to_atom/1"},{"type":"function","title":"Bonfire.Common.Types.maybe_to_atom!/1","doc":"Takes a string or an atom and returns an atom if it is one or can be converted to one, else returns nil.","ref":"Bonfire.Common.Types.html#maybe_to_atom!/1"},{"type":"function","title":"Bonfire.Common.Types.maybe_to_float/2","doc":"Converts a value to a floating-point number if possible. If the value cannot be converted to a float, it returns a fallback value (which defaults to 0 if not provided)","ref":"Bonfire.Common.Types.html#maybe_to_float/2"},{"type":"function","title":"Bonfire.Common.Types.maybe_to_integer/2","doc":"Converts a value to an integer if possible. If the value is not an integer, it attempts to convert it to a float and then rounds it to the nearest integer. Otherwise it returns a fallback value (which defaults to 0 if not provided).","ref":"Bonfire.Common.Types.html#maybe_to_integer/2"},{"type":"function","title":"Bonfire.Common.Types.maybe_to_module/2","doc":"Takes a string and returns the corresponding Elixir module if it exists and is not disabled in the app.","ref":"Bonfire.Common.Types.html#maybe_to_module/2"},{"type":"function","title":"Bonfire.Common.Types.maybe_to_snake_atom/1","doc":"Takes a string as input, converts it to snake_case, and converts it to an atom if such an atom exists, otherwise returns nil.","ref":"Bonfire.Common.Types.html#maybe_to_snake_atom/1"},{"type":"function","title":"Bonfire.Common.Types.maybe_to_string/1","doc":"Handles multiple cases where the input value is of a different type (atom, list, tuple, etc.) and returns a string representation of it.","ref":"Bonfire.Common.Types.html#maybe_to_string/1"},{"type":"function","title":"Bonfire.Common.Types.module_to_human_readable/1","doc":"Takes a module name (as a string or an atom) and converts it to a human-readable string. It removes the Elixir. prefix (if it exists) and any other prefixes (eg. Bonfire.Common. ) and converts the final part of the module name to a string in title case (eg. Types ).","ref":"Bonfire.Common.Types.html#module_to_human_readable/1"},{"type":"function","title":"Bonfire.Common.Types.module_to_str/1","doc":"Takes a module atom and converts it to a string, or a string and removes the Elixir. prefix if it exists.","ref":"Bonfire.Common.Types.html#module_to_str/1"},{"type":"function","title":"Bonfire.Common.Types.object_type/1","doc":"Takes an object, module name, or string, and returns the type of the object. The function uses various patterns to match different object types (such as associations, Pointables, edges/verbs, etc.). If none of the patterns match, the function returns nil.","ref":"Bonfire.Common.Types.html#object_type/1"},{"type":"function","title":"Bonfire.Common.Types.object_type_display/1","doc":"","ref":"Bonfire.Common.Types.html#object_type_display/1"},{"type":"function","title":"Bonfire.Common.Types.sanitise_name/1","doc":"Used for mapping schema types to user-friendly names. Given a string representing a schema type name, returns a sanitised version of it, or nil for object types (or mixins) that shouldn't be displayed. Examples iex&gt; sanitise_name(&quot;Apactivity&quot;) &quot;Federated Object&quot;","ref":"Bonfire.Common.Types.html#sanitise_name/1"},{"type":"function","title":"Bonfire.Common.Types.table_id/1","doc":"Given a schema module, returns its table ID (i.e. Pointable ULID). Examples iex&gt; table_id(Bonfire.Data.Social.APActivity) &quot;30NF1REAPACTTAB1ENVMBER0NE&quot;","ref":"Bonfire.Common.Types.html#table_id/1"},{"type":"function","title":"Bonfire.Common.Types.table_type/1","doc":"Given an object or module name, returns its respective table table ID (i.e. Pointable ULID). Examples iex&gt; table_type(%Bonfire.Data.Social.APActivity{}) &quot;30NF1REAPACTTAB1ENVMBER0NE&quot; iex&gt; table_type(%Pointers.Pointer{table_id: &quot;30NF1REAPACTTAB1ENVMBER0NE&quot;}) &quot;30NF1REAPACTTAB1ENVMBER0NE&quot; iex&gt; table_type(Bonfire.Data.Social.APActivity) &quot;30NF1REAPACTTAB1ENVMBER0NE&quot;","ref":"Bonfire.Common.Types.html#table_type/1"},{"type":"function","title":"Bonfire.Common.Types.table_types/1","doc":"Given a list of schema types, returns a list of their respective table types. Filters out any empty values. Examples iex&gt; table_types([:activity, :person]) [&quot;activities&quot;, &quot;people&quot;] Given a single schema type, returns its respective table type. Examples iex&gt; table_types(:activity) &quot;activities&quot;","ref":"Bonfire.Common.Types.html#table_types/1"},{"type":"function","title":"Bonfire.Common.Types.typeof/1","doc":"Takes an object and returns its data type as a module name or atom","ref":"Bonfire.Common.Types.html#typeof/1"},{"type":"function","title":"Bonfire.Common.Types.ulid/1","doc":"Takes an object or list of objects and returns the ULID (Universally Unique Lexicographically Sortable Identifier) ID(s) if present in the object.","ref":"Bonfire.Common.Types.html#ulid/1"},{"type":"function","title":"Bonfire.Common.Types.ulid!/1","doc":"Takes an object and returns the ULID (Universally Unique Lexicographically Sortable Identifier) ID if present in the object. Throws an error if the ULID ID is not present.","ref":"Bonfire.Common.Types.html#ulid!/1"},{"type":"function","title":"Bonfire.Common.Types.ulids/1","doc":"","ref":"Bonfire.Common.Types.html#ulids/1"},{"type":"function","title":"Bonfire.Common.Types.ulids_or/2","doc":"","ref":"Bonfire.Common.Types.html#ulids_or/2"},{"type":"module","title":"Bonfire.Common.URIs","doc":"","ref":"Bonfire.Common.URIs.html"},{"type":"function","title":"Bonfire.Common.URIs.base_uri/1","doc":"Return the homepage URI (as struct) of the local instance","ref":"Bonfire.Common.URIs.html#base_uri/1"},{"type":"function","title":"Bonfire.Common.URIs.base_url/1","doc":"Return the homepage URL of the local instance","ref":"Bonfire.Common.URIs.html#base_url/1"},{"type":"function","title":"Bonfire.Common.URIs.canonical_url/1","doc":"Returns the canonical URL (i.e. the one used for ActivityPub federation) of an object","ref":"Bonfire.Common.URIs.html#canonical_url/1"},{"type":"function","title":"Bonfire.Common.URIs.fallback/1","doc":"","ref":"Bonfire.Common.URIs.html#fallback/1"},{"type":"function","title":"Bonfire.Common.URIs.fallback/2","doc":"","ref":"Bonfire.Common.URIs.html#fallback/2"},{"type":"function","title":"Bonfire.Common.URIs.fallback/3","doc":"","ref":"Bonfire.Common.URIs.html#fallback/3"},{"type":"function","title":"Bonfire.Common.URIs.instance_domain/1","doc":"","ref":"Bonfire.Common.URIs.html#instance_domain/1"},{"type":"function","title":"Bonfire.Common.URIs.is_uri?/1","doc":"Returns true if the given string is a valid URI.","ref":"Bonfire.Common.URIs.html#is_uri?/1"},{"type":"function","title":"Bonfire.Common.URIs.maybe_generate_canonical_url/1","doc":"","ref":"Bonfire.Common.URIs.html#maybe_generate_canonical_url/1"},{"type":"function","title":"Bonfire.Common.URIs.path/2","doc":"Returns the path (URL on the local instance) for the given object/struct (eg. a User), view or schema module, or path name (atom defined in routes), along with optional arguments.","ref":"Bonfire.Common.URIs.html#path/2"},{"type":"function","title":"Bonfire.Common.URIs.path_by_id/3","doc":"","ref":"Bonfire.Common.URIs.html#path_by_id/3"},{"type":"function","title":"Bonfire.Common.URIs.remote_canonical_url/1","doc":"","ref":"Bonfire.Common.URIs.html#remote_canonical_url/1"},{"type":"function","title":"Bonfire.Common.URIs.url_path/2","doc":"Returns the full URL (including domain and path) for a given object, module, or path name.","ref":"Bonfire.Common.URIs.html#url_path/2"},{"type":"function","title":"Bonfire.Common.URIs.validate_uri/1","doc":"Validates a URI string.","ref":"Bonfire.Common.URIs.html#validate_uri/1"},{"type":"module","title":"Bonfire.Common.Utils","doc":"Various very commonly used utility functions for the Bonfire application.","ref":"Bonfire.Common.Utils.html"},{"type":"function","title":"Bonfire.Common.Utils.apply_error/2","doc":"","ref":"Bonfire.Common.Utils.html#apply_error/2"},{"type":"function","title":"Bonfire.Common.Utils.async_task/1","doc":"Runs a function asynchronously in a Task. Like Task.async/1 but with support for multi-tenancy in the child process","ref":"Bonfire.Common.Utils.html#async_task/1"},{"type":"function","title":"Bonfire.Common.Utils.current_account/1","doc":"Returns the current account from socket, assigns, or options.","ref":"Bonfire.Common.Utils.html#current_account/1"},{"type":"function","title":"Bonfire.Common.Utils.current_account_and_or_user_ids/1","doc":"","ref":"Bonfire.Common.Utils.html#current_account_and_or_user_ids/1"},{"type":"function","title":"Bonfire.Common.Utils.current_account_auth!/2","doc":"","ref":"Bonfire.Common.Utils.html#current_account_auth!/2"},{"type":"function","title":"Bonfire.Common.Utils.current_user/2","doc":"Returns the current user from socket, assigns, or options.","ref":"Bonfire.Common.Utils.html#current_user/2"},{"type":"function","title":"Bonfire.Common.Utils.current_user_auth!/2","doc":"","ref":"Bonfire.Common.Utils.html#current_user_auth!/2"},{"type":"function","title":"Bonfire.Common.Utils.current_user_id/2","doc":"Returns the current user ID from socket, assigns, or options.","ref":"Bonfire.Common.Utils.html#current_user_id/2"},{"type":"function","title":"Bonfire.Common.Utils.current_user_required!/1","doc":"","ref":"Bonfire.Common.Utils.html#current_user_required!/1"},{"type":"function","title":"Bonfire.Common.Utils.e/2","doc":"Returns a value, or a fallback if nil/false","ref":"Bonfire.Common.Utils.html#e/2"},{"type":"function","title":"Bonfire.Common.Utils.e/3","doc":"Extracts a value from a map (and various other data structures), or returns a fallback if not present or empty. If more arguments are provided it looks for nested data (with the last argument always being the fallback).","ref":"Bonfire.Common.Utils.html#e/3"},{"type":"function","title":"Bonfire.Common.Utils.e/4","doc":"Returns a value from a nested map, or a fallback if not present","ref":"Bonfire.Common.Utils.html#e/4"},{"type":"function","title":"Bonfire.Common.Utils.e/5","doc":"","ref":"Bonfire.Common.Utils.html#e/5"},{"type":"function","title":"Bonfire.Common.Utils.e/6","doc":"","ref":"Bonfire.Common.Utils.html#e/6"},{"type":"function","title":"Bonfire.Common.Utils.e/7","doc":"","ref":"Bonfire.Common.Utils.html#e/7"},{"type":"function","title":"Bonfire.Common.Utils.e/8","doc":"","ref":"Bonfire.Common.Utils.html#e/8"},{"type":"function","title":"Bonfire.Common.Utils.empty?/1","doc":"Returns true if the given value is nil, an empty map, an empty list, or an empty string.","ref":"Bonfire.Common.Utils.html#empty?/1"},{"type":"function","title":"Bonfire.Common.Utils.maybe/2","doc":"Applies change_fn if the first parameter is not nil.","ref":"Bonfire.Common.Utils.html#maybe/2"},{"type":"function","title":"Bonfire.Common.Utils.maybe_apply/4","doc":"Helpers for calling hypothetical functions in other modules. Returns the result of calling a function with the given arguments, or the result of fallback function if the primary function is not defined (by default just logging an error message).","ref":"Bonfire.Common.Utils.html#maybe_apply/4"},{"type":"function","title":"Bonfire.Common.Utils.maybe_from_opts/3","doc":"Returns the value of a key from options keyword list or map, or a fallback if not present or empty.","ref":"Bonfire.Common.Utils.html#maybe_from_opts/3"},{"type":"function","title":"Bonfire.Common.Utils.ok_unwrap/2","doc":"Unwraps an {:ok, val} tuple, returning the value, or returns a fallback value (nil by default) if the tuple is {:error, _} or :error .","ref":"Bonfire.Common.Utils.html#ok_unwrap/2"},{"type":"function","title":"Bonfire.Common.Utils.socket_connected?/1","doc":"","ref":"Bonfire.Common.Utils.html#socket_connected?/1"},{"type":"function","title":"Bonfire.Common.Utils.to_options/1","doc":"Converts a map, user, socket, tuple, etc, to a keyword list for standardised use as function options.","ref":"Bonfire.Common.Utils.html#to_options/1"},{"type":"behaviour","title":"Bonfire.Common.WidgetModule","doc":"Widgets: components that can be added to the dashboard or sidebards","ref":"Bonfire.Common.WidgetModule.html"},{"type":"function","title":"Bonfire.Common.WidgetModule.app_modules/0","doc":"","ref":"Bonfire.Common.WidgetModule.html#app_modules/0"},{"type":"callback","title":"Bonfire.Common.WidgetModule.declared_widget/0","doc":"Declares a widget component","ref":"Bonfire.Common.WidgetModule.html#c:declared_widget/0"},{"type":"function","title":"Bonfire.Common.WidgetModule.modules/0","doc":"Callback implementation for Bonfire.Common.ExtensionBehaviour.modules/0 .","ref":"Bonfire.Common.WidgetModule.html#modules/0"},{"type":"function","title":"Bonfire.Common.WidgetModule.widget/1","doc":"Get a widget identified by module","ref":"Bonfire.Common.WidgetModule.html#widget/1"},{"type":"function","title":"Bonfire.Common.WidgetModule.widget_function_error/2","doc":"","ref":"Bonfire.Common.WidgetModule.html#widget_function_error/2"},{"type":"function","title":"Bonfire.Common.WidgetModule.widgets/0","doc":"Load all widgets at once","ref":"Bonfire.Common.WidgetModule.html#widgets/0"},{"type":"function","title":"Bonfire.Common.WidgetModule.widgets/1","doc":"Load widgets for an extension","ref":"Bonfire.Common.WidgetModule.html#widgets/1"},{"type":"module","title":"Bonfire.Ecto","doc":"Bonfire.Epics helpers for working with Ecto","ref":"Bonfire.Ecto.html"},{"type":"module","title":"Bonfire.Ecto.Acts.Begin","doc":"An Act that enters a transaction unless it senses that it would be futile.","ref":"Bonfire.Ecto.Acts.Begin.html"},{"type":"function","title":"Bonfire.Ecto.Acts.Begin.run/2","doc":"","ref":"Bonfire.Ecto.Acts.Begin.html#run/2"},{"type":"module","title":"Bonfire.Ecto.Acts.Commit","doc":"A placeholder marker used by Begin to identify when to commit the transaction.","ref":"Bonfire.Ecto.Acts.Commit.html"},{"type":"function","title":"Bonfire.Ecto.Acts.Commit.run/2","doc":"","ref":"Bonfire.Ecto.Acts.Commit.html#run/2"},{"type":"module","title":"Bonfire.Ecto.Acts.Delete","doc":"An act that marks a changeset or struct for deletion","ref":"Bonfire.Ecto.Acts.Delete.html"},{"type":"function","title":"Bonfire.Ecto.Acts.Delete.maybe_delete/2","doc":"","ref":"Bonfire.Ecto.Acts.Delete.html#maybe_delete/2"},{"type":"function","title":"Bonfire.Ecto.Acts.Delete.run/2","doc":"","ref":"Bonfire.Ecto.Acts.Delete.html#run/2"},{"type":"module","title":"Bonfire.Ecto.Acts.Work","doc":"An act that performs queued up work in a transaction. Work is queued up with calls to add/2 in earlier acts and when run, this act will apply the appropriate actions. Only runs if there are no epic or changesets errors.","ref":"Bonfire.Ecto.Acts.Work.html"},{"type":"function","title":"Bonfire.Ecto.Acts.Work.add/2","doc":"Records that a particular key contains a changeset for processing. Use in earlier acts, to schedule work for in-transaction. If you wish to delete, you must ensure you set the changeset's :action key to :delete .","ref":"Bonfire.Ecto.Acts.Work.html#add/2"},{"type":"module","title":"Bonfire.Epics","doc":"","ref":"Bonfire.Epics.html"},{"type":"macro","title":"Bonfire.Epics.maybe_debug/3","doc":"","ref":"Bonfire.Epics.html#maybe_debug/3"},{"type":"macro","title":"Bonfire.Epics.maybe_debug/4","doc":"","ref":"Bonfire.Epics.html#maybe_debug/4"},{"type":"macro","title":"Bonfire.Epics.smart/4","doc":"Like debug , but will omit fully outputting the inspectable thing and still print the message if only :debug is set","ref":"Bonfire.Epics.html#smart/4"},{"type":"behaviour","title":"Bonfire.Epics.Act","doc":"","ref":"Bonfire.Epics.Act.html"},{"type":"macro","title":"Bonfire.Epics.Act.debug/3","doc":"","ref":"Bonfire.Epics.Act.html#debug/3"},{"type":"function","title":"Bonfire.Epics.Act.new/1","doc":"","ref":"Bonfire.Epics.Act.html#new/1"},{"type":"function","title":"Bonfire.Epics.Act.new/2","doc":"","ref":"Bonfire.Epics.Act.html#new/2"},{"type":"function","title":"Bonfire.Epics.Act.new/3","doc":"","ref":"Bonfire.Epics.Act.html#new/3"},{"type":"callback","title":"Bonfire.Epics.Act.run/2","doc":"","ref":"Bonfire.Epics.Act.html#c:run/2"},{"type":"type","title":"Bonfire.Epics.Act.ret/0","doc":"","ref":"Bonfire.Epics.Act.html#t:ret/0"},{"type":"type","title":"Bonfire.Epics.Act.t/0","doc":"","ref":"Bonfire.Epics.Act.html#t:t/0"},{"type":"module","title":"Bonfire.Epics.Debug","doc":"","ref":"Bonfire.Epics.Debug.html"},{"type":"function","title":"Bonfire.Epics.Debug.do_maybe_debug/4","doc":"","ref":"Bonfire.Epics.Debug.html#do_maybe_debug/4"},{"type":"function","title":"Bonfire.Epics.Debug.opts/2","doc":"","ref":"Bonfire.Epics.Debug.html#opts/2"},{"type":"module","title":"Bonfire.Epics.Epic","doc":"","ref":"Bonfire.Epics.Epic.html"},{"type":"function","title":"Bonfire.Epics.Epic.add_error/2","doc":"","ref":"Bonfire.Epics.Epic.html#add_error/2"},{"type":"function","title":"Bonfire.Epics.Epic.add_error/5","doc":"","ref":"Bonfire.Epics.Epic.html#add_error/5"},{"type":"function","title":"Bonfire.Epics.Epic.append/2","doc":"","ref":"Bonfire.Epics.Epic.html#append/2"},{"type":"function","title":"Bonfire.Epics.Epic.assign/2","doc":"","ref":"Bonfire.Epics.Epic.html#assign/2"},{"type":"function","title":"Bonfire.Epics.Epic.assign/3","doc":"","ref":"Bonfire.Epics.Epic.html#assign/3"},{"type":"macro","title":"Bonfire.Epics.Epic.debug/3","doc":"","ref":"Bonfire.Epics.Epic.html#debug/3"},{"type":"function","title":"Bonfire.Epics.Epic.from_config!/2","doc":"Loads an epic from the app's config","ref":"Bonfire.Epics.Epic.html#from_config!/2"},{"type":"function","title":"Bonfire.Epics.Epic.from_spec!/1","doc":"Loads an epic from a specification of steps","ref":"Bonfire.Epics.Epic.html#from_spec!/1"},{"type":"macro","title":"Bonfire.Epics.Epic.maybe_debug/3","doc":"","ref":"Bonfire.Epics.Epic.html#maybe_debug/3"},{"type":"function","title":"Bonfire.Epics.Epic.new/1","doc":"","ref":"Bonfire.Epics.Epic.html#new/1"},{"type":"function","title":"Bonfire.Epics.Epic.prepend/2","doc":"","ref":"Bonfire.Epics.Epic.html#prepend/2"},{"type":"function","title":"Bonfire.Epics.Epic.render_errors/1","doc":"","ref":"Bonfire.Epics.Epic.html#render_errors/1"},{"type":"function","title":"Bonfire.Epics.Epic.run/1","doc":"","ref":"Bonfire.Epics.Epic.html#run/1"},{"type":"function","title":"Bonfire.Epics.Epic.update/4","doc":"","ref":"Bonfire.Epics.Epic.html#update/4"},{"type":"type","title":"Bonfire.Epics.Epic.t/0","doc":"","ref":"Bonfire.Epics.Epic.html#t:t/0"},{"type":"exception","title":"Bonfire.Epics.Error","doc":"","ref":"Bonfire.Epics.Error.html"},{"type":"function","title":"Bonfire.Epics.Error.message/1","doc":"Callback implementation for Exception.message/1 .","ref":"Bonfire.Epics.Error.html#message/1"},{"type":"module","title":"Bonfire.Epics.Test","doc":"","ref":"Bonfire.Epics.Test.html"},{"type":"macro","title":"Bonfire.Epics.Test.assert_epic_ok/1","doc":"","ref":"Bonfire.Epics.Test.html#assert_epic_ok/1"},{"type":"function","title":"Bonfire.Epics.Test.debug_error/1","doc":"","ref":"Bonfire.Epics.Test.html#debug_error/1"},{"type":"module","title":"Bonfire.Files","doc":"This module contains general functions for handling files, and also an Ecto schema which is a multimixin for storing one or more media attached to a Pointable object. An uploader definition must be provided for each new upload, or will be automatically chosen based on the file type. A few definitions exist as defaults inside of this namespace, but you can also define your own - a Bonfire.Files.Definition is an extension of Waffle.Definition , however the allowed_media_types/0 callback is added, forcing you to define what media types are accepted for these types of uploads. (You can also return :all to accept everything). To use the uploader: iex&gt; { :ok , media } = Bonfire.Files . upload ( MyUploader , context , %{ path : &quot;./150.png&quot; } ) iex&gt; media . media_type &quot;image/png&quot; iex&gt; Bonfire.Files . remote_url ( MyUploader , media ) &quot;/uploads/my/01F3AY6JV30G06BY4DR9BTW5EH&quot;","ref":"Bonfire.Files.html"},{"type":"function","title":"Bonfire.Files.ap_publish_activity/1","doc":"","ref":"Bonfire.Files.html#ap_publish_activity/1"},{"type":"function","title":"Bonfire.Files.ap_receive_attachments/2","doc":"","ref":"Bonfire.Files.html#ap_receive_attachments/2"},{"type":"function","title":"Bonfire.Files.data_url/2","doc":"","ref":"Bonfire.Files.html#data_url/2"},{"type":"function","title":"Bonfire.Files.extract_metadata/1","doc":"","ref":"Bonfire.Files.html#extract_metadata/1"},{"type":"function","title":"Bonfire.Files.file_extension/1","doc":"","ref":"Bonfire.Files.html#file_extension/1"},{"type":"function","title":"Bonfire.Files.file_extension_only/1","doc":"","ref":"Bonfire.Files.html#file_extension_only/1"},{"type":"function","title":"Bonfire.Files.full_url/2","doc":"","ref":"Bonfire.Files.html#full_url/2"},{"type":"function","title":"Bonfire.Files.remote_url/3","doc":"Return the URL that a local file has.","ref":"Bonfire.Files.html#remote_url/3"},{"type":"function","title":"Bonfire.Files.upload/5","doc":"Attempt to store a file, returning an upload, for any parent item that participates in the meta abstraction, providing the user/context of the upload.","ref":"Bonfire.Files.html#upload/5"},{"type":"function","title":"Bonfire.Files.verify_media_type/2","doc":"","ref":"Bonfire.Files.html#verify_media_type/2"},{"type":"module","title":"Bonfire.Files.Acts.AttachMedia","doc":"Saves uploaded files as attachments to the post. Act Options: :changeset - key in assigns to find changeset, required :attrs - epic options key to find the attributes at, default: :post_attrs . :uploads - epic options key to find the uploaded media objects at, default: :uploaded_media .","ref":"Bonfire.Files.Acts.AttachMedia.html"},{"type":"function","title":"Bonfire.Files.Acts.AttachMedia.run/2","doc":"","ref":"Bonfire.Files.Acts.AttachMedia.html#run/2"},{"type":"module","title":"Bonfire.Files.Acts.URLPreviews","doc":"Fetch and save metadata of URLs Act Options: :changeset - key in assigns to find changeset, required :attrs - epic options key to find the attributes at, default: :post_attrs . :uploads - epic options key to find the uploaded media objects at, default: :urls .","ref":"Bonfire.Files.Acts.URLPreviews.html"},{"type":"function","title":"Bonfire.Files.Acts.URLPreviews.maybe_fetch_and_save/2","doc":"","ref":"Bonfire.Files.Acts.URLPreviews.html#maybe_fetch_and_save/2"},{"type":"function","title":"Bonfire.Files.Acts.URLPreviews.run/2","doc":"","ref":"Bonfire.Files.Acts.URLPreviews.html#run/2"},{"type":"module","title":"Bonfire.Files.BannerUploader","doc":"Uploader for larger images, for example, a profile page banner. Does not do any type of image resizing/thumbnailing.","ref":"Bonfire.Files.BannerUploader.html"},{"type":"function","title":"Bonfire.Files.BannerUploader.acl/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#acl/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.allowed_media_types/0","doc":"Callback implementation for Bonfire.Files.Definition.allowed_media_types/0 .","ref":"Bonfire.Files.BannerUploader.html#allowed_media_types/0"},{"type":"function","title":"Bonfire.Files.BannerUploader.asset_host/0","doc":"","ref":"Bonfire.Files.BannerUploader.html#asset_host/0"},{"type":"function","title":"Bonfire.Files.BannerUploader.async/0","doc":"","ref":"Bonfire.Files.BannerUploader.html#async/0"},{"type":"function","title":"Bonfire.Files.BannerUploader.blurhash/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#blurhash/1"},{"type":"function","title":"Bonfire.Files.BannerUploader.blurred/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#blurred/1"},{"type":"function","title":"Bonfire.Files.BannerUploader.bucket/0","doc":"","ref":"Bonfire.Files.BannerUploader.html#bucket/0"},{"type":"function","title":"Bonfire.Files.BannerUploader.bucket/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#bucket/1"},{"type":"function","title":"Bonfire.Files.BannerUploader.default_url/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#default_url/1"},{"type":"function","title":"Bonfire.Files.BannerUploader.default_url/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#default_url/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.delete/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#delete/1"},{"type":"function","title":"Bonfire.Files.BannerUploader.filename/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#filename/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.remote_file_headers/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#remote_file_headers/1"},{"type":"function","title":"Bonfire.Files.BannerUploader.remote_url/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#remote_url/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.s3_object_headers/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#s3_object_headers/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.storage_dir/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#storage_dir/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.storage_dir_prefix/0","doc":"","ref":"Bonfire.Files.BannerUploader.html#storage_dir_prefix/0"},{"type":"function","title":"Bonfire.Files.BannerUploader.store/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#store/1"},{"type":"function","title":"Bonfire.Files.BannerUploader.transform/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#transform/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.upload/4","doc":"","ref":"Bonfire.Files.BannerUploader.html#upload/4"},{"type":"function","title":"Bonfire.Files.BannerUploader.url/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#url/1"},{"type":"function","title":"Bonfire.Files.BannerUploader.url/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#url/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.url/3","doc":"","ref":"Bonfire.Files.BannerUploader.html#url/3"},{"type":"function","title":"Bonfire.Files.BannerUploader.urls/2","doc":"","ref":"Bonfire.Files.BannerUploader.html#urls/2"},{"type":"function","title":"Bonfire.Files.BannerUploader.validate/1","doc":"","ref":"Bonfire.Files.BannerUploader.html#validate/1"},{"type":"module","title":"Bonfire.Files.Blurred","doc":"","ref":"Bonfire.Files.Blurred.html"},{"type":"function","title":"Bonfire.Files.Blurred.blurhash/2","doc":"","ref":"Bonfire.Files.Blurred.html#blurhash/2"},{"type":"function","title":"Bonfire.Files.Blurred.blurred/2","doc":"Create a blurred JPEG (deprecate in favour of blurhash)","ref":"Bonfire.Files.Blurred.html#blurred/2"},{"type":"function","title":"Bonfire.Files.Blurred.make_blurhash/1","doc":"","ref":"Bonfire.Files.Blurred.html#make_blurhash/1"},{"type":"behaviour","title":"Bonfire.Files.Definition","doc":"Extension to Waffle.Definition, adding support for checking against media types parsed through magic bytes instead of file extensions, which can be modified by the user. You can still use validate/2 and other waffle callbacks.","ref":"Bonfire.Files.Definition.html"},{"type":"callback","title":"Bonfire.Files.Definition.allowed_media_types/0","doc":"","ref":"Bonfire.Files.Definition.html#c:allowed_media_types/0"},{"type":"module","title":"Bonfire.Files.DocumentUploader","doc":"","ref":"Bonfire.Files.DocumentUploader.html"},{"type":"function","title":"Bonfire.Files.DocumentUploader.acl/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#acl/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.allowed_media_types/0","doc":"Callback implementation for Bonfire.Files.Definition.allowed_media_types/0 .","ref":"Bonfire.Files.DocumentUploader.html#allowed_media_types/0"},{"type":"function","title":"Bonfire.Files.DocumentUploader.asset_host/0","doc":"","ref":"Bonfire.Files.DocumentUploader.html#asset_host/0"},{"type":"function","title":"Bonfire.Files.DocumentUploader.async/0","doc":"","ref":"Bonfire.Files.DocumentUploader.html#async/0"},{"type":"function","title":"Bonfire.Files.DocumentUploader.blurhash/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#blurhash/1"},{"type":"function","title":"Bonfire.Files.DocumentUploader.blurred/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#blurred/1"},{"type":"function","title":"Bonfire.Files.DocumentUploader.bucket/0","doc":"Definition for any type of document, allows most media types that support documents, archives, video and audio.","ref":"Bonfire.Files.DocumentUploader.html#bucket/0"},{"type":"function","title":"Bonfire.Files.DocumentUploader.bucket/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#bucket/1"},{"type":"function","title":"Bonfire.Files.DocumentUploader.default_url/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#default_url/1"},{"type":"function","title":"Bonfire.Files.DocumentUploader.default_url/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#default_url/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.delete/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#delete/1"},{"type":"function","title":"Bonfire.Files.DocumentUploader.filename/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#filename/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.remote_file_headers/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#remote_file_headers/1"},{"type":"function","title":"Bonfire.Files.DocumentUploader.remote_url/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#remote_url/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.s3_object_headers/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#s3_object_headers/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.storage_dir/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#storage_dir/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.storage_dir_prefix/0","doc":"","ref":"Bonfire.Files.DocumentUploader.html#storage_dir_prefix/0"},{"type":"function","title":"Bonfire.Files.DocumentUploader.store/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#store/1"},{"type":"function","title":"Bonfire.Files.DocumentUploader.transform/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#transform/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.upload/4","doc":"","ref":"Bonfire.Files.DocumentUploader.html#upload/4"},{"type":"function","title":"Bonfire.Files.DocumentUploader.url/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#url/1"},{"type":"function","title":"Bonfire.Files.DocumentUploader.url/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#url/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.url/3","doc":"","ref":"Bonfire.Files.DocumentUploader.html#url/3"},{"type":"function","title":"Bonfire.Files.DocumentUploader.urls/2","doc":"","ref":"Bonfire.Files.DocumentUploader.html#urls/2"},{"type":"function","title":"Bonfire.Files.DocumentUploader.validate/1","doc":"","ref":"Bonfire.Files.DocumentUploader.html#validate/1"},{"type":"module","title":"Bonfire.Files.FaviconStore","doc":"","ref":"Bonfire.Files.FaviconStore.html"},{"type":"function","title":"Bonfire.Files.FaviconStore.acl/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#acl/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.allowed_media_types/0","doc":"Callback implementation for Bonfire.Files.Definition.allowed_media_types/0 .","ref":"Bonfire.Files.FaviconStore.html#allowed_media_types/0"},{"type":"function","title":"Bonfire.Files.FaviconStore.asset_host/0","doc":"","ref":"Bonfire.Files.FaviconStore.html#asset_host/0"},{"type":"function","title":"Bonfire.Files.FaviconStore.async/0","doc":"","ref":"Bonfire.Files.FaviconStore.html#async/0"},{"type":"function","title":"Bonfire.Files.FaviconStore.blurhash/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#blurhash/1"},{"type":"function","title":"Bonfire.Files.FaviconStore.blurred/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#blurred/1"},{"type":"function","title":"Bonfire.Files.FaviconStore.bucket/0","doc":"Definition for storing media types for a URL","ref":"Bonfire.Files.FaviconStore.html#bucket/0"},{"type":"function","title":"Bonfire.Files.FaviconStore.bucket/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#bucket/1"},{"type":"function","title":"Bonfire.Files.FaviconStore.cached_or_async_fetch_url/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#cached_or_async_fetch_url/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.cached_or_fetch/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#cached_or_fetch/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.default_url/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#default_url/1"},{"type":"function","title":"Bonfire.Files.FaviconStore.default_url/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#default_url/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.delete/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#delete/1"},{"type":"function","title":"Bonfire.Files.FaviconStore.favicon_url/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#favicon_url/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.filename/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#filename/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.remote_file_headers/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#remote_file_headers/1"},{"type":"function","title":"Bonfire.Files.FaviconStore.remote_url/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#remote_url/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.s3_object_headers/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#s3_object_headers/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.storage_dir/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#storage_dir/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.storage_dir_prefix/0","doc":"","ref":"Bonfire.Files.FaviconStore.html#storage_dir_prefix/0"},{"type":"function","title":"Bonfire.Files.FaviconStore.store/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#store/1"},{"type":"function","title":"Bonfire.Files.FaviconStore.transform/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#transform/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.upload/4","doc":"","ref":"Bonfire.Files.FaviconStore.html#upload/4"},{"type":"function","title":"Bonfire.Files.FaviconStore.url/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#url/1"},{"type":"function","title":"Bonfire.Files.FaviconStore.url/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#url/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.url/3","doc":"","ref":"Bonfire.Files.FaviconStore.html#url/3"},{"type":"function","title":"Bonfire.Files.FaviconStore.urls/2","doc":"","ref":"Bonfire.Files.FaviconStore.html#urls/2"},{"type":"function","title":"Bonfire.Files.FaviconStore.validate/1","doc":"","ref":"Bonfire.Files.FaviconStore.html#validate/1"},{"type":"module","title":"Bonfire.Files.FileDenied","doc":"","ref":"Bonfire.Files.FileDenied.html"},{"type":"function","title":"Bonfire.Files.FileDenied.new/1","doc":"","ref":"Bonfire.Files.FileDenied.html#new/1"},{"type":"type","title":"Bonfire.Files.FileDenied.t/0","doc":"","ref":"Bonfire.Files.FileDenied.html#t:t/0"},{"type":"module","title":"Bonfire.Files.IconUploader","doc":"","ref":"Bonfire.Files.IconUploader.html"},{"type":"function","title":"Bonfire.Files.IconUploader.acl/2","doc":"","ref":"Bonfire.Files.IconUploader.html#acl/2"},{"type":"function","title":"Bonfire.Files.IconUploader.allowed_media_types/0","doc":"Callback implementation for Bonfire.Files.Definition.allowed_media_types/0 .","ref":"Bonfire.Files.IconUploader.html#allowed_media_types/0"},{"type":"function","title":"Bonfire.Files.IconUploader.asset_host/0","doc":"","ref":"Bonfire.Files.IconUploader.html#asset_host/0"},{"type":"function","title":"Bonfire.Files.IconUploader.async/0","doc":"","ref":"Bonfire.Files.IconUploader.html#async/0"},{"type":"function","title":"Bonfire.Files.IconUploader.blurhash/1","doc":"","ref":"Bonfire.Files.IconUploader.html#blurhash/1"},{"type":"function","title":"Bonfire.Files.IconUploader.blurred/1","doc":"","ref":"Bonfire.Files.IconUploader.html#blurred/1"},{"type":"function","title":"Bonfire.Files.IconUploader.bucket/0","doc":"Uploader for smaller image icons, usually used as avatars. TODO: Support resizing.","ref":"Bonfire.Files.IconUploader.html#bucket/0"},{"type":"function","title":"Bonfire.Files.IconUploader.bucket/1","doc":"","ref":"Bonfire.Files.IconUploader.html#bucket/1"},{"type":"function","title":"Bonfire.Files.IconUploader.default_url/1","doc":"","ref":"Bonfire.Files.IconUploader.html#default_url/1"},{"type":"function","title":"Bonfire.Files.IconUploader.default_url/2","doc":"","ref":"Bonfire.Files.IconUploader.html#default_url/2"},{"type":"function","title":"Bonfire.Files.IconUploader.delete/1","doc":"","ref":"Bonfire.Files.IconUploader.html#delete/1"},{"type":"function","title":"Bonfire.Files.IconUploader.filename/2","doc":"","ref":"Bonfire.Files.IconUploader.html#filename/2"},{"type":"function","title":"Bonfire.Files.IconUploader.remote_file_headers/1","doc":"","ref":"Bonfire.Files.IconUploader.html#remote_file_headers/1"},{"type":"function","title":"Bonfire.Files.IconUploader.remote_url/2","doc":"","ref":"Bonfire.Files.IconUploader.html#remote_url/2"},{"type":"function","title":"Bonfire.Files.IconUploader.s3_object_headers/2","doc":"","ref":"Bonfire.Files.IconUploader.html#s3_object_headers/2"},{"type":"function","title":"Bonfire.Files.IconUploader.storage_dir/2","doc":"","ref":"Bonfire.Files.IconUploader.html#storage_dir/2"},{"type":"function","title":"Bonfire.Files.IconUploader.storage_dir_prefix/0","doc":"","ref":"Bonfire.Files.IconUploader.html#storage_dir_prefix/0"},{"type":"function","title":"Bonfire.Files.IconUploader.store/1","doc":"","ref":"Bonfire.Files.IconUploader.html#store/1"},{"type":"function","title":"Bonfire.Files.IconUploader.transform/2","doc":"","ref":"Bonfire.Files.IconUploader.html#transform/2"},{"type":"function","title":"Bonfire.Files.IconUploader.upload/4","doc":"","ref":"Bonfire.Files.IconUploader.html#upload/4"},{"type":"function","title":"Bonfire.Files.IconUploader.url/1","doc":"","ref":"Bonfire.Files.IconUploader.html#url/1"},{"type":"function","title":"Bonfire.Files.IconUploader.url/2","doc":"","ref":"Bonfire.Files.IconUploader.html#url/2"},{"type":"function","title":"Bonfire.Files.IconUploader.url/3","doc":"","ref":"Bonfire.Files.IconUploader.html#url/3"},{"type":"function","title":"Bonfire.Files.IconUploader.urls/2","doc":"","ref":"Bonfire.Files.IconUploader.html#urls/2"},{"type":"function","title":"Bonfire.Files.IconUploader.validate/1","doc":"","ref":"Bonfire.Files.IconUploader.html#validate/1"},{"type":"module","title":"Bonfire.Files.Image.Edit","doc":"","ref":"Bonfire.Files.Image.Edit.html"},{"type":"function","title":"Bonfire.Files.Image.Edit.banner/3","doc":"","ref":"Bonfire.Files.Image.Edit.html#banner/3"},{"type":"function","title":"Bonfire.Files.Image.Edit.blur/2","doc":"","ref":"Bonfire.Files.Image.Edit.html#blur/2"},{"type":"function","title":"Bonfire.Files.Image.Edit.image/3","doc":"","ref":"Bonfire.Files.Image.Edit.html#image/3"},{"type":"function","title":"Bonfire.Files.Image.Edit.thumbnail/1","doc":"","ref":"Bonfire.Files.Image.Edit.html#thumbnail/1"},{"type":"module","title":"Bonfire.Files.ImageUploader","doc":"Uploader for larger images, for example, a profile page banner. Does not do any type of image resizing/thumbnailing.","ref":"Bonfire.Files.ImageUploader.html"},{"type":"function","title":"Bonfire.Files.ImageUploader.acl/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#acl/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.allowed_media_types/0","doc":"Callback implementation for Bonfire.Files.Definition.allowed_media_types/0 .","ref":"Bonfire.Files.ImageUploader.html#allowed_media_types/0"},{"type":"function","title":"Bonfire.Files.ImageUploader.asset_host/0","doc":"","ref":"Bonfire.Files.ImageUploader.html#asset_host/0"},{"type":"function","title":"Bonfire.Files.ImageUploader.async/0","doc":"","ref":"Bonfire.Files.ImageUploader.html#async/0"},{"type":"function","title":"Bonfire.Files.ImageUploader.blurhash/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#blurhash/1"},{"type":"function","title":"Bonfire.Files.ImageUploader.blurred/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#blurred/1"},{"type":"function","title":"Bonfire.Files.ImageUploader.bucket/0","doc":"","ref":"Bonfire.Files.ImageUploader.html#bucket/0"},{"type":"function","title":"Bonfire.Files.ImageUploader.bucket/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#bucket/1"},{"type":"function","title":"Bonfire.Files.ImageUploader.default_url/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#default_url/1"},{"type":"function","title":"Bonfire.Files.ImageUploader.default_url/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#default_url/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.delete/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#delete/1"},{"type":"function","title":"Bonfire.Files.ImageUploader.filename/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#filename/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.remote_file_headers/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#remote_file_headers/1"},{"type":"function","title":"Bonfire.Files.ImageUploader.remote_url/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#remote_url/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.s3_object_headers/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#s3_object_headers/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.storage_dir/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#storage_dir/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.storage_dir_prefix/0","doc":"","ref":"Bonfire.Files.ImageUploader.html#storage_dir_prefix/0"},{"type":"function","title":"Bonfire.Files.ImageUploader.store/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#store/1"},{"type":"function","title":"Bonfire.Files.ImageUploader.transform/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#transform/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.upload/4","doc":"","ref":"Bonfire.Files.ImageUploader.html#upload/4"},{"type":"function","title":"Bonfire.Files.ImageUploader.url/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#url/1"},{"type":"function","title":"Bonfire.Files.ImageUploader.url/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#url/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.url/3","doc":"","ref":"Bonfire.Files.ImageUploader.html#url/3"},{"type":"function","title":"Bonfire.Files.ImageUploader.urls/2","doc":"","ref":"Bonfire.Files.ImageUploader.html#urls/2"},{"type":"function","title":"Bonfire.Files.ImageUploader.validate/1","doc":"","ref":"Bonfire.Files.ImageUploader.html#validate/1"},{"type":"module","title":"Bonfire.Files.LiveHandler","doc":"","ref":"Bonfire.Files.LiveHandler.html"},{"type":"function","title":"Bonfire.Files.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Files.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Files.LiveHandler.handle_progress/3","doc":"","ref":"Bonfire.Files.LiveHandler.html#handle_progress/3"},{"type":"function","title":"Bonfire.Files.LiveHandler.set_fallback/5","doc":"","ref":"Bonfire.Files.LiveHandler.html#set_fallback/5"},{"type":"macro","title":"Bonfire.Files.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Files.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Files.Media","doc":"","ref":"Bonfire.Files.Media.html"},{"type":"function","title":"Bonfire.Files.Media.changeset/2","doc":"","ref":"Bonfire.Files.Media.html#changeset/2"},{"type":"function","title":"Bonfire.Files.Media.hard_delete/2","doc":"Delete an upload, removing any associated files.","ref":"Bonfire.Files.Media.html#hard_delete/2"},{"type":"function","title":"Bonfire.Files.Media.insert/4","doc":"","ref":"Bonfire.Files.Media.html#insert/4"},{"type":"function","title":"Bonfire.Files.Media.many/1","doc":"","ref":"Bonfire.Files.Media.html#many/1"},{"type":"function","title":"Bonfire.Files.Media.one/1","doc":"","ref":"Bonfire.Files.Media.html#one/1"},{"type":"function","title":"Bonfire.Files.Media.soft_delete/1","doc":"Delete an upload, removing it from indexing, but the files remain available.","ref":"Bonfire.Files.Media.html#soft_delete/1"},{"type":"function","title":"Bonfire.Files.Media.update_by/2","doc":"","ref":"Bonfire.Files.Media.html#update_by/2"},{"type":"type","title":"Bonfire.Files.Media.t/0","doc":"","ref":"Bonfire.Files.Media.html#t:t/0"},{"type":"module","title":"Bonfire.Files.Media.Queries","doc":"","ref":"Bonfire.Files.Media.Queries.html"},{"type":"function","title":"Bonfire.Files.Media.Queries.filter/2","doc":"Filter the query according to arbitrary criteria","ref":"Bonfire.Files.Media.Queries.html#filter/2"},{"type":"function","title":"Bonfire.Files.Media.Queries.query/1","doc":"","ref":"Bonfire.Files.Media.Queries.html#query/1"},{"type":"function","title":"Bonfire.Files.Media.Queries.query/2","doc":"","ref":"Bonfire.Files.Media.Queries.html#query/2"},{"type":"module","title":"Bonfire.Files.Routes","doc":"","ref":"Bonfire.Files.Routes.html"},{"type":"module","title":"Bonfire.Files.RuntimeConfig","doc":"","ref":"Bonfire.Files.RuntimeConfig.html"},{"type":"function","title":"Bonfire.Files.RuntimeConfig.config/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config/0 .","ref":"Bonfire.Files.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.Files.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.Files.RuntimeConfig.html#config_module/0"},{"type":"module","title":"Bonfire.Mailer","doc":"","ref":"Bonfire.Mailer.html"},{"type":"function","title":"Bonfire.Mailer.config/0","doc":"","ref":"Bonfire.Mailer.html#config/0"},{"type":"function","title":"Bonfire.Mailer.deliver/1","doc":"","ref":"Bonfire.Mailer.html#deliver/1"},{"type":"function","title":"Bonfire.Mailer.deliver_later/2","doc":"","ref":"Bonfire.Mailer.html#deliver_later/2"},{"type":"function","title":"Bonfire.Mailer.deliver_later!/2","doc":"","ref":"Bonfire.Mailer.html#deliver_later!/2"},{"type":"function","title":"Bonfire.Mailer.deliver_now/2","doc":"","ref":"Bonfire.Mailer.html#deliver_now/2"},{"type":"function","title":"Bonfire.Mailer.deliver_now!/2","doc":"","ref":"Bonfire.Mailer.html#deliver_now!/2"},{"type":"function","title":"Bonfire.Mailer.handle_error/2","doc":"","ref":"Bonfire.Mailer.html#handle_error/2"},{"type":"function","title":"Bonfire.Mailer.send_app_feedback/3","doc":"","ref":"Bonfire.Mailer.html#send_app_feedback/3"},{"type":"function","title":"Bonfire.Mailer.send_now/3","doc":"","ref":"Bonfire.Mailer.html#send_now/3"},{"type":"module","title":"Bonfire.Mailer.Checker","doc":"Functions for checking the validity of email addresses and domains","ref":"Bonfire.Mailer.Checker.html"},{"type":"function","title":"Bonfire.Mailer.Checker.validate_domain/1","doc":"Checks whether an email domain is valid, returns a reason if not","ref":"Bonfire.Mailer.Checker.html#validate_domain/1"},{"type":"function","title":"Bonfire.Mailer.Checker.validate_email/1","doc":"Checks whether an email is valid, returns a reason if not","ref":"Bonfire.Mailer.Checker.html#validate_email/1"},{"type":"type","title":"Bonfire.Mailer.Checker.error_reason/0","doc":"","ref":"Bonfire.Mailer.Checker.html#t:error_reason/0"},{"type":"module","title":"Bonfire.Mailer.RuntimeConfig","doc":"","ref":"Bonfire.Mailer.RuntimeConfig.html"},{"type":"function","title":"Bonfire.Mailer.RuntimeConfig.config/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config/0 .","ref":"Bonfire.Mailer.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.Mailer.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.Mailer.RuntimeConfig.html#config_module/0"},{"type":"function","title":"Bonfire.Mailer.RuntimeConfig.mail_blackhole/1","doc":"","ref":"Bonfire.Mailer.RuntimeConfig.html#mail_blackhole/1"},{"type":"function","title":"Bonfire.Mailer.RuntimeConfig.mail_service/2","doc":"","ref":"Bonfire.Mailer.RuntimeConfig.html#mail_service/2"},{"type":"module","title":"Bonfire.Web.Endpoint","doc":"","ref":"Bonfire.Web.Endpoint.html"},{"type":"function","title":"Bonfire.Web.Endpoint.broadcast/3","doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"Bonfire.Web.Endpoint.html#broadcast/3"},{"type":"function","title":"Bonfire.Web.Endpoint.broadcast!/3","doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"Bonfire.Web.Endpoint.html#broadcast!/3"},{"type":"function","title":"Bonfire.Web.Endpoint.broadcast_from/4","doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"Bonfire.Web.Endpoint.html#broadcast_from/4"},{"type":"function","title":"Bonfire.Web.Endpoint.broadcast_from!/4","doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"Bonfire.Web.Endpoint.html#broadcast_from!/4"},{"type":"function","title":"Bonfire.Web.Endpoint.call/2","doc":"Callback implementation for Plug.call/2 .","ref":"Bonfire.Web.Endpoint.html#call/2"},{"type":"function","title":"Bonfire.Web.Endpoint.child_spec/1","doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"Bonfire.Web.Endpoint.html#child_spec/1"},{"type":"function","title":"Bonfire.Web.Endpoint.config/2","doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"Bonfire.Web.Endpoint.html#config/2"},{"type":"function","title":"Bonfire.Web.Endpoint.config_change/2","doc":"Reloads the configuration given the application environment changes.","ref":"Bonfire.Web.Endpoint.html#config_change/2"},{"type":"function","title":"Bonfire.Web.Endpoint.generate_reverse_router!/0","doc":"(re)generates the reverse router (useful so it can be re-generated when extensions are enabled/disabled)","ref":"Bonfire.Web.Endpoint.html#generate_reverse_router!/0"},{"type":"function","title":"Bonfire.Web.Endpoint.host/0","doc":"Returns the host for the given endpoint.","ref":"Bonfire.Web.Endpoint.html#host/0"},{"type":"function","title":"Bonfire.Web.Endpoint.include_assets/1","doc":"","ref":"Bonfire.Web.Endpoint.html#include_assets/1"},{"type":"function","title":"Bonfire.Web.Endpoint.include_assets/2","doc":"","ref":"Bonfire.Web.Endpoint.html#include_assets/2"},{"type":"function","title":"Bonfire.Web.Endpoint.init/1","doc":"Callback implementation for Plug.init/1 .","ref":"Bonfire.Web.Endpoint.html#init/1"},{"type":"function","title":"Bonfire.Web.Endpoint.local_broadcast/3","doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"Bonfire.Web.Endpoint.html#local_broadcast/3"},{"type":"function","title":"Bonfire.Web.Endpoint.local_broadcast_from/4","doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"Bonfire.Web.Endpoint.html#local_broadcast_from/4"},{"type":"function","title":"Bonfire.Web.Endpoint.path/1","doc":"Generates the path information when routing to this endpoint.","ref":"Bonfire.Web.Endpoint.html#path/1"},{"type":"function","title":"Bonfire.Web.Endpoint.reload!/0","doc":"","ref":"Bonfire.Web.Endpoint.html#reload!/0"},{"type":"function","title":"Bonfire.Web.Endpoint.script_name/0","doc":"Generates the script name.","ref":"Bonfire.Web.Endpoint.html#script_name/0"},{"type":"function","title":"Bonfire.Web.Endpoint.start_link/1","doc":"Starts the endpoint supervision tree. All other options are merged into the endpoint configuration.","ref":"Bonfire.Web.Endpoint.html#start_link/1"},{"type":"function","title":"Bonfire.Web.Endpoint.static_integrity/1","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"Bonfire.Web.Endpoint.html#static_integrity/1"},{"type":"function","title":"Bonfire.Web.Endpoint.static_lookup/1","doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"Bonfire.Web.Endpoint.html#static_lookup/1"},{"type":"function","title":"Bonfire.Web.Endpoint.static_path/1","doc":"Generates a route to a static file in priv/static .","ref":"Bonfire.Web.Endpoint.html#static_path/1"},{"type":"function","title":"Bonfire.Web.Endpoint.static_url/0","doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"Bonfire.Web.Endpoint.html#static_url/0"},{"type":"function","title":"Bonfire.Web.Endpoint.struct_url/0","doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"Bonfire.Web.Endpoint.html#struct_url/0"},{"type":"function","title":"Bonfire.Web.Endpoint.subscribe/2","doc":"Callback implementation for Phoenix.Endpoint.subscribe/2 .","ref":"Bonfire.Web.Endpoint.html#subscribe/2"},{"type":"function","title":"Bonfire.Web.Endpoint.unsubscribe/1","doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1 .","ref":"Bonfire.Web.Endpoint.html#unsubscribe/1"},{"type":"function","title":"Bonfire.Web.Endpoint.url/0","doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"Bonfire.Web.Endpoint.html#url/0"},{"type":"module","title":"Bonfire.Web.FakeRemoteEndpoint","doc":"","ref":"Bonfire.Web.FakeRemoteEndpoint.html"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.broadcast/3","doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#broadcast/3"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.broadcast!/3","doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#broadcast!/3"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.broadcast_from/4","doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#broadcast_from/4"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.broadcast_from!/4","doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#broadcast_from!/4"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.call/2","doc":"Callback implementation for Plug.call/2 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#call/2"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.child_spec/1","doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#child_spec/1"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.config/2","doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#config/2"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.config_change/2","doc":"Reloads the configuration given the application environment changes.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#config_change/2"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.host/0","doc":"Returns the host for the given endpoint.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#host/0"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.init/1","doc":"Callback implementation for Plug.init/1 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#init/1"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.local_broadcast/3","doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#local_broadcast/3"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.local_broadcast_from/4","doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#local_broadcast_from/4"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.path/1","doc":"Generates the path information when routing to this endpoint.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#path/1"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.script_name/0","doc":"Generates the script name.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#script_name/0"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.start_link/1","doc":"Starts the endpoint supervision tree. All other options are merged into the endpoint configuration.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#start_link/1"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.static_integrity/1","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#static_integrity/1"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.static_lookup/1","doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#static_lookup/1"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.static_path/1","doc":"Generates a route to a static file in priv/static .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#static_path/1"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.static_url/0","doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#static_url/0"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.struct_url/0","doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#struct_url/0"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.subscribe/2","doc":"Callback implementation for Phoenix.Endpoint.subscribe/2 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#subscribe/2"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.unsubscribe/1","doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1 .","ref":"Bonfire.Web.FakeRemoteEndpoint.html#unsubscribe/1"},{"type":"function","title":"Bonfire.Web.FakeRemoteEndpoint.url/0","doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"Bonfire.Web.FakeRemoteEndpoint.html#url/0"},{"type":"module","title":"Bonfire.Web.Router","doc":"","ref":"Bonfire.Web.Router.html"},{"type":"function","title":"Bonfire.Web.Router.account_required/2","doc":"","ref":"Bonfire.Web.Router.html#account_required/2"},{"type":"function","title":"Bonfire.Web.Router.activity_pub/2","doc":"","ref":"Bonfire.Web.Router.html#activity_pub/2"},{"type":"function","title":"Bonfire.Web.Router.admin_required/2","doc":"","ref":"Bonfire.Web.Router.html#admin_required/2"},{"type":"function","title":"Bonfire.Web.Router.basic/2","doc":"","ref":"Bonfire.Web.Router.html#basic/2"},{"type":"function","title":"Bonfire.Web.Router.basic_html/2","doc":"","ref":"Bonfire.Web.Router.html#basic_html/2"},{"type":"function","title":"Bonfire.Web.Router.browser/2","doc":"","ref":"Bonfire.Web.Router.html#browser/2"},{"type":"function","title":"Bonfire.Web.Router.call/2","doc":"Callback invoked by Plug on every request.","ref":"Bonfire.Web.Router.html#call/2"},{"type":"function","title":"Bonfire.Web.Router.guest_only/2","doc":"","ref":"Bonfire.Web.Router.html#guest_only/2"},{"type":"function","title":"Bonfire.Web.Router.init/1","doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"Bonfire.Web.Router.html#init/1"},{"type":"function","title":"Bonfire.Web.Router.load_current_auth/2","doc":"","ref":"Bonfire.Web.Router.html#load_current_auth/2"},{"type":"function","title":"Bonfire.Web.Router.require_authenticated_user/2","doc":"","ref":"Bonfire.Web.Router.html#require_authenticated_user/2"},{"type":"function","title":"Bonfire.Web.Router.signed_activity_pub/2","doc":"","ref":"Bonfire.Web.Router.html#signed_activity_pub/2"},{"type":"function","title":"Bonfire.Web.Router.static/2","doc":"","ref":"Bonfire.Web.Router.html#static/2"},{"type":"function","title":"Bonfire.Web.Router.throttle_plug_attacks/2","doc":"","ref":"Bonfire.Web.Router.html#throttle_plug_attacks/2"},{"type":"function","title":"Bonfire.Web.Router.user_required/2","doc":"","ref":"Bonfire.Web.Router.html#user_required/2"},{"type":"function","title":"Bonfire.Web.Router.well_known/2","doc":"","ref":"Bonfire.Web.Router.html#well_known/2"},{"type":"function","title":"Bonfire.Web.Router.well_known_nodeinfo/2","doc":"","ref":"Bonfire.Web.Router.html#well_known_nodeinfo/2"},{"type":"module","title":"Bonfire.Web.Router.Reverse","doc":"","ref":"Bonfire.Web.Router.Reverse.html"},{"type":"function","title":"Bonfire.Web.Router.Reverse.path/2","doc":"","ref":"Bonfire.Web.Router.Reverse.html#path/2"},{"type":"function","title":"Bonfire.Web.Router.Reverse.path/3","doc":"","ref":"Bonfire.Web.Router.Reverse.html#path/3"},{"type":"function","title":"Bonfire.Web.Router.Reverse.path/4","doc":"","ref":"Bonfire.Web.Router.Reverse.html#path/4"},{"type":"function","title":"Bonfire.Web.Router.Reverse.path/5","doc":"","ref":"Bonfire.Web.Router.Reverse.html#path/5"},{"type":"function","title":"Bonfire.Web.Router.Reverse.path/6","doc":"","ref":"Bonfire.Web.Router.Reverse.html#path/6"},{"type":"function","title":"Bonfire.Web.Router.Reverse.path/7","doc":"","ref":"Bonfire.Web.Router.Reverse.html#path/7"},{"type":"module","title":"Bonfire.Web.Telemetry","doc":"","ref":"Bonfire.Web.Telemetry.html"},{"type":"function","title":"Bonfire.Web.Telemetry.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Bonfire.Web.Telemetry.html#child_spec/1"},{"type":"function","title":"Bonfire.Web.Telemetry.metrics/0","doc":"","ref":"Bonfire.Web.Telemetry.html#metrics/0"},{"type":"function","title":"Bonfire.Web.Telemetry.start_link/1","doc":"","ref":"Bonfire.Web.Telemetry.html#start_link/1"},{"type":"module","title":"Bonfire.Editor.Quill.Integration","doc":"","ref":"Bonfire.Editor.Quill.Integration.html"},{"type":"function","title":"Bonfire.Editor.Quill.Integration.repo/0","doc":"","ref":"Bonfire.Editor.Quill.Integration.html#repo/0"},{"type":"module","title":"Bonfire.Encrypt.Expiration","doc":"","ref":"Bonfire.Encrypt.Expiration.html"},{"type":"function","title":"Bonfire.Encrypt.Expiration.expire/0","doc":"","ref":"Bonfire.Encrypt.Expiration.html#expire/0"},{"type":"function","title":"Bonfire.Encrypt.Expiration.expire_all/0","doc":"","ref":"Bonfire.Encrypt.Expiration.html#expire_all/0"},{"type":"function","title":"Bonfire.Encrypt.Expiration.expire_before/1","doc":"","ref":"Bonfire.Encrypt.Expiration.html#expire_before/1"},{"type":"function","title":"Bonfire.Encrypt.Expiration.setup_job/0","doc":"","ref":"Bonfire.Encrypt.Expiration.html#setup_job/0"},{"type":"module","title":"Bonfire.Encrypt.Fake","doc":"","ref":"Bonfire.Encrypt.Fake.html"},{"type":"module","title":"Bonfire.Encrypt.Integration","doc":"","ref":"Bonfire.Encrypt.Integration.html"},{"type":"function","title":"Bonfire.Encrypt.Integration.repo/0","doc":"","ref":"Bonfire.Encrypt.Integration.html#repo/0"},{"type":"module","title":"Bonfire.Encrypt.LiveHandler","doc":"","ref":"Bonfire.Encrypt.LiveHandler.html"},{"type":"function","title":"Bonfire.Encrypt.LiveHandler.assert_burnable/3","doc":"","ref":"Bonfire.Encrypt.LiveHandler.html#assert_burnable/3"},{"type":"function","title":"Bonfire.Encrypt.LiveHandler.assert_burnkey_match/2","doc":"","ref":"Bonfire.Encrypt.LiveHandler.html#assert_burnkey_match/2"},{"type":"function","title":"Bonfire.Encrypt.LiveHandler.assert_creator_key!/3","doc":"","ref":"Bonfire.Encrypt.LiveHandler.html#assert_creator_key!/3"},{"type":"function","title":"Bonfire.Encrypt.LiveHandler.assign_secret_metadata/2","doc":"","ref":"Bonfire.Encrypt.LiveHandler.html#assign_secret_metadata/2"},{"type":"function","title":"Bonfire.Encrypt.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Encrypt.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Encrypt.LiveHandler.put_burn_flash/1","doc":"","ref":"Bonfire.Encrypt.LiveHandler.html#put_burn_flash/1"},{"type":"macro","title":"Bonfire.Encrypt.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Encrypt.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Encrypt.OperationalKey","doc":"","ref":"Bonfire.Encrypt.OperationalKey.html"},{"type":"function","title":"Bonfire.Encrypt.OperationalKey.generate/0","doc":"Generate a puid","ref":"Bonfire.Encrypt.OperationalKey.html#generate/0"},{"type":"function","title":"Bonfire.Encrypt.OperationalKey.info/0","doc":"Puid.Info module info","ref":"Bonfire.Encrypt.OperationalKey.html#info/0"},{"type":"module","title":"Bonfire.Encrypt.OperationalKey.Bits","doc":"","ref":"Bonfire.Encrypt.OperationalKey.Bits.html"},{"type":"function","title":"Bonfire.Encrypt.OperationalKey.Bits.generate/0","doc":"","ref":"Bonfire.Encrypt.OperationalKey.Bits.html#generate/0"},{"type":"function","title":"Bonfire.Encrypt.OperationalKey.Bits.reset/0","doc":"","ref":"Bonfire.Encrypt.OperationalKey.Bits.html#reset/0"},{"type":"module","title":"Bonfire.Encrypt.OperationalKey.Encoding","doc":"","ref":"Bonfire.Encrypt.OperationalKey.Encoding.html"},{"type":"function","title":"Bonfire.Encrypt.OperationalKey.Encoding.encode/1","doc":"","ref":"Bonfire.Encrypt.OperationalKey.Encoding.html#encode/1"},{"type":"module","title":"Bonfire.Encrypt.Presecret","doc":"","ref":"Bonfire.Encrypt.Presecret.html"},{"type":"function","title":"Bonfire.Encrypt.Presecret.changeset/2","doc":"","ref":"Bonfire.Encrypt.Presecret.html#changeset/2"},{"type":"function","title":"Bonfire.Encrypt.Presecret.make_secret_attrs/1","doc":"","ref":"Bonfire.Encrypt.Presecret.html#make_secret_attrs/1"},{"type":"function","title":"Bonfire.Encrypt.Presecret.new/0","doc":"","ref":"Bonfire.Encrypt.Presecret.html#new/0"},{"type":"function","title":"Bonfire.Encrypt.Presecret.supported_durations/0","doc":"","ref":"Bonfire.Encrypt.Presecret.html#supported_durations/0"},{"type":"function","title":"Bonfire.Encrypt.Presecret.validate_presecret/1","doc":"Returns a changeset with validated fields (or not) from Presecret attrs","ref":"Bonfire.Encrypt.Presecret.html#validate_presecret/1"},{"type":"module","title":"Bonfire.Encrypt.PubSub","doc":"","ref":"Bonfire.Encrypt.PubSub.html"},{"type":"function","title":"Bonfire.Encrypt.PubSub.notify_burned!/3","doc":"Notifies PubSub topic for the secret that the given user burned_by burned the secret at timestamp burned_at . All listeners should update their state for this secret.","ref":"Bonfire.Encrypt.PubSub.html#notify_burned!/3"},{"type":"function","title":"Bonfire.Encrypt.PubSub.notify_expired/1","doc":"Notifies PubSubtopic for the secret that it has been expired. All listeners should update their state for this secret.","ref":"Bonfire.Encrypt.PubSub.html#notify_expired/1"},{"type":"function","title":"Bonfire.Encrypt.PubSub.notify_unlocked!/2","doc":"Notifies PubSub topic for the secret that the provided user has been unlocked. All listeners should update their state for this user, and the user specified is allowed to receive the ciphertext.","ref":"Bonfire.Encrypt.PubSub.html#notify_unlocked!/2"},{"type":"function","title":"Bonfire.Encrypt.PubSub.subscribe!/1","doc":"Subscribe to secret","ref":"Bonfire.Encrypt.PubSub.html#subscribe!/1"},{"type":"module","title":"Bonfire.Encrypt.Secret","doc":"A mixin that stores [metadata about] encrypted secrets","ref":"Bonfire.Encrypt.Secret.html"},{"type":"function","title":"Bonfire.Encrypt.Secret.burn!/2","doc":"","ref":"Bonfire.Encrypt.Secret.html#burn!/2"},{"type":"function","title":"Bonfire.Encrypt.Secret.count_secrets/0","doc":"","ref":"Bonfire.Encrypt.Secret.html#count_secrets/0"},{"type":"function","title":"Bonfire.Encrypt.Secret.do_burn!/1","doc":"Burns a secret or throws Burned secrets have no iv and no ciphertext","ref":"Bonfire.Encrypt.Secret.html#do_burn!/1"},{"type":"function","title":"Bonfire.Encrypt.Secret.get_secret/1","doc":"Reads secret with id or returns error","ref":"Bonfire.Encrypt.Secret.html#get_secret/1"},{"type":"function","title":"Bonfire.Encrypt.Secret.get_secret!/1","doc":"Reads secret with id or throws","ref":"Bonfire.Encrypt.Secret.html#get_secret!/1"},{"type":"function","title":"Bonfire.Encrypt.Secret.insert!/1","doc":"Inserts secret or throws presecret_attrs is a map of attrs from the Presecret struct. We transform this into fields on the Secret. Easier to send base64 to to the browser with Presecret and store raw binary in the Secret.","ref":"Bonfire.Encrypt.Secret.html#insert!/1"},{"type":"function","title":"Bonfire.Encrypt.Secret.new/0","doc":"","ref":"Bonfire.Encrypt.Secret.html#new/0"},{"type":"function","title":"Bonfire.Encrypt.Secret.topic/1","doc":"","ref":"Bonfire.Encrypt.Secret.html#topic/1"},{"type":"function","title":"Bonfire.Encrypt.Secret.validate_content_size/1","doc":"","ref":"Bonfire.Encrypt.Secret.html#validate_content_size/1"},{"type":"function","title":"Bonfire.Encrypt.Secret.validate_iv_size/1","doc":"","ref":"Bonfire.Encrypt.Secret.html#validate_iv_size/1"},{"type":"module","title":"Bonfire.Encrypt.Web.Routes","doc":"","ref":"Bonfire.Encrypt.Web.Routes.html"},{"type":"function","title":"Bonfire.Encrypt.Web.Routes.declare_routes/0","doc":"","ref":"Bonfire.Encrypt.Web.Routes.html#declare_routes/0"},{"type":"module","title":"Bonfire.Encrypt.Web.SecretFormLive","doc":"","ref":"Bonfire.Encrypt.Web.SecretFormLive.html"},{"type":"function","title":"Bonfire.Encrypt.Web.SecretFormLive.choice_text/1","doc":"","ref":"Bonfire.Encrypt.Web.SecretFormLive.html#choice_text/1"},{"type":"function","title":"Bonfire.Encrypt.Web.SecretFormLive.create/1","doc":"","ref":"Bonfire.Encrypt.Web.SecretFormLive.html#create/1"},{"type":"function","title":"Bonfire.Encrypt.Web.SecretFormLive.create_button/1","doc":"","ref":"Bonfire.Encrypt.Web.SecretFormLive.html#create_button/1"},{"type":"function","title":"Bonfire.Encrypt.Web.SecretFormLive.param_choice/1","doc":"","ref":"Bonfire.Encrypt.Web.SecretFormLive.html#param_choice/1"},{"type":"function","title":"Bonfire.Encrypt.Web.SecretFormLive.passphrase_entry/1","doc":"","ref":"Bonfire.Encrypt.Web.SecretFormLive.html#passphrase_entry/1"},{"type":"function","title":"Bonfire.Encrypt.Web.SecretFormLive.spacer/1","doc":"","ref":"Bonfire.Encrypt.Web.SecretFormLive.html#spacer/1"},{"type":"function","title":"Bonfire.Encrypt.Web.SecretFormLive.toolbar_icon/1","doc":"","ref":"Bonfire.Encrypt.Web.SecretFormLive.html#toolbar_icon/1"},{"type":"module","title":"Bonfire.Encrypt.Web.Static","doc":"","ref":"Bonfire.Encrypt.Web.Static.html"},{"type":"function","title":"Bonfire.Encrypt.Web.Static.call/2","doc":"Callback implementation for Plug.call/2 .","ref":"Bonfire.Encrypt.Web.Static.html#call/2"},{"type":"function","title":"Bonfire.Encrypt.Web.Static.init/1","doc":"Callback implementation for Plug.init/1 .","ref":"Bonfire.Encrypt.Web.Static.html#init/1"},{"type":"function","title":"Bonfire.Encrypt.Web.Static.send_file/2","doc":"","ref":"Bonfire.Encrypt.Web.Static.html#send_file/2"},{"type":"module","title":"Bonfire.Federate.ActivityPub","doc":"","ref":"Bonfire.Federate.ActivityPub.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.disable/0","doc":"","ref":"Bonfire.Federate.ActivityPub.html#disable/0"},{"type":"function","title":"Bonfire.Federate.ActivityPub.is_admin?/1","doc":"","ref":"Bonfire.Federate.ActivityPub.html#is_admin?/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.repo/0","doc":"","ref":"Bonfire.Federate.ActivityPub.html#repo/0"},{"type":"module","title":"Bonfire.Federate.ActivityPub.Adapter","doc":"Adapter functions delegated from the ActivityPub Library","ref":"Bonfire.Federate.ActivityPub.Adapter.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.base_url/0","doc":"Callback implementation for ActivityPub.Federator.Adapter.base_url/0 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#base_url/0"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.external_followers_for_activity/2","doc":"Callback implementation for ActivityPub.Federator.Adapter.external_followers_for_activity/2 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#external_followers_for_activity/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.get_actor_by_ap_id/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.get_actor_by_ap_id/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_actor_by_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.get_actor_by_id/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.get_actor_by_id/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_actor_by_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.get_actor_by_username/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.get_actor_by_username/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_actor_by_username/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.get_follower_local_ids/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.get_follower_local_ids/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_follower_local_ids/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.get_following_local_ids/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.get_following_local_ids/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_following_local_ids/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.get_or_create_service_actor_by_username/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.get_or_create_service_actor_by_username/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_or_create_service_actor_by_username/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.get_redirect_url/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.get_redirect_url/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_redirect_url/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.handle_activity/1","doc":"Process incoming activities","ref":"Bonfire.Federate.ActivityPub.Adapter.html#handle_activity/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.maybe_create_remote_actor/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.maybe_create_remote_actor/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#maybe_create_remote_actor/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.maybe_publish_object/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.maybe_publish_object/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#maybe_publish_object/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.redirect_to_actor/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Adapter.html#redirect_to_actor/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.update_local_actor/2","doc":"Callback implementation for ActivityPub.Federator.Adapter.update_local_actor/2 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#update_local_actor/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.update_local_actor_cache/1","doc":"For updating an Actor in cache after a User/etc is updated","ref":"Bonfire.Federate.ActivityPub.Adapter.html#update_local_actor_cache/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.update_remote_actor/1","doc":"Callback implementation for ActivityPub.Federator.Adapter.update_remote_actor/1 .","ref":"Bonfire.Federate.ActivityPub.Adapter.html#update_remote_actor/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Adapter.update_remote_actor/2","doc":"","ref":"Bonfire.Federate.ActivityPub.Adapter.html#update_remote_actor/2"},{"type":"module","title":"Bonfire.Federate.ActivityPub.AdapterUtils","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.all_actors/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#all_actors/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.all_recipients/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#all_recipients/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.ap_base_url/0","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#ap_base_url/0"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.character_module/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#character_module/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.character_to_actor/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#character_to_actor/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.create_author_object/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#create_author_object/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.create_remote_actor/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#create_remote_actor/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.create_service_actor/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#create_service_actor/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.determine_recipients/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#determine_recipients/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.determine_recipients/3","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#determine_recipients/3"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.determine_recipients/4","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#determine_recipients/4"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.fetch_character_by_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#fetch_character_by_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.format_actor/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#format_actor/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_actor_by_ap_id/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_actor_by_ap_id/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_actor_username/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_actor_username/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_author/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_author/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_by_url_ap_id_or_username/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_by_url_ap_id_or_username/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_character_by_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_character_by_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_character_by_id/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_character_by_id/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_character_by_username/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_character_by_username/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_context_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_context_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_creator_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_creator_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_different_creator_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_different_creator_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_in_reply_to/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_in_reply_to/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_local_actor_by_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_local_actor_by_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_local_character_by_ap_id/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_local_character_by_ap_id/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_object_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_object_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_object_ap_id!/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_object_ap_id!/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_object_or_actor_by_ap_id!/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_object_or_actor_by_ap_id!/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_or_fetch_and_create_by_uri/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_or_fetch_and_create_by_uri/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_or_fetch_and_create_by_username/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_or_fetch_and_create_by_username/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_pointer_id_by_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_pointer_id_by_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.id_or_object_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#id_or_object_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.is_follow?/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#is_follow?/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.is_local?/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#is_local?/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.is_local_collection?/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#is_local_collection?/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.local_actor_ids/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#local_actor_ids/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.log/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#log/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_add_aliases/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_add_aliases/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_apply_or/4","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_apply_or/4"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_attach_property_value/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_attach_property_value/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_create_banner_object/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_create_banner_object/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_create_icon_object/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_create_icon_object/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_create_image_object/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_create_image_object/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_fix_image_object/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_fix_image_object/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_format_image_object_from_path/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_format_image_object_from_path/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_pointer_id_for_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_pointer_id_for_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.public_uri/0","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#public_uri/0"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.return_pointer/2","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#return_pointer/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.the_ap_id/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#the_ap_id/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.AdapterUtils.validate_url/1","doc":"","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#validate_url/1"},{"type":"module","title":"Bonfire.Federate.ActivityPub.BoundariesMRF","doc":"Filter activities depending on their origin instance, actor, or other criteria","ref":"Bonfire.Federate.ActivityPub.BoundariesMRF.html"},{"type":"module","title":"Bonfire.Federate.ActivityPub.FederationModules","doc":"A Global cache of known federation modules to be queried by activity and/or object type. Use of the FederationModules Service requires: Exporting federation_module/0 in relevant modules (in context modules indicating what activity or object types the module can handle) To populate :bonfire, :federation_search_path in config with the list of OTP applications where federation modules are declared. Start the Bonfire.Federate.ActivityPub.FederationModules application before querying. OTP 21.2 or greater, though we recommend using the most recent release available. While this module is a GenServer, it is only responsible for setup of the cache and then exits with :ignore having done so. It is not recommended to restart the service as this will lead to a stop the world garbage collection of all processes and the copying of the entire cache to each process that has queried it since its last local garbage collection.","ref":"Bonfire.Federate.ActivityPub.FederationModules.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#child_spec/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.data/0","doc":"","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#data/0"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_function_error/2","doc":"","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#federation_function_error/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_module/1","doc":"Get a Federation Module identified by activity and/or object type, as string or {activity, object} tuple.","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#federation_module/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_module!/1","doc":"Look up a Federation Module, throw :not_found if not found.","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#federation_module!/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_modules/1","doc":"Look up many types at once, throw :not_found if any of them are not found","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#federation_modules/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.maybe_federation_module/1","doc":"","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#maybe_federation_module/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.populate/0","doc":"","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#populate/0"},{"type":"function","title":"Bonfire.Federate.ActivityPub.FederationModules.start_link/1","doc":"Populates the global cache with federation_module data via introspection.","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#start_link/1"},{"type":"type","title":"Bonfire.Federate.ActivityPub.FederationModules.query/0","doc":"A query is either a federation_module name atom or (Pointer) id binary","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#t:query/0"},{"type":"module","title":"Bonfire.Federate.ActivityPub.Incoming","doc":"","ref":"Bonfire.Federate.ActivityPub.Incoming.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Incoming.no_federation_module_match/2","doc":"","ref":"Bonfire.Federate.ActivityPub.Incoming.html#no_federation_module_match/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Incoming.receive_activity/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Incoming.html#receive_activity/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Incoming.receive_activity/2","doc":"","ref":"Bonfire.Federate.ActivityPub.Incoming.html#receive_activity/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Incoming.receive_object/2","doc":"Create an object without an activity","ref":"Bonfire.Federate.ActivityPub.Incoming.html#receive_object/2"},{"type":"module","title":"Bonfire.Federate.ActivityPub.Instances","doc":"Federated instances Context for Bonfire.Data.ActivityPub.Peer","ref":"Bonfire.Federate.ActivityPub.Instances.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Instances.get/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Instances.html#get/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Instances.get_or_create/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Instances.html#get_or_create/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Instances.get_or_create_instance_circle/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Instances.html#get_or_create_instance_circle/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Instances.is_blocked?/3","doc":"","ref":"Bonfire.Federate.ActivityPub.Instances.html#is_blocked?/3"},{"type":"module","title":"Bonfire.Federate.ActivityPub.NodeinfoAdapter","doc":"","ref":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.base_url/0","doc":"Callback implementation for Nodeinfo.Adapter.base_url/0 .","ref":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.html#base_url/0"},{"type":"function","title":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.gather_nodeinfo_data/0","doc":"Callback implementation for Nodeinfo.Adapter.gather_nodeinfo_data/0 .","ref":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.html#gather_nodeinfo_data/0"},{"type":"module","title":"Bonfire.Federate.ActivityPub.Outgoing","doc":"","ref":"Bonfire.Federate.ActivityPub.Outgoing.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Outgoing.ap_activity!/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#ap_activity!/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Outgoing.maybe_federate/3","doc":"","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#maybe_federate/3"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Outgoing.preparation_error/2","doc":"","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#preparation_error/2"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Outgoing.push_now!/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#push_now!/1"},{"type":"module","title":"Bonfire.Federate.ActivityPub.Peered","doc":"Federated actors or objects Context for Bonfire.Data.ActivityPub.Peered","ref":"Bonfire.Federate.ActivityPub.Peered.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Peered.create/3","doc":"","ref":"Bonfire.Federate.ActivityPub.Peered.html#create/3"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Peered.get/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Peered.html#get/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Peered.get_canonical_uri/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Peered.html#get_canonical_uri/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Peered.is_blocked?/3","doc":"","ref":"Bonfire.Federate.ActivityPub.Peered.html#is_blocked?/3"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Peered.save_canonical_uri/2","doc":"","ref":"Bonfire.Federate.ActivityPub.Peered.html#save_canonical_uri/2"},{"type":"module","title":"Bonfire.Federate.ActivityPub.RuntimeConfig","doc":"","ref":"Bonfire.Federate.ActivityPub.RuntimeConfig.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.RuntimeConfig.config/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config/0 .","ref":"Bonfire.Federate.ActivityPub.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.Federate.ActivityPub.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.Federate.ActivityPub.RuntimeConfig.html#config_module/0"},{"type":"module","title":"Bonfire.Federate.ActivityPub.Simulate","doc":"","ref":"Bonfire.Federate.ActivityPub.Simulate.html"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Simulate.actor_json/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Simulate.html#actor_json/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Simulate.fake_remote_user/1","doc":"","ref":"Bonfire.Federate.ActivityPub.Simulate.html#fake_remote_user/1"},{"type":"function","title":"Bonfire.Federate.ActivityPub.Simulate.webfingered/0","doc":"","ref":"Bonfire.Federate.ActivityPub.Simulate.html#webfingered/0"},{"type":"module","title":"Bonfire.Invite.Links","doc":"","ref":"Bonfire.Invite.Links.html"},{"type":"function","title":"Bonfire.Invite.Links.create/2","doc":"","ref":"Bonfire.Invite.Links.html#create/2"},{"type":"function","title":"Bonfire.Invite.Links.date_expires/1","doc":"","ref":"Bonfire.Invite.Links.html#date_expires/1"},{"type":"function","title":"Bonfire.Invite.Links.expired?/1","doc":"","ref":"Bonfire.Invite.Links.html#expired?/1"},{"type":"function","title":"Bonfire.Invite.Links.get/2","doc":"","ref":"Bonfire.Invite.Links.html#get/2"},{"type":"function","title":"Bonfire.Invite.Links.list_paginated/2","doc":"","ref":"Bonfire.Invite.Links.html#list_paginated/2"},{"type":"function","title":"Bonfire.Invite.Links.one/2","doc":"","ref":"Bonfire.Invite.Links.html#one/2"},{"type":"function","title":"Bonfire.Invite.Links.query/2","doc":"","ref":"Bonfire.Invite.Links.html#query/2"},{"type":"function","title":"Bonfire.Invite.Links.redeem/1","doc":"","ref":"Bonfire.Invite.Links.html#redeem/1"},{"type":"function","title":"Bonfire.Invite.Links.redeemable?/1","doc":"","ref":"Bonfire.Invite.Links.html#redeemable?/1"},{"type":"module","title":"Bonfire.Invite.Links.Fake","doc":"","ref":"Bonfire.Invite.Links.Fake.html"},{"type":"module","title":"Bonfire.Invite.Links.Integration","doc":"","ref":"Bonfire.Invite.Links.Integration.html"},{"type":"function","title":"Bonfire.Invite.Links.Integration.repo/0","doc":"","ref":"Bonfire.Invite.Links.Integration.html#repo/0"},{"type":"module","title":"Bonfire.Invite.Links.LiveHandler","doc":"","ref":"Bonfire.Invite.Links.LiveHandler.html"},{"type":"function","title":"Bonfire.Invite.Links.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Invite.Links.LiveHandler.html#handle_event/3"},{"type":"macro","title":"Bonfire.Invite.Links.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Invite.Links.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Invite.Links.Web.Routes","doc":"","ref":"Bonfire.Invite.Links.Web.Routes.html"},{"type":"function","title":"Bonfire.Invite.Links.Web.Routes.declare_routes/0","doc":"","ref":"Bonfire.Invite.Links.Web.Routes.html#declare_routes/0"},{"type":"module","title":"Bonfire.InviteLink","doc":"","ref":"Bonfire.InviteLink.html"},{"type":"function","title":"Bonfire.InviteLink.changeset/2","doc":"","ref":"Bonfire.InviteLink.html#changeset/2"},{"type":"module","title":"Bonfire.Localise","doc":"Runs at compile-time to include dynamic strings (like verb names and object types) in localisation string extraction.","ref":"Bonfire.Localise.html"},{"type":"module","title":"Bonfire.Logging","doc":"","ref":"Bonfire.Logging.html"},{"type":"function","title":"Bonfire.Logging.handle_event/4","doc":"","ref":"Bonfire.Logging.html#handle_event/4"},{"type":"function","title":"Bonfire.Logging.setup/2","doc":"","ref":"Bonfire.Logging.html#setup/2"},{"type":"function","title":"Bonfire.Logging.setup_oban/0","doc":"","ref":"Bonfire.Logging.html#setup_oban/0"},{"type":"function","title":"Bonfire.Logging.setup_opentelemetry/2","doc":"","ref":"Bonfire.Logging.html#setup_opentelemetry/2"},{"type":"module","title":"Bonfire.Me.Accounts","doc":"","ref":"Bonfire.Me.Accounts.html"},{"type":"function","title":"Bonfire.Me.Accounts.allow_signup?/1","doc":"","ref":"Bonfire.Me.Accounts.html#allow_signup?/1"},{"type":"function","title":"Bonfire.Me.Accounts.change_email/3","doc":"","ref":"Bonfire.Me.Accounts.html#change_email/3"},{"type":"function","title":"Bonfire.Me.Accounts.change_password/3","doc":"","ref":"Bonfire.Me.Accounts.html#change_password/3"},{"type":"function","title":"Bonfire.Me.Accounts.change_password/4","doc":"","ref":"Bonfire.Me.Accounts.html#change_password/4"},{"type":"function","title":"Bonfire.Me.Accounts.changeset/3","doc":"","ref":"Bonfire.Me.Accounts.html#changeset/3"},{"type":"function","title":"Bonfire.Me.Accounts.confirm_email/2","doc":"","ref":"Bonfire.Me.Accounts.html#confirm_email/2"},{"type":"function","title":"Bonfire.Me.Accounts.count/0","doc":"","ref":"Bonfire.Me.Accounts.html#count/0"},{"type":"function","title":"Bonfire.Me.Accounts.delete/2","doc":"","ref":"Bonfire.Me.Accounts.html#delete/2"},{"type":"function","title":"Bonfire.Me.Accounts.fetch_current/1","doc":"","ref":"Bonfire.Me.Accounts.html#fetch_current/1"},{"type":"function","title":"Bonfire.Me.Accounts.get_by_email/1","doc":"","ref":"Bonfire.Me.Accounts.html#get_by_email/1"},{"type":"function","title":"Bonfire.Me.Accounts.get_current/1","doc":"","ref":"Bonfire.Me.Accounts.html#get_current/1"},{"type":"function","title":"Bonfire.Me.Accounts.instance_is_invite_only?/0","doc":"","ref":"Bonfire.Me.Accounts.html#instance_is_invite_only?/0"},{"type":"function","title":"Bonfire.Me.Accounts.is_first_account?/0","doc":"","ref":"Bonfire.Me.Accounts.html#is_first_account?/0"},{"type":"function","title":"Bonfire.Me.Accounts.login/2","doc":"Attempts to log in by password and either username or email. Accepts a map of parameters or a LoginFields changeset. On success, returns {:ok, account, user} if a username was provided and {:ok, account, nil} otherwise. On error, returns {:error, changeset}","ref":"Bonfire.Me.Accounts.html#login/2"},{"type":"function","title":"Bonfire.Me.Accounts.login_valid?/2","doc":"","ref":"Bonfire.Me.Accounts.html#login_valid?/2"},{"type":"function","title":"Bonfire.Me.Accounts.maybe_redeem_invite/2","doc":"","ref":"Bonfire.Me.Accounts.html#maybe_redeem_invite/2"},{"type":"function","title":"Bonfire.Me.Accounts.queue_delete/1","doc":"","ref":"Bonfire.Me.Accounts.html#queue_delete/1"},{"type":"function","title":"Bonfire.Me.Accounts.redeemable_invite?/1","doc":"","ref":"Bonfire.Me.Accounts.html#redeemable_invite?/1"},{"type":"function","title":"Bonfire.Me.Accounts.request_confirm_email/2","doc":"","ref":"Bonfire.Me.Accounts.html#request_confirm_email/2"},{"type":"function","title":"Bonfire.Me.Accounts.request_forgot_password/1","doc":"","ref":"Bonfire.Me.Accounts.html#request_forgot_password/1"},{"type":"function","title":"Bonfire.Me.Accounts.signup/2","doc":"","ref":"Bonfire.Me.Accounts.html#signup/2"},{"type":"type","title":"Bonfire.Me.Accounts.changeset_name/0","doc":"","ref":"Bonfire.Me.Accounts.html#t:changeset_name/0"},{"type":"module","title":"Bonfire.Me.Accounts.ChangeEmailFields","doc":"","ref":"Bonfire.Me.Accounts.ChangeEmailFields.html"},{"type":"function","title":"Bonfire.Me.Accounts.ChangeEmailFields.changeset/2","doc":"","ref":"Bonfire.Me.Accounts.ChangeEmailFields.html#changeset/2"},{"type":"module","title":"Bonfire.Me.Accounts.ChangePasswordFields","doc":"","ref":"Bonfire.Me.Accounts.ChangePasswordFields.html"},{"type":"function","title":"Bonfire.Me.Accounts.ChangePasswordFields.changeset/3","doc":"","ref":"Bonfire.Me.Accounts.ChangePasswordFields.html#changeset/3"},{"type":"module","title":"Bonfire.Me.Accounts.ConfirmEmailFields","doc":"","ref":"Bonfire.Me.Accounts.ConfirmEmailFields.html"},{"type":"function","title":"Bonfire.Me.Accounts.ConfirmEmailFields.changeset/2","doc":"","ref":"Bonfire.Me.Accounts.ConfirmEmailFields.html#changeset/2"},{"type":"module","title":"Bonfire.Me.Accounts.ForgotPasswordFields","doc":"","ref":"Bonfire.Me.Accounts.ForgotPasswordFields.html"},{"type":"function","title":"Bonfire.Me.Accounts.ForgotPasswordFields.changeset/2","doc":"","ref":"Bonfire.Me.Accounts.ForgotPasswordFields.html#changeset/2"},{"type":"module","title":"Bonfire.Me.Accounts.LoginFields","doc":"","ref":"Bonfire.Me.Accounts.LoginFields.html"},{"type":"function","title":"Bonfire.Me.Accounts.LoginFields.changeset/2","doc":"","ref":"Bonfire.Me.Accounts.LoginFields.html#changeset/2"},{"type":"module","title":"Bonfire.Me.Accounts.Queries","doc":"","ref":"Bonfire.Me.Accounts.Queries.html"},{"type":"function","title":"Bonfire.Me.Accounts.Queries.by_email/1","doc":"","ref":"Bonfire.Me.Accounts.Queries.html#by_email/1"},{"type":"function","title":"Bonfire.Me.Accounts.Queries.confirm_email/1","doc":"","ref":"Bonfire.Me.Accounts.Queries.html#confirm_email/1"},{"type":"function","title":"Bonfire.Me.Accounts.Queries.count/1","doc":"","ref":"Bonfire.Me.Accounts.Queries.html#count/1"},{"type":"function","title":"Bonfire.Me.Accounts.Queries.current/1","doc":"","ref":"Bonfire.Me.Accounts.Queries.html#current/1"},{"type":"function","title":"Bonfire.Me.Accounts.Queries.login_by_account_id/1","doc":"","ref":"Bonfire.Me.Accounts.Queries.html#login_by_account_id/1"},{"type":"function","title":"Bonfire.Me.Accounts.Queries.login_by_email/1","doc":"","ref":"Bonfire.Me.Accounts.Queries.html#login_by_email/1"},{"type":"function","title":"Bonfire.Me.Accounts.Queries.login_by_username/1","doc":"","ref":"Bonfire.Me.Accounts.Queries.html#login_by_username/1"},{"type":"function","title":"Bonfire.Me.Accounts.Queries.request_confirm_email/1","doc":"","ref":"Bonfire.Me.Accounts.Queries.html#request_confirm_email/1"},{"type":"module","title":"Bonfire.Me.Accounts.SecondFactors","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.changeset/3","doc":"Sets or updates the TOTP secret. The secret is a random 20 bytes binary that is used to generate the QR Code to enable 2FA using auth applications. It will only be updated if the OTP code sent is valid. Examples iex&gt; changeset ( % AuthSecondFactor { secret : &lt;&lt; ... &gt;&gt; } , code : &quot;123456&quot; ) % Ecto.Changeset { data : % AuthSecondFactor { } }","ref":"Bonfire.Me.Accounts.SecondFactors.html#changeset/3"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.delete_account_totp/1","doc":"Disables the TOTP configuration for the given account.","ref":"Bonfire.Me.Accounts.SecondFactors.html#delete_account_totp/1"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.enabled?/0","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html#enabled?/0"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.format_secret/1","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html#format_secret/1"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.get_account_totp/1","doc":"Gets the %AuthSecondFactor{} entry, if any.","ref":"Bonfire.Me.Accounts.SecondFactors.html#get_account_totp/1"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.maybe_authenticate/2","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html#maybe_authenticate/2"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.maybe_cast_totp_changeset/3","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html#maybe_cast_totp_changeset/3"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.new/0","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html#new/0"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.new_qrcode/1","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html#new_qrcode/1"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.new_struct/1","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html#new_struct/1"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.new_uri/1","doc":"","ref":"Bonfire.Me.Accounts.SecondFactors.html#new_uri/1"},{"type":"function","title":"Bonfire.Me.Accounts.SecondFactors.validate_account_totp/2","doc":"Validates if the given TOTP code is valid.","ref":"Bonfire.Me.Accounts.SecondFactors.html#validate_account_totp/2"},{"type":"module","title":"Bonfire.Me.Acts.Caretaker","doc":"An act that deals with maintaining a Caretaker record for a changeset. During insertion, adds an associated insert if a caretaker can be found in the epic options. During deletion, ensures that the related record will be cleaned up. Epic Options (insert): :caretaker - user that will take care of the post, falls back to :current_user :current_user - user that will taker care of the post, fallback if :caretaker is not set. Act Options: :on - key to find changeset, required.","ref":"Bonfire.Me.Acts.Caretaker.html"},{"type":"function","title":"Bonfire.Me.Acts.Caretaker.run/2","doc":"","ref":"Bonfire.Me.Acts.Caretaker.html#run/2"},{"type":"module","title":"Bonfire.Me.Acts.Creator","doc":"An act that deals with maintaining a Created record for a changeset. During insertion, adds an associated insert if a creator can be found in the epic options. During deletion, ensures that the related record will be cleaned up. Epic Options (insert): :creator - user that will create the post, falls back to :current_user :current_user - user that will create the post, fallback if :creator is not set. Act Options: :on - key to find changeset, required.","ref":"Bonfire.Me.Acts.Creator.html"},{"type":"module","title":"Bonfire.Me.Characters","doc":"","ref":"Bonfire.Me.Characters.html"},{"type":"function","title":"Bonfire.Me.Characters.by_username/1","doc":"","ref":"Bonfire.Me.Characters.html#by_username/1"},{"type":"function","title":"Bonfire.Me.Characters.by_username!/1","doc":"","ref":"Bonfire.Me.Characters.html#by_username!/1"},{"type":"function","title":"Bonfire.Me.Characters.by_username_q/1","doc":"","ref":"Bonfire.Me.Characters.html#by_username_q/1"},{"type":"function","title":"Bonfire.Me.Characters.changeset/3","doc":"","ref":"Bonfire.Me.Characters.html#changeset/3"},{"type":"function","title":"Bonfire.Me.Characters.character_mention_prefix/1","doc":"","ref":"Bonfire.Me.Characters.html#character_mention_prefix/1"},{"type":"function","title":"Bonfire.Me.Characters.character_url/1","doc":"","ref":"Bonfire.Me.Characters.html#character_url/1"},{"type":"function","title":"Bonfire.Me.Characters.clean_username/1","doc":"","ref":"Bonfire.Me.Characters.html#clean_username/1"},{"type":"function","title":"Bonfire.Me.Characters.display_username/4","doc":"","ref":"Bonfire.Me.Characters.html#display_username/4"},{"type":"function","title":"Bonfire.Me.Characters.get/1","doc":"","ref":"Bonfire.Me.Characters.html#get/1"},{"type":"function","title":"Bonfire.Me.Characters.hash_available?/1","doc":"","ref":"Bonfire.Me.Characters.html#hash_available?/1"},{"type":"function","title":"Bonfire.Me.Characters.hash_delete/1","doc":"","ref":"Bonfire.Me.Characters.html#hash_delete/1"},{"type":"function","title":"Bonfire.Me.Characters.indexing_object_format/1","doc":"","ref":"Bonfire.Me.Characters.html#indexing_object_format/1"},{"type":"function","title":"Bonfire.Me.Characters.q_by_id/1","doc":"","ref":"Bonfire.Me.Characters.html#q_by_id/1"},{"type":"function","title":"Bonfire.Me.Characters.remote_changeset/2","doc":"","ref":"Bonfire.Me.Characters.html#remote_changeset/2"},{"type":"function","title":"Bonfire.Me.Characters.schema_module/0","doc":"Callback implementation for Bonfire.Common.QueryModule.schema_module/0 .","ref":"Bonfire.Me.Characters.html#schema_module/0"},{"type":"function","title":"Bonfire.Me.Characters.username_available?/1","doc":"","ref":"Bonfire.Me.Characters.html#username_available?/1"},{"type":"module","title":"Bonfire.Me.DeleteWorker","doc":"","ref":"Bonfire.Me.DeleteWorker.html"},{"type":"function","title":"Bonfire.Me.DeleteWorker.care_taken/1","doc":"","ref":"Bonfire.Me.DeleteWorker.html#care_taken/1"},{"type":"function","title":"Bonfire.Me.DeleteWorker.closures/1","doc":"","ref":"Bonfire.Me.DeleteWorker.html#closures/1"},{"type":"function","title":"Bonfire.Me.DeleteWorker.delete/2","doc":"","ref":"Bonfire.Me.DeleteWorker.html#delete/2"},{"type":"function","title":"Bonfire.Me.DeleteWorker.delete_now/1","doc":"","ref":"Bonfire.Me.DeleteWorker.html#delete_now/1"},{"type":"function","title":"Bonfire.Me.DeleteWorker.do_delete/1","doc":"","ref":"Bonfire.Me.DeleteWorker.html#do_delete/1"},{"type":"function","title":"Bonfire.Me.DeleteWorker.perform/1","doc":"Callback implementation for Oban.Worker.perform/1 .","ref":"Bonfire.Me.DeleteWorker.html#perform/1"},{"type":"module","title":"Bonfire.Me.Fake","doc":"","ref":"Bonfire.Me.Fake.html"},{"type":"function","title":"Bonfire.Me.Fake.fake_account!/2","doc":"","ref":"Bonfire.Me.Fake.html#fake_account!/2"},{"type":"function","title":"Bonfire.Me.Fake.fake_user!/3","doc":"","ref":"Bonfire.Me.Fake.html#fake_user!/3"},{"type":"module","title":"Bonfire.Me.Fake.Helpers","doc":"","ref":"Bonfire.Me.Fake.Helpers.html"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.atusername/0","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#atusername/0"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.avatar_url/0","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#avatar_url/0"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.avatar_url/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#avatar_url/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.character_subform/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#character_subform/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.confirm_token/0","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#confirm_token/0"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.create_user_form/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#create_user_form/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.credential_subform/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#credential_subform/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.email_subform/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#email_subform/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.icon_url/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#icon_url/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.image/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#image/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.image_url/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#image_url/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.profile_subform/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#profile_subform/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.signup_form/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#signup_form/1"},{"type":"function","title":"Bonfire.Me.Fake.Helpers.user_live/1","doc":"","ref":"Bonfire.Me.Fake.Helpers.html#user_live/1"},{"type":"module","title":"Bonfire.Me.Integration","doc":"","ref":"Bonfire.Me.Integration.html"},{"type":"function","title":"Bonfire.Me.Integration.indexing_format_created/2","doc":"","ref":"Bonfire.Me.Integration.html#indexing_format_created/2"},{"type":"function","title":"Bonfire.Me.Integration.indexing_format_creator/2","doc":"","ref":"Bonfire.Me.Integration.html#indexing_format_creator/2"},{"type":"function","title":"Bonfire.Me.Integration.is_local?/1","doc":"","ref":"Bonfire.Me.Integration.html#is_local?/1"},{"type":"function","title":"Bonfire.Me.Integration.mailer/0","doc":"","ref":"Bonfire.Me.Integration.html#mailer/0"},{"type":"function","title":"Bonfire.Me.Integration.maybe_index/1","doc":"","ref":"Bonfire.Me.Integration.html#maybe_index/1"},{"type":"function","title":"Bonfire.Me.Integration.repo/0","doc":"","ref":"Bonfire.Me.Integration.html#repo/0"},{"type":"module","title":"Bonfire.Me.Mails","doc":"","ref":"Bonfire.Me.Mails.html"},{"type":"function","title":"Bonfire.Me.Mails.confirm_email/2","doc":"","ref":"Bonfire.Me.Mails.html#confirm_email/2"},{"type":"function","title":"Bonfire.Me.Mails.forgot_password/1","doc":"","ref":"Bonfire.Me.Mails.html#forgot_password/1"},{"type":"function","title":"Bonfire.Me.Mails.render/3","doc":"","ref":"Bonfire.Me.Mails.html#render/3"},{"type":"function","title":"Bonfire.Me.Mails.signup_confirm_email/1","doc":"","ref":"Bonfire.Me.Mails.html#signup_confirm_email/1"},{"type":"module","title":"Bonfire.Me.Mails.EmailView","doc":"","ref":"Bonfire.Me.Mails.EmailView.html"},{"type":"function","title":"Bonfire.Me.Mails.EmailView.render_template/2","doc":"","ref":"Bonfire.Me.Mails.EmailView.html#render_template/2"},{"type":"module","title":"Bonfire.Me.Profiles","doc":"","ref":"Bonfire.Me.Profiles.html"},{"type":"function","title":"Bonfire.Me.Profiles.changeset/2","doc":"","ref":"Bonfire.Me.Profiles.html#changeset/2"},{"type":"function","title":"Bonfire.Me.Profiles.changeset_simple/2","doc":"","ref":"Bonfire.Me.Profiles.html#changeset_simple/2"},{"type":"function","title":"Bonfire.Me.Profiles.indexing_object_format/1","doc":"","ref":"Bonfire.Me.Profiles.html#indexing_object_format/1"},{"type":"function","title":"Bonfire.Me.Profiles.schema_module/0","doc":"Callback implementation for Bonfire.Common.QueryModule.schema_module/0 .","ref":"Bonfire.Me.Profiles.html#schema_module/0"},{"type":"module","title":"Bonfire.Me.Profiles.LiveHandler","doc":"","ref":"Bonfire.Me.Profiles.LiveHandler.html"},{"type":"function","title":"Bonfire.Me.Profiles.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Me.Profiles.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Me.Profiles.LiveHandler.set_profile_image/5","doc":"","ref":"Bonfire.Me.Profiles.LiveHandler.html#set_profile_image/5"},{"type":"macro","title":"Bonfire.Me.Profiles.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Me.Profiles.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Me.RuntimeConfig","doc":"","ref":"Bonfire.Me.RuntimeConfig.html"},{"type":"function","title":"Bonfire.Me.RuntimeConfig.config/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config/0 .","ref":"Bonfire.Me.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.Me.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.Me.RuntimeConfig.html#config_module/0"},{"type":"module","title":"Bonfire.Me.Settings","doc":"","ref":"Bonfire.Me.Settings.html"},{"type":"function","title":"Bonfire.Me.Settings.get/3","doc":"Get config value for a config key (optionally from a specific OTP app or Bonfire extension) These two calls have the same result (i.e. specifying a module as the first key will add the OTP app of that module as the first key): get([:bonfire_me, Bonfire.Me.Users]) get(Bonfire.Me.Users) Same with these two (i.e. not specifying a module or app as the first key will default to the main OTP app): get([:random_atom, :sub_key]) get([:bonfire, :random_atom, :sub_key])","ref":"Bonfire.Me.Settings.html#get/3"},{"type":"function","title":"Bonfire.Me.Settings.get!/2","doc":"","ref":"Bonfire.Me.Settings.html#get!/2"},{"type":"function","title":"Bonfire.Me.Settings.get_for_ext/2","doc":"","ref":"Bonfire.Me.Settings.html#get_for_ext/2"},{"type":"function","title":"Bonfire.Me.Settings.get_merged_ext/2","doc":"Get all config keys/values for a Bonfire extension or OTP app","ref":"Bonfire.Me.Settings.html#get_merged_ext/2"},{"type":"function","title":"Bonfire.Me.Settings.get_merged_ext!/2","doc":"","ref":"Bonfire.Me.Settings.html#get_merged_ext!/2"},{"type":"function","title":"Bonfire.Me.Settings.load_instance_settings/0","doc":"","ref":"Bonfire.Me.Settings.html#load_instance_settings/0"},{"type":"function","title":"Bonfire.Me.Settings.map_put_in/3","doc":"","ref":"Bonfire.Me.Settings.html#map_put_in/3"},{"type":"function","title":"Bonfire.Me.Settings.maybe_fetch/2","doc":"","ref":"Bonfire.Me.Settings.html#maybe_fetch/2"},{"type":"function","title":"Bonfire.Me.Settings.put/3","doc":"Put a setting using a key like :key or list of nested keys like [:top_key, :sub_key]","ref":"Bonfire.Me.Settings.html#put/3"},{"type":"function","title":"Bonfire.Me.Settings.reset_all/0","doc":"","ref":"Bonfire.Me.Settings.html#reset_all/0"},{"type":"function","title":"Bonfire.Me.Settings.reset_instance/0","doc":"","ref":"Bonfire.Me.Settings.html#reset_instance/0"},{"type":"function","title":"Bonfire.Me.Settings.set/2","doc":"Set several settings at once. Accepts nested attributes as map with string keys (which are transformed into keyword list), or a keyword list. Determines what scope to use &amp; sets/updates settings for it.","ref":"Bonfire.Me.Settings.html#set/2"},{"type":"module","title":"Bonfire.Me.Settings.LiveHandler","doc":"","ref":"Bonfire.Me.Settings.LiveHandler.html"},{"type":"function","title":"Bonfire.Me.Settings.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Me.Settings.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Me.Settings.LiveHandler.set_image_setting/5","doc":"","ref":"Bonfire.Me.Settings.LiveHandler.html#set_image_setting/5"},{"type":"macro","title":"Bonfire.Me.Settings.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Me.Settings.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Me.Settings.LoadInstanceConfig","doc":"Loads instance Settings from DB into Elixir's Config While this module is a GenServer, it is only responsible for querying the settings, putting them in Config, and then exits with :ignore having done so.","ref":"Bonfire.Me.Settings.LoadInstanceConfig.html"},{"type":"function","title":"Bonfire.Me.Settings.LoadInstanceConfig.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Bonfire.Me.Settings.LoadInstanceConfig.html#child_spec/1"},{"type":"function","title":"Bonfire.Me.Settings.LoadInstanceConfig.load_config/0","doc":"","ref":"Bonfire.Me.Settings.LoadInstanceConfig.html#load_config/0"},{"type":"function","title":"Bonfire.Me.Settings.LoadInstanceConfig.start_link/1","doc":"Populates the global cache with table data via introspection.","ref":"Bonfire.Me.Settings.LoadInstanceConfig.html#start_link/1"},{"type":"module","title":"Bonfire.Me.SharedUsers","doc":"","ref":"Bonfire.Me.SharedUsers.html"},{"type":"function","title":"Bonfire.Me.SharedUsers.add_account/3","doc":"","ref":"Bonfire.Me.SharedUsers.html#add_account/3"},{"type":"function","title":"Bonfire.Me.SharedUsers.add_accounts/3","doc":"","ref":"Bonfire.Me.SharedUsers.html#add_accounts/3"},{"type":"function","title":"Bonfire.Me.SharedUsers.by_account/1","doc":"","ref":"Bonfire.Me.SharedUsers.html#by_account/1"},{"type":"function","title":"Bonfire.Me.SharedUsers.by_username_and_account_query/2","doc":"","ref":"Bonfire.Me.SharedUsers.html#by_username_and_account_query/2"},{"type":"function","title":"Bonfire.Me.SharedUsers.federation_module/0","doc":"","ref":"Bonfire.Me.SharedUsers.html#federation_module/0"},{"type":"function","title":"Bonfire.Me.SharedUsers.init_shared_user/2","doc":"","ref":"Bonfire.Me.SharedUsers.html#init_shared_user/2"},{"type":"module","title":"Bonfire.Me.Users","doc":"","ref":"Bonfire.Me.Users.html"},{"type":"function","title":"Bonfire.Me.Users.ap_receive_activity/3","doc":"","ref":"Bonfire.Me.Users.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Me.Users.by_account/1","doc":"","ref":"Bonfire.Me.Users.html#by_account/1"},{"type":"function","title":"Bonfire.Me.Users.by_ap_id/1","doc":"","ref":"Bonfire.Me.Users.html#by_ap_id/1"},{"type":"function","title":"Bonfire.Me.Users.by_ap_id!/1","doc":"","ref":"Bonfire.Me.Users.html#by_ap_id!/1"},{"type":"function","title":"Bonfire.Me.Users.by_canonical_uri/1","doc":"","ref":"Bonfire.Me.Users.html#by_canonical_uri/1"},{"type":"function","title":"Bonfire.Me.Users.by_id/2","doc":"","ref":"Bonfire.Me.Users.html#by_id/2"},{"type":"function","title":"Bonfire.Me.Users.by_username/1","doc":"","ref":"Bonfire.Me.Users.html#by_username/1"},{"type":"function","title":"Bonfire.Me.Users.by_username!/1","doc":"","ref":"Bonfire.Me.Users.html#by_username!/1"},{"type":"function","title":"Bonfire.Me.Users.by_username_and_account/2","doc":"Used for switch-user functionality","ref":"Bonfire.Me.Users.html#by_username_and_account/2"},{"type":"function","title":"Bonfire.Me.Users.changeset/4","doc":"","ref":"Bonfire.Me.Users.html#changeset/4"},{"type":"function","title":"Bonfire.Me.Users.count/1","doc":"","ref":"Bonfire.Me.Users.html#count/1"},{"type":"function","title":"Bonfire.Me.Users.create/2","doc":"","ref":"Bonfire.Me.Users.html#create/2"},{"type":"function","title":"Bonfire.Me.Users.create_remote/1","doc":"Creates a remote user","ref":"Bonfire.Me.Users.html#create_remote/1"},{"type":"function","title":"Bonfire.Me.Users.delete/2","doc":"","ref":"Bonfire.Me.Users.html#delete/2"},{"type":"function","title":"Bonfire.Me.Users.federation_module/0","doc":"","ref":"Bonfire.Me.Users.html#federation_module/0"},{"type":"function","title":"Bonfire.Me.Users.fetch_current/1","doc":"","ref":"Bonfire.Me.Users.html#fetch_current/1"},{"type":"function","title":"Bonfire.Me.Users.flatten/1","doc":"","ref":"Bonfire.Me.Users.html#flatten/1"},{"type":"function","title":"Bonfire.Me.Users.format_actor/1","doc":"","ref":"Bonfire.Me.Users.html#format_actor/1"},{"type":"function","title":"Bonfire.Me.Users.get_current/1","doc":"","ref":"Bonfire.Me.Users.html#get_current/1"},{"type":"function","title":"Bonfire.Me.Users.get_only_in_account/1","doc":"","ref":"Bonfire.Me.Users.html#get_only_in_account/1"},{"type":"function","title":"Bonfire.Me.Users.indexing_object_format/1","doc":"","ref":"Bonfire.Me.Users.html#indexing_object_format/1"},{"type":"function","title":"Bonfire.Me.Users.is_admin?/1","doc":"","ref":"Bonfire.Me.Users.html#is_admin?/1"},{"type":"function","title":"Bonfire.Me.Users.is_first_user?/0","doc":"","ref":"Bonfire.Me.Users.html#is_first_user?/0"},{"type":"function","title":"Bonfire.Me.Users.list/1","doc":"","ref":"Bonfire.Me.Users.html#list/1"},{"type":"function","title":"Bonfire.Me.Users.list_admins/0","doc":"","ref":"Bonfire.Me.Users.html#list_admins/0"},{"type":"function","title":"Bonfire.Me.Users.list_all/1","doc":"","ref":"Bonfire.Me.Users.html#list_all/1"},{"type":"function","title":"Bonfire.Me.Users.make_admin/1","doc":"Grants a user superpowers.","ref":"Bonfire.Me.Users.html#make_admin/1"},{"type":"function","title":"Bonfire.Me.Users.maybe_count/1","doc":"","ref":"Bonfire.Me.Users.html#maybe_count/1"},{"type":"function","title":"Bonfire.Me.Users.maybe_index_user/1","doc":"","ref":"Bonfire.Me.Users.html#maybe_index_user/1"},{"type":"function","title":"Bonfire.Me.Users.query/2","doc":"","ref":"Bonfire.Me.Users.html#query/2"},{"type":"function","title":"Bonfire.Me.Users.revoke_admin/1","doc":"Revokes a user's superpowers.","ref":"Bonfire.Me.Users.html#revoke_admin/1"},{"type":"function","title":"Bonfire.Me.Users.schema_module/0","doc":"A User is a logical identity within the system belonging to an Account.","ref":"Bonfire.Me.Users.html#schema_module/0"},{"type":"function","title":"Bonfire.Me.Users.search/1","doc":"","ref":"Bonfire.Me.Users.html#search/1"},{"type":"function","title":"Bonfire.Me.Users.search_db/1","doc":"","ref":"Bonfire.Me.Users.html#search_db/1"},{"type":"function","title":"Bonfire.Me.Users.update/3","doc":"","ref":"Bonfire.Me.Users.html#update/3"},{"type":"function","title":"Bonfire.Me.Users.update_local_actor/2","doc":"","ref":"Bonfire.Me.Users.html#update_local_actor/2"},{"type":"function","title":"Bonfire.Me.Users.update_remote/2","doc":"Updates a remote user","ref":"Bonfire.Me.Users.html#update_remote/2"},{"type":"type","title":"Bonfire.Me.Users.changeset_extra/0","doc":"","ref":"Bonfire.Me.Users.html#t:changeset_extra/0"},{"type":"type","title":"Bonfire.Me.Users.changeset_name/0","doc":"","ref":"Bonfire.Me.Users.html#t:changeset_name/0"},{"type":"module","title":"Bonfire.Me.Users.LiveHandler","doc":"","ref":"Bonfire.Me.Users.LiveHandler.html"},{"type":"function","title":"Bonfire.Me.Users.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Me.Users.LiveHandler.html#handle_event/3"},{"type":"macro","title":"Bonfire.Me.Users.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Me.Users.LiveHandler.html#sigil_p/2"},{"type":"function","title":"Bonfire.Me.Users.LiveHandler.to_tuple/1","doc":"","ref":"Bonfire.Me.Users.LiveHandler.html#to_tuple/1"},{"type":"module","title":"Bonfire.Me.Users.Queries","doc":"","ref":"Bonfire.Me.Users.Queries.html"},{"type":"function","title":"Bonfire.Me.Users.Queries.admins/1","doc":"","ref":"Bonfire.Me.Users.Queries.html#admins/1"},{"type":"function","title":"Bonfire.Me.Users.Queries.by_account/1","doc":"","ref":"Bonfire.Me.Users.Queries.html#by_account/1"},{"type":"function","title":"Bonfire.Me.Users.Queries.by_canonical_uri/2","doc":"","ref":"Bonfire.Me.Users.Queries.html#by_canonical_uri/2"},{"type":"function","title":"Bonfire.Me.Users.Queries.by_id/2","doc":"","ref":"Bonfire.Me.Users.Queries.html#by_id/2"},{"type":"function","title":"Bonfire.Me.Users.Queries.by_username_and_account/2","doc":"","ref":"Bonfire.Me.Users.Queries.html#by_username_and_account/2"},{"type":"function","title":"Bonfire.Me.Users.Queries.by_username_or_id/2","doc":"","ref":"Bonfire.Me.Users.Queries.html#by_username_or_id/2"},{"type":"function","title":"Bonfire.Me.Users.Queries.by_username_query/2","doc":"","ref":"Bonfire.Me.Users.Queries.html#by_username_query/2"},{"type":"function","title":"Bonfire.Me.Users.Queries.count/1","doc":"","ref":"Bonfire.Me.Users.Queries.html#count/1"},{"type":"function","title":"Bonfire.Me.Users.Queries.current/1","doc":"","ref":"Bonfire.Me.Users.Queries.html#current/1"},{"type":"function","title":"Bonfire.Me.Users.Queries.join_peered/1","doc":"","ref":"Bonfire.Me.Users.Queries.html#join_peered/1"},{"type":"function","title":"Bonfire.Me.Users.Queries.list/1","doc":"","ref":"Bonfire.Me.Users.Queries.html#list/1"},{"type":"function","title":"Bonfire.Me.Users.Queries.query/2","doc":"","ref":"Bonfire.Me.Users.Queries.html#query/2"},{"type":"function","title":"Bonfire.Me.Users.Queries.schema_module/0","doc":"Callback implementation for Bonfire.Common.QueryModule.schema_module/0 .","ref":"Bonfire.Me.Users.Queries.html#schema_module/0"},{"type":"function","title":"Bonfire.Me.Users.Queries.search/1","doc":"","ref":"Bonfire.Me.Users.Queries.html#search/1"},{"type":"module","title":"Bonfire.Pages","doc":"","ref":"Bonfire.Pages.html"},{"type":"function","title":"Bonfire.Pages.create/1","doc":"","ref":"Bonfire.Pages.html#create/1"},{"type":"function","title":"Bonfire.Pages.get/2","doc":"","ref":"Bonfire.Pages.html#get/2"},{"type":"function","title":"Bonfire.Pages.list_paginated/2","doc":"","ref":"Bonfire.Pages.html#list_paginated/2"},{"type":"function","title":"Bonfire.Pages.one/2","doc":"","ref":"Bonfire.Pages.html#one/2"},{"type":"function","title":"Bonfire.Pages.page_path/2","doc":"","ref":"Bonfire.Pages.html#page_path/2"},{"type":"function","title":"Bonfire.Pages.query/2","doc":"","ref":"Bonfire.Pages.html#query/2"},{"type":"function","title":"Bonfire.Pages.run_epic/4","doc":"","ref":"Bonfire.Pages.html#run_epic/4"},{"type":"function","title":"Bonfire.Pages.slug/1","doc":"","ref":"Bonfire.Pages.html#slug/1"},{"type":"module","title":"Bonfire.Pages.Acts.Page.Create","doc":"Creates a changeset for publishing a page Epic Options: :current_user - user that will create the page, required. :page_attrs (configurable) - attrs to create the page from, required. :page_id (configurable) - id to use for the created page (handy for creating activitypub objects with an id representing their reported creation time) Act Options: :id - epic options key to find an id to force override with at, default: :page_id :as - key to assign changeset to, default: :page . :attrs - epic options key to find the attributes at, default: :page_attrs .","ref":"Bonfire.Pages.Acts.Page.Create.html"},{"type":"module","title":"Bonfire.Pages.Acts.Section.Upsert","doc":"Creates a changeset for publishing a section Epic Options: :current_user - user that will create the section, required. :section_attrs (configurable) - attrs to create the section from, required. :section_id (configurable) - id to use for the created section (handy for creating activitypub objects with an id representing their reported creation time) Act Options: :id - epic options key to find an id to force override with at, default: :section_id :as - key to assign changeset to, default: :section . :attrs - epic options key to find the attributes at, default: :section_attrs .","ref":"Bonfire.Pages.Acts.Section.Upsert.html"},{"type":"module","title":"Bonfire.Pages.LiveHandler","doc":"","ref":"Bonfire.Pages.LiveHandler.html"},{"type":"function","title":"Bonfire.Pages.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Pages.LiveHandler.html#handle_event/3"},{"type":"macro","title":"Bonfire.Pages.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Pages.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Pages.Page","doc":"","ref":"Bonfire.Pages.Page.html"},{"type":"function","title":"Bonfire.Pages.Page.changeset/2","doc":"","ref":"Bonfire.Pages.Page.html#changeset/2"},{"type":"module","title":"Bonfire.Pages.Section","doc":"","ref":"Bonfire.Pages.Section.html"},{"type":"function","title":"Bonfire.Pages.Section.changeset/2","doc":"","ref":"Bonfire.Pages.Section.html#changeset/2"},{"type":"module","title":"Bonfire.Pages.Sections","doc":"","ref":"Bonfire.Pages.Sections.html"},{"type":"function","title":"Bonfire.Pages.Sections.get/2","doc":"","ref":"Bonfire.Pages.Sections.html#get/2"},{"type":"function","title":"Bonfire.Pages.Sections.list_paginated/2","doc":"","ref":"Bonfire.Pages.Sections.html#list_paginated/2"},{"type":"function","title":"Bonfire.Pages.Sections.one/2","doc":"","ref":"Bonfire.Pages.Sections.html#one/2"},{"type":"function","title":"Bonfire.Pages.Sections.put_in_page/3","doc":"","ref":"Bonfire.Pages.Sections.html#put_in_page/3"},{"type":"function","title":"Bonfire.Pages.Sections.query/2","doc":"","ref":"Bonfire.Pages.Sections.html#query/2"},{"type":"function","title":"Bonfire.Pages.Sections.remove_from_page/2","doc":"","ref":"Bonfire.Pages.Sections.html#remove_from_page/2"},{"type":"function","title":"Bonfire.Pages.Sections.upsert/1","doc":"","ref":"Bonfire.Pages.Sections.html#upsert/1"},{"type":"module","title":"Bonfire.Pages.Web.Routes","doc":"","ref":"Bonfire.Pages.Web.Routes.html"},{"type":"function","title":"Bonfire.Pages.Web.Routes.declare_routes/0","doc":"","ref":"Bonfire.Pages.Web.Routes.html#declare_routes/0"},{"type":"module","title":"Bonfire.RuntimeConfig","doc":"","ref":"Bonfire.RuntimeConfig.html"},{"type":"function","title":"Bonfire.RuntimeConfig.config/0","doc":"NOTE: you can override this default config in your app's runtime.exs, by placing similarly-named config keys below the Bonfire.Common.Config.LoadExtensionsConfig.load_configs line","ref":"Bonfire.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.RuntimeConfig.html#config_module/0"},{"type":"module","title":"Bonfire.Search","doc":"","ref":"Bonfire.Search.html"},{"type":"function","title":"Bonfire.Search.adapter/0","doc":"","ref":"Bonfire.Search.html#adapter/0"},{"type":"function","title":"Bonfire.Search.facet_from_map/1","doc":"","ref":"Bonfire.Search.html#facet_from_map/1"},{"type":"function","title":"Bonfire.Search.public_index/0","doc":"","ref":"Bonfire.Search.html#public_index/0"},{"type":"function","title":"Bonfire.Search.search/2","doc":"","ref":"Bonfire.Search.html#search/2"},{"type":"function","title":"Bonfire.Search.search/4","doc":"","ref":"Bonfire.Search.html#search/4"},{"type":"function","title":"Bonfire.Search.search_by_type/2","doc":"","ref":"Bonfire.Search.html#search_by_type/2"},{"type":"module","title":"Bonfire.Search.Acts.Queue","doc":"An act that enqueues publish/update/delete requests to meilisearch via an oban job queue.","ref":"Bonfire.Search.Acts.Queue.html"},{"type":"function","title":"Bonfire.Search.Acts.Queue.maybe_index/1","doc":"","ref":"Bonfire.Search.Acts.Queue.html#maybe_index/1"},{"type":"function","title":"Bonfire.Search.Acts.Queue.maybe_indexable_object/1","doc":"","ref":"Bonfire.Search.Acts.Queue.html#maybe_indexable_object/1"},{"type":"function","title":"Bonfire.Search.Acts.Queue.maybe_unindex/1","doc":"","ref":"Bonfire.Search.Acts.Queue.html#maybe_unindex/1"},{"type":"function","title":"Bonfire.Search.Acts.Queue.prepare_object/1","doc":"","ref":"Bonfire.Search.Acts.Queue.html#prepare_object/1"},{"type":"module","title":"Bonfire.Search.Fuzzy","doc":"","ref":"Bonfire.Search.Fuzzy.html"},{"type":"function","title":"Bonfire.Search.Fuzzy.do_search/4","doc":"","ref":"Bonfire.Search.Fuzzy.html#do_search/4"},{"type":"function","title":"Bonfire.Search.Fuzzy.search/4","doc":"","ref":"Bonfire.Search.Fuzzy.html#search/4"},{"type":"function","title":"Bonfire.Search.Fuzzy.search_filtered/2","doc":"","ref":"Bonfire.Search.Fuzzy.html#search_filtered/2"},{"type":"module","title":"Bonfire.Search.HTTP","doc":"","ref":"Bonfire.Search.HTTP.html"},{"type":"function","title":"Bonfire.Search.HTTP.http_adapter/0","doc":"","ref":"Bonfire.Search.HTTP.html#http_adapter/0"},{"type":"function","title":"Bonfire.Search.HTTP.http_error/5","doc":"","ref":"Bonfire.Search.HTTP.html#http_error/5"},{"type":"function","title":"Bonfire.Search.HTTP.http_request/4","doc":"","ref":"Bonfire.Search.HTTP.html#http_request/4"},{"type":"module","title":"Bonfire.Search.Indexer","doc":"","ref":"Bonfire.Search.Indexer.html"},{"type":"function","title":"Bonfire.Search.Indexer.host/1","doc":"","ref":"Bonfire.Search.Indexer.html#host/1"},{"type":"function","title":"Bonfire.Search.Indexer.index_public_object/1","doc":"","ref":"Bonfire.Search.Indexer.html#index_public_object/1"},{"type":"function","title":"Bonfire.Search.Indexer.init_index/2","doc":"","ref":"Bonfire.Search.Indexer.html#init_index/2"},{"type":"function","title":"Bonfire.Search.Indexer.maybe_delete_object/2","doc":"","ref":"Bonfire.Search.Indexer.html#maybe_delete_object/2"},{"type":"function","title":"Bonfire.Search.Indexer.maybe_index_object/1","doc":"","ref":"Bonfire.Search.Indexer.html#maybe_index_object/1"},{"type":"function","title":"Bonfire.Search.Indexer.maybe_indexable_and_discoverable/2","doc":"","ref":"Bonfire.Search.Indexer.html#maybe_indexable_and_discoverable/2"},{"type":"function","title":"Bonfire.Search.Indexer.maybe_indexable_object/1","doc":"","ref":"Bonfire.Search.Indexer.html#maybe_indexable_object/1"},{"type":"module","title":"Bonfire.Search.LiveHandler","doc":"","ref":"Bonfire.Search.LiveHandler.html"},{"type":"function","title":"Bonfire.Search.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Search.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Search.LiveHandler.live_search/4","doc":"","ref":"Bonfire.Search.LiveHandler.html#live_search/4"},{"type":"macro","title":"Bonfire.Search.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Search.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Search.Meili","doc":"","ref":"Bonfire.Search.Meili.html"},{"type":"function","title":"Bonfire.Search.Meili.api/4","doc":"","ref":"Bonfire.Search.Meili.html#api/4"},{"type":"function","title":"Bonfire.Search.Meili.create_index/2","doc":"","ref":"Bonfire.Search.Meili.html#create_index/2"},{"type":"function","title":"Bonfire.Search.Meili.delete/3","doc":"","ref":"Bonfire.Search.Meili.html#delete/3"},{"type":"function","title":"Bonfire.Search.Meili.get/1","doc":"","ref":"Bonfire.Search.Meili.html#get/1"},{"type":"function","title":"Bonfire.Search.Meili.get/3","doc":"","ref":"Bonfire.Search.Meili.html#get/3"},{"type":"function","title":"Bonfire.Search.Meili.index_exists/1","doc":"","ref":"Bonfire.Search.Meili.html#index_exists/1"},{"type":"function","title":"Bonfire.Search.Meili.list_facets/1","doc":"","ref":"Bonfire.Search.Meili.html#list_facets/1"},{"type":"function","title":"Bonfire.Search.Meili.patch/3","doc":"","ref":"Bonfire.Search.Meili.html#patch/3"},{"type":"function","title":"Bonfire.Search.Meili.post/3","doc":"","ref":"Bonfire.Search.Meili.html#post/3"},{"type":"function","title":"Bonfire.Search.Meili.put/3","doc":"","ref":"Bonfire.Search.Meili.html#put/3"},{"type":"function","title":"Bonfire.Search.Meili.search/2","doc":"","ref":"Bonfire.Search.Meili.html#search/2"},{"type":"function","title":"Bonfire.Search.Meili.set_facets/2","doc":"","ref":"Bonfire.Search.Meili.html#set_facets/2"},{"type":"function","title":"Bonfire.Search.Meili.set_searchable_fields/2","doc":"","ref":"Bonfire.Search.Meili.html#set_searchable_fields/2"},{"type":"function","title":"Bonfire.Search.Meili.settings/2","doc":"","ref":"Bonfire.Search.Meili.html#settings/2"},{"type":"module","title":"Bonfire.Search.RuntimeConfig","doc":"","ref":"Bonfire.Search.RuntimeConfig.html"},{"type":"function","title":"Bonfire.Search.RuntimeConfig.config/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config/0 .","ref":"Bonfire.Search.RuntimeConfig.html#config/0"},{"type":"function","title":"Bonfire.Search.RuntimeConfig.config_module/0","doc":"Callback implementation for Bonfire.Common.ConfigModule.config_module/0 .","ref":"Bonfire.Search.RuntimeConfig.html#config_module/0"},{"type":"module","title":"Bonfire.Search.Stopwords","doc":"Handles matching of needs &amp; offers","ref":"Bonfire.Search.Stopwords.html"},{"type":"function","title":"Bonfire.Search.Stopwords.filter/2","doc":"Filters out pre-defined stop words.","ref":"Bonfire.Search.Stopwords.html#filter/2"},{"type":"function","title":"Bonfire.Search.Stopwords.split_sentences/1","doc":"","ref":"Bonfire.Search.Stopwords.html#split_sentences/1"},{"type":"function","title":"Bonfire.Search.Stopwords.split_words/1","doc":"","ref":"Bonfire.Search.Stopwords.html#split_words/1"},{"type":"function","title":"Bonfire.Search.Stopwords.stop_words/1","doc":"","ref":"Bonfire.Search.Stopwords.html#stop_words/1"},{"type":"module","title":"Bonfire.Search.Web.Routes","doc":"","ref":"Bonfire.Search.Web.Routes.html"},{"type":"function","title":"Bonfire.Search.Web.Routes.declare_routes/0","doc":"","ref":"Bonfire.Search.Web.Routes.html#declare_routes/0"},{"type":"module","title":"Bonfire.Seeder","doc":"A way to have data seeds that work similarly to migrations. To generate a new seed: mix phil_columns.gen.seed my_seed_name will create a new module in priv/repo/seeds To actually insert the seeds into your app, if that's not configured to be done automatically in your mix aliases, run mix phil_columns.seed To roll-back: mix phil_columns.rollback","ref":"Bonfire.Seeder.html"},{"type":"module","title":"Bonfire.Social.APActivities","doc":"","ref":"Bonfire.Social.APActivities.html"},{"type":"function","title":"Bonfire.Social.APActivities.ap_receive_activity/3","doc":"","ref":"Bonfire.Social.APActivities.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Social.APActivities.create/4","doc":"","ref":"Bonfire.Social.APActivities.html#create/4"},{"type":"function","title":"Bonfire.Social.APActivities.insert/3","doc":"","ref":"Bonfire.Social.APActivities.html#insert/3"},{"type":"module","title":"Bonfire.Social.Activities","doc":"","ref":"Bonfire.Social.Activities.html"},{"type":"function","title":"Bonfire.Social.Activities.activity_preloads/2","doc":"","ref":"Bonfire.Social.Activities.html#activity_preloads/2"},{"type":"function","title":"Bonfire.Social.Activities.activity_preloads/3","doc":"","ref":"Bonfire.Social.Activities.html#activity_preloads/3"},{"type":"function","title":"Bonfire.Social.Activities.activity_under_object/1","doc":"","ref":"Bonfire.Social.Activities.html#activity_under_object/1"},{"type":"function","title":"Bonfire.Social.Activities.activity_under_object/2","doc":"","ref":"Bonfire.Social.Activities.html#activity_under_object/2"},{"type":"function","title":"Bonfire.Social.Activities.all_verb_names/0","doc":"Outputs the names all object verbs, for the purpose of adding to the localisation strings, as long as the output is piped through to localise_strings/1 at compile time.","ref":"Bonfire.Social.Activities.html#all_verb_names/0"},{"type":"function","title":"Bonfire.Social.Activities.all_verb_names_extra/0","doc":"","ref":"Bonfire.Social.Activities.html#all_verb_names_extra/0"},{"type":"function","title":"Bonfire.Social.Activities.as_permitted_for/3","doc":"","ref":"Bonfire.Social.Activities.html#as_permitted_for/3"},{"type":"function","title":"Bonfire.Social.Activities.assigns_with_object_under_activity/1","doc":"","ref":"Bonfire.Social.Activities.html#assigns_with_object_under_activity/1"},{"type":"function","title":"Bonfire.Social.Activities.build_assoc/3","doc":"","ref":"Bonfire.Social.Activities.html#build_assoc/3"},{"type":"function","title":"Bonfire.Social.Activities.build_assoc/4","doc":"","ref":"Bonfire.Social.Activities.html#build_assoc/4"},{"type":"function","title":"Bonfire.Social.Activities.by_subject_verb_object_q/3","doc":"","ref":"Bonfire.Social.Activities.html#by_subject_verb_object_q/3"},{"type":"function","title":"Bonfire.Social.Activities.cast/4","doc":"","ref":"Bonfire.Social.Activities.html#cast/4"},{"type":"function","title":"Bonfire.Social.Activities.count_total/0","doc":"","ref":"Bonfire.Social.Activities.html#count_total/0"},{"type":"function","title":"Bonfire.Social.Activities.create/4","doc":"Create an Activity NOTE: you will usually want to use cast/3 instead","ref":"Bonfire.Social.Activities.html#create/4"},{"type":"function","title":"Bonfire.Social.Activities.delete/1","doc":"Delete activities, using specific filters","ref":"Bonfire.Social.Activities.html#delete/1"},{"type":"function","title":"Bonfire.Social.Activities.delete_by_subject_verb_object/3","doc":"Delete an activity (usage by things like unlike)","ref":"Bonfire.Social.Activities.html#delete_by_subject_verb_object/3"},{"type":"function","title":"Bonfire.Social.Activities.delete_object/1","doc":"","ref":"Bonfire.Social.Activities.html#delete_object/1"},{"type":"function","title":"Bonfire.Social.Activities.get/2","doc":"Get an activity by its ID","ref":"Bonfire.Social.Activities.html#get/2"},{"type":"function","title":"Bonfire.Social.Activities.load_object/2","doc":"","ref":"Bonfire.Social.Activities.html#load_object/2"},{"type":"function","title":"Bonfire.Social.Activities.object_from_activity/1","doc":"","ref":"Bonfire.Social.Activities.html#object_from_activity/1"},{"type":"function","title":"Bonfire.Social.Activities.object_preload_activity/2","doc":"","ref":"Bonfire.Social.Activities.html#object_preload_activity/2"},{"type":"function","title":"Bonfire.Social.Activities.object_preload_create_activity/1","doc":"","ref":"Bonfire.Social.Activities.html#object_preload_create_activity/1"},{"type":"function","title":"Bonfire.Social.Activities.object_under_activity/2","doc":"","ref":"Bonfire.Social.Activities.html#object_under_activity/2"},{"type":"function","title":"Bonfire.Social.Activities.put_assoc/3","doc":"","ref":"Bonfire.Social.Activities.html#put_assoc/3"},{"type":"function","title":"Bonfire.Social.Activities.put_assoc/4","doc":"","ref":"Bonfire.Social.Activities.html#put_assoc/4"},{"type":"function","title":"Bonfire.Social.Activities.query/2","doc":"","ref":"Bonfire.Social.Activities.html#query/2"},{"type":"function","title":"Bonfire.Social.Activities.query_object_preload_activity/4","doc":"","ref":"Bonfire.Social.Activities.html#query_object_preload_activity/4"},{"type":"function","title":"Bonfire.Social.Activities.query_object_preload_create_activity/2","doc":"","ref":"Bonfire.Social.Activities.html#query_object_preload_create_activity/2"},{"type":"function","title":"Bonfire.Social.Activities.read/2","doc":"Get an activity by its object ID (usually a create activity)","ref":"Bonfire.Social.Activities.html#read/2"},{"type":"function","title":"Bonfire.Social.Activities.reply_to_as_permitted_for/3","doc":"","ref":"Bonfire.Social.Activities.html#reply_to_as_permitted_for/3"},{"type":"function","title":"Bonfire.Social.Activities.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Activities.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Activities.verb_congugate/1","doc":"","ref":"Bonfire.Social.Activities.html#verb_congugate/1"},{"type":"function","title":"Bonfire.Social.Activities.verb_display/1","doc":"","ref":"Bonfire.Social.Activities.html#verb_display/1"},{"type":"function","title":"Bonfire.Social.Activities.verb_id/1","doc":"","ref":"Bonfire.Social.Activities.html#verb_id/1"},{"type":"function","title":"Bonfire.Social.Activities.verb_maybe_modify/2","doc":"","ref":"Bonfire.Social.Activities.html#verb_maybe_modify/2"},{"type":"function","title":"Bonfire.Social.Activities.verb_name/1","doc":"","ref":"Bonfire.Social.Activities.html#verb_name/1"},{"type":"module","title":"Bonfire.Social.Acts.Activity","doc":"","ref":"Bonfire.Social.Acts.Activity.html"},{"type":"function","title":"Bonfire.Social.Acts.Activity.run/2","doc":"","ref":"Bonfire.Social.Acts.Activity.html#run/2"},{"type":"module","title":"Bonfire.Social.Acts.Activity.UnderObject","doc":"","ref":"Bonfire.Social.Acts.Activity.UnderObject.html"},{"type":"function","title":"Bonfire.Social.Acts.Activity.UnderObject.run/2","doc":"","ref":"Bonfire.Social.Acts.Activity.UnderObject.html#run/2"},{"type":"module","title":"Bonfire.Social.Acts.Federate","doc":"An Act that translates a post or changeset into some jobs for the AP publish worker. Handles creation, update and delete Act Options: on - key in assigns to find the post, default: :post as - key in assigns to assign indexable object, default: :post_index","ref":"Bonfire.Social.Acts.Federate.html"},{"type":"function","title":"Bonfire.Social.Acts.Federate.run/2","doc":"","ref":"Bonfire.Social.Acts.Federate.html#run/2"},{"type":"module","title":"Bonfire.Social.Acts.Feeds","doc":"NOT USED - Finds a list of appropriate feeds into which to post. Epic Options: :current_user - current user. required. :boundary - preset string or custom boundaries. default: nil Act Options: :changeset - key in assigns to find changeset, required","ref":"Bonfire.Social.Acts.Feeds.html"},{"type":"function","title":"Bonfire.Social.Acts.Feeds.run/2","doc":"","ref":"Bonfire.Social.Acts.Feeds.html#run/2"},{"type":"function","title":"Bonfire.Social.Acts.Feeds.thread_id/1","doc":"","ref":"Bonfire.Social.Acts.Feeds.html#thread_id/1"},{"type":"module","title":"Bonfire.Social.Acts.LivePush","doc":"","ref":"Bonfire.Social.Acts.LivePush.html"},{"type":"function","title":"Bonfire.Social.Acts.LivePush.run/2","doc":"","ref":"Bonfire.Social.Acts.LivePush.html#run/2"},{"type":"module","title":"Bonfire.Social.Acts.Objects.Delete","doc":"Delete something + specified associations with a changeset","ref":"Bonfire.Social.Acts.Objects.Delete.html"},{"type":"module","title":"Bonfire.Social.Acts.PostContents","doc":"","ref":"Bonfire.Social.Acts.PostContents.html"},{"type":"function","title":"Bonfire.Social.Acts.PostContents.run/2","doc":"","ref":"Bonfire.Social.Acts.PostContents.html#run/2"},{"type":"module","title":"Bonfire.Social.Acts.Posts.Publish","doc":"Creates a changeset for publishing a post Epic Options: :current_user - user that will create the post, required. :post_attrs (configurable) - attrs to create the post from, required. :post_id (configurable) - id to use for the created post (handy for creating activitypub objects with an id representing their reported creation time) Act Options: :id - epic options key to find an id to force override with at, default: :post_id :as - key to assign changeset to, default: :post . :attrs - epic options key to find the attributes at, default: :post_attrs .","ref":"Bonfire.Social.Acts.Posts.Publish.html"},{"type":"module","title":"Bonfire.Social.Acts.Threaded","doc":"","ref":"Bonfire.Social.Acts.Threaded.html"},{"type":"function","title":"Bonfire.Social.Acts.Threaded.run/2","doc":"","ref":"Bonfire.Social.Acts.Threaded.html#run/2"},{"type":"module","title":"Bonfire.Social.Aliases","doc":"","ref":"Bonfire.Social.Aliases.html"},{"type":"function","title":"Bonfire.Social.Aliases.add/3","doc":"Alias someone/something.","ref":"Bonfire.Social.Aliases.html#add/3"},{"type":"function","title":"Bonfire.Social.Aliases.all_by_object/2","doc":"","ref":"Bonfire.Social.Aliases.html#all_by_object/2"},{"type":"function","title":"Bonfire.Social.Aliases.all_by_subject/2","doc":"","ref":"Bonfire.Social.Aliases.html#all_by_subject/2"},{"type":"function","title":"Bonfire.Social.Aliases.all_objects_by_subject/2","doc":"","ref":"Bonfire.Social.Aliases.html#all_objects_by_subject/2"},{"type":"function","title":"Bonfire.Social.Aliases.all_subjects_by_object/2","doc":"","ref":"Bonfire.Social.Aliases.html#all_subjects_by_object/2"},{"type":"function","title":"Bonfire.Social.Aliases.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Aliases.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Aliases.ap_receive_activity/3","doc":"","ref":"Bonfire.Social.Aliases.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Social.Aliases.exists?/2","doc":"","ref":"Bonfire.Social.Aliases.html#exists?/2"},{"type":"function","title":"Bonfire.Social.Aliases.federation_module/0","doc":"","ref":"Bonfire.Social.Aliases.html#federation_module/0"},{"type":"function","title":"Bonfire.Social.Aliases.get/3","doc":"","ref":"Bonfire.Social.Aliases.html#get/3"},{"type":"function","title":"Bonfire.Social.Aliases.get!/3","doc":"","ref":"Bonfire.Social.Aliases.html#get!/3"},{"type":"function","title":"Bonfire.Social.Aliases.insert/3","doc":"","ref":"Bonfire.Social.Aliases.html#insert/3"},{"type":"function","title":"Bonfire.Social.Aliases.list_aliased/2","doc":"","ref":"Bonfire.Social.Aliases.html#list_aliased/2"},{"type":"function","title":"Bonfire.Social.Aliases.list_aliases/2","doc":"","ref":"Bonfire.Social.Aliases.html#list_aliases/2"},{"type":"function","title":"Bonfire.Social.Aliases.list_my_aliased/2","doc":"","ref":"Bonfire.Social.Aliases.html#list_my_aliased/2"},{"type":"function","title":"Bonfire.Social.Aliases.list_my_aliases/2","doc":"","ref":"Bonfire.Social.Aliases.html#list_my_aliases/2"},{"type":"function","title":"Bonfire.Social.Aliases.move/2","doc":"","ref":"Bonfire.Social.Aliases.html#move/2"},{"type":"function","title":"Bonfire.Social.Aliases.move_following/2","doc":"","ref":"Bonfire.Social.Aliases.html#move_following/2"},{"type":"function","title":"Bonfire.Social.Aliases.query/2","doc":"","ref":"Bonfire.Social.Aliases.html#query/2"},{"type":"function","title":"Bonfire.Social.Aliases.remove/2","doc":"","ref":"Bonfire.Social.Aliases.html#remove/2"},{"type":"function","title":"Bonfire.Social.Aliases.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Aliases.html#schema_module/0"},{"type":"module","title":"Bonfire.Social.Boosts","doc":"","ref":"Bonfire.Social.Boosts.html"},{"type":"function","title":"Bonfire.Social.Boosts.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Boosts.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Boosts.ap_receive_activity/3","doc":"","ref":"Bonfire.Social.Boosts.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Social.Boosts.boost/2","doc":"","ref":"Bonfire.Social.Boosts.html#boost/2"},{"type":"function","title":"Bonfire.Social.Boosts.boosted?/2","doc":"","ref":"Bonfire.Social.Boosts.html#boosted?/2"},{"type":"function","title":"Bonfire.Social.Boosts.count/2","doc":"","ref":"Bonfire.Social.Boosts.html#count/2"},{"type":"function","title":"Bonfire.Social.Boosts.date_last_boosted/2","doc":"","ref":"Bonfire.Social.Boosts.html#date_last_boosted/2"},{"type":"function","title":"Bonfire.Social.Boosts.federation_module/0","doc":"","ref":"Bonfire.Social.Boosts.html#federation_module/0"},{"type":"function","title":"Bonfire.Social.Boosts.get/3","doc":"","ref":"Bonfire.Social.Boosts.html#get/3"},{"type":"function","title":"Bonfire.Social.Boosts.get!/3","doc":"","ref":"Bonfire.Social.Boosts.html#get!/3"},{"type":"function","title":"Bonfire.Social.Boosts.list_by/2","doc":"List boosts by the user","ref":"Bonfire.Social.Boosts.html#list_by/2"},{"type":"function","title":"Bonfire.Social.Boosts.list_my/1","doc":"List current user's boosts","ref":"Bonfire.Social.Boosts.html#list_my/1"},{"type":"function","title":"Bonfire.Social.Boosts.list_of/2","doc":"List boost of an object","ref":"Bonfire.Social.Boosts.html#list_of/2"},{"type":"function","title":"Bonfire.Social.Boosts.list_paginated/2","doc":"","ref":"Bonfire.Social.Boosts.html#list_paginated/2"},{"type":"function","title":"Bonfire.Social.Boosts.maybe_boost/2","doc":"","ref":"Bonfire.Social.Boosts.html#maybe_boost/2"},{"type":"function","title":"Bonfire.Social.Boosts.query/2","doc":"","ref":"Bonfire.Social.Boosts.html#query/2"},{"type":"function","title":"Bonfire.Social.Boosts.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Boosts.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Boosts.unboost/2","doc":"","ref":"Bonfire.Social.Boosts.html#unboost/2"},{"type":"module","title":"Bonfire.Social.Boosts.LiveHandler","doc":"","ref":"Bonfire.Social.Boosts.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Boosts.LiveHandler.do_boost/3","doc":"","ref":"Bonfire.Social.Boosts.LiveHandler.html#do_boost/3"},{"type":"function","title":"Bonfire.Social.Boosts.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Boosts.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Social.Boosts.LiveHandler.preload/2","doc":"","ref":"Bonfire.Social.Boosts.LiveHandler.html#preload/2"},{"type":"macro","title":"Bonfire.Social.Boosts.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Boosts.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Social.Edges","doc":"","ref":"Bonfire.Social.Edges.html"},{"type":"function","title":"Bonfire.Social.Edges.changeset/5","doc":"","ref":"Bonfire.Social.Edges.html#changeset/5"},{"type":"function","title":"Bonfire.Social.Edges.changeset_base/4","doc":"","ref":"Bonfire.Social.Edges.html#changeset_base/4"},{"type":"function","title":"Bonfire.Social.Edges.count/3","doc":"","ref":"Bonfire.Social.Edges.html#count/3"},{"type":"function","title":"Bonfire.Social.Edges.count/4","doc":"","ref":"Bonfire.Social.Edges.html#count/4"},{"type":"function","title":"Bonfire.Social.Edges.delete_by_both/3","doc":"","ref":"Bonfire.Social.Edges.html#delete_by_both/3"},{"type":"function","title":"Bonfire.Social.Edges.delete_by_object/1","doc":"","ref":"Bonfire.Social.Edges.html#delete_by_object/1"},{"type":"function","title":"Bonfire.Social.Edges.delete_by_subject/1","doc":"","ref":"Bonfire.Social.Edges.html#delete_by_subject/1"},{"type":"function","title":"Bonfire.Social.Edges.exists?/4","doc":"","ref":"Bonfire.Social.Edges.html#exists?/4"},{"type":"function","title":"Bonfire.Social.Edges.filters_from_opts/1","doc":"","ref":"Bonfire.Social.Edges.html#filters_from_opts/1"},{"type":"function","title":"Bonfire.Social.Edges.get/4","doc":"","ref":"Bonfire.Social.Edges.html#get/4"},{"type":"function","title":"Bonfire.Social.Edges.get!/4","doc":"","ref":"Bonfire.Social.Edges.html#get!/4"},{"type":"function","title":"Bonfire.Social.Edges.insert/3","doc":"","ref":"Bonfire.Social.Edges.html#insert/3"},{"type":"function","title":"Bonfire.Social.Edges.insert/5","doc":"","ref":"Bonfire.Social.Edges.html#insert/5"},{"type":"function","title":"Bonfire.Social.Edges.last/4","doc":"retrieves the last edge of a given type, subject, and object from the database","ref":"Bonfire.Social.Edges.html#last/4"},{"type":"function","title":"Bonfire.Social.Edges.last_date/4","doc":"retrieves the date of the last edge of a given type, subject, and object from the database","ref":"Bonfire.Social.Edges.html#last_date/4"},{"type":"function","title":"Bonfire.Social.Edges.put_edge_assoc/3","doc":"","ref":"Bonfire.Social.Edges.html#put_edge_assoc/3"},{"type":"function","title":"Bonfire.Social.Edges.put_edge_assoc/4","doc":"","ref":"Bonfire.Social.Edges.html#put_edge_assoc/4"},{"type":"function","title":"Bonfire.Social.Edges.query/2","doc":"","ref":"Bonfire.Social.Edges.html#query/2"},{"type":"function","title":"Bonfire.Social.Edges.query_parent/3","doc":"","ref":"Bonfire.Social.Edges.html#query_parent/3"},{"type":"module","title":"Bonfire.Social.Fake","doc":"","ref":"Bonfire.Social.Fake.html"},{"type":"function","title":"Bonfire.Social.Fake.fake_comment!/4","doc":"","ref":"Bonfire.Social.Fake.html#fake_comment!/4"},{"type":"function","title":"Bonfire.Social.Fake.fake_follow!/0","doc":"","ref":"Bonfire.Social.Fake.html#fake_follow!/0"},{"type":"function","title":"Bonfire.Social.Fake.fake_incoming_follow!/0","doc":"","ref":"Bonfire.Social.Fake.html#fake_incoming_follow!/0"},{"type":"function","title":"Bonfire.Social.Fake.fake_outgoing_follow!/0","doc":"","ref":"Bonfire.Social.Fake.html#fake_outgoing_follow!/0"},{"type":"function","title":"Bonfire.Social.Fake.fake_post!/4","doc":"","ref":"Bonfire.Social.Fake.html#fake_post!/4"},{"type":"function","title":"Bonfire.Social.Fake.fake_remote_user!/0","doc":"","ref":"Bonfire.Social.Fake.html#fake_remote_user!/0"},{"type":"module","title":"Bonfire.Social.FeedActivities","doc":"","ref":"Bonfire.Social.FeedActivities.html"},{"type":"function","title":"Bonfire.Social.FeedActivities.cast/2","doc":"","ref":"Bonfire.Social.FeedActivities.html#cast/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.cast/3","doc":"","ref":"Bonfire.Social.FeedActivities.html#cast/3"},{"type":"function","title":"Bonfire.Social.FeedActivities.count/2","doc":"","ref":"Bonfire.Social.FeedActivities.html#count/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.count_subjects/2","doc":"","ref":"Bonfire.Social.FeedActivities.html#count_subjects/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.count_total/0","doc":"","ref":"Bonfire.Social.FeedActivities.html#count_total/0"},{"type":"function","title":"Bonfire.Social.FeedActivities.delete/1","doc":"Remove activities from feeds, using specific filters","ref":"Bonfire.Social.FeedActivities.html#delete/1"},{"type":"function","title":"Bonfire.Social.FeedActivities.delete/2","doc":"Remove one or more activities from all feeds","ref":"Bonfire.Social.FeedActivities.html#delete/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.feed/2","doc":"Gets a feed by id or ids or a thing/things containing an id/ids.","ref":"Bonfire.Social.FeedActivities.html#feed/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.feed_contains?/3","doc":"","ref":"Bonfire.Social.FeedActivities.html#feed_contains?/3"},{"type":"function","title":"Bonfire.Social.FeedActivities.feed_ids_and_opts/2","doc":"","ref":"Bonfire.Social.FeedActivities.html#feed_ids_and_opts/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.feed_paginated/2","doc":"Return a page of Feed Activities (reverse chronological) + pagination metadata TODO: consolidate with feed/2","ref":"Bonfire.Social.FeedActivities.html#feed_paginated/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.feed_paginated/3","doc":"","ref":"Bonfire.Social.FeedActivities.html#feed_paginated/3"},{"type":"function","title":"Bonfire.Social.FeedActivities.feed_with_object/3","doc":"","ref":"Bonfire.Social.FeedActivities.html#feed_with_object/3"},{"type":"function","title":"Bonfire.Social.FeedActivities.feeds_for_activity/1","doc":"Gets a list of feed ids this activity was published to from the database. Currently only used by the ActivityPub integration.","ref":"Bonfire.Social.FeedActivities.html#feeds_for_activity/1"},{"type":"function","title":"Bonfire.Social.FeedActivities.filters_from_opts/1","doc":"","ref":"Bonfire.Social.FeedActivities.html#filters_from_opts/1"},{"type":"function","title":"Bonfire.Social.FeedActivities.get_feed_ids/1","doc":"Computes the feed ids for get_feed_publishes/2 . Options: :inbox - list of objects whose inbox we should attempt to insert into. :outbox - list of objects whose outbox we should attempt to insert into. :notifications - list of objects whose notifications we should attempt to insert into. :feeds - list of ids (or objects containing IDs of feeds to post to.","ref":"Bonfire.Social.FeedActivities.html#get_feed_ids/1"},{"type":"function","title":"Bonfire.Social.FeedActivities.get_feed_publishes/1","doc":"Creates the underlying data for put_feed_publishes/2 .","ref":"Bonfire.Social.FeedActivities.html#get_feed_publishes/1"},{"type":"function","title":"Bonfire.Social.FeedActivities.mark_all_seen/2","doc":"","ref":"Bonfire.Social.FeedActivities.html#mark_all_seen/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.maybe_feed_publish/5","doc":"Creates a new local activity or takes an existing one and publishes to specified feeds","ref":"Bonfire.Social.FeedActivities.html#maybe_feed_publish/5"},{"type":"function","title":"Bonfire.Social.FeedActivities.my_feed/2","doc":"Gets a user's home feed, a combination of all feeds the user is subscribed to.","ref":"Bonfire.Social.FeedActivities.html#my_feed/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.publish/4","doc":"Creates a new local activity and publishes to appropriate feeds TODO: make this re-use the changeset-based code like in Epics instead of duplicating logic (currently it is only used in VF extension anyway)","ref":"Bonfire.Social.FeedActivities.html#publish/4"},{"type":"function","title":"Bonfire.Social.FeedActivities.put_feed_publishes/2","doc":"Arranges for an insert changeset to also publish to feeds related to some objects. Options: see get_feed_ids/1","ref":"Bonfire.Social.FeedActivities.html#put_feed_publishes/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.query/2","doc":"","ref":"Bonfire.Social.FeedActivities.html#query/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.query/3","doc":"","ref":"Bonfire.Social.FeedActivities.html#query/3"},{"type":"function","title":"Bonfire.Social.FeedActivities.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.FeedActivities.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.FeedActivities.skip_verbs_default/0","doc":"","ref":"Bonfire.Social.FeedActivities.html#skip_verbs_default/0"},{"type":"function","title":"Bonfire.Social.FeedActivities.the_object/1","doc":"","ref":"Bonfire.Social.FeedActivities.html#the_object/1"},{"type":"function","title":"Bonfire.Social.FeedActivities.unseen_count/2","doc":"","ref":"Bonfire.Social.FeedActivities.html#unseen_count/2"},{"type":"function","title":"Bonfire.Social.FeedActivities.unseen_query/2","doc":"","ref":"Bonfire.Social.FeedActivities.html#unseen_query/2"},{"type":"module","title":"Bonfire.Social.Feeds","doc":"","ref":"Bonfire.Social.Feeds.html"},{"type":"function","title":"Bonfire.Social.Feeds.admin_notifications/1","doc":"","ref":"Bonfire.Social.Feeds.html#admin_notifications/1"},{"type":"function","title":"Bonfire.Social.Feeds.admins_notifications/0","doc":"","ref":"Bonfire.Social.Feeds.html#admins_notifications/0"},{"type":"function","title":"Bonfire.Social.Feeds.admins_notifications/1","doc":"","ref":"Bonfire.Social.Feeds.html#admins_notifications/1"},{"type":"function","title":"Bonfire.Social.Feeds.do_target_feeds/5","doc":"","ref":"Bonfire.Social.Feeds.html#do_target_feeds/5"},{"type":"function","title":"Bonfire.Social.Feeds.feed_id/2","doc":"","ref":"Bonfire.Social.Feeds.html#feed_id/2"},{"type":"function","title":"Bonfire.Social.Feeds.feed_id!/2","doc":"","ref":"Bonfire.Social.Feeds.html#feed_id!/2"},{"type":"function","title":"Bonfire.Social.Feeds.feed_ids/2","doc":"","ref":"Bonfire.Social.Feeds.html#feed_ids/2"},{"type":"function","title":"Bonfire.Social.Feeds.feed_ids_to_publish/3","doc":"","ref":"Bonfire.Social.Feeds.html#feed_ids_to_publish/3"},{"type":"function","title":"Bonfire.Social.Feeds.feed_ids_to_publish/4","doc":"","ref":"Bonfire.Social.Feeds.html#feed_ids_to_publish/4"},{"type":"function","title":"Bonfire.Social.Feeds.inbox_of_obj_creator/1","doc":"","ref":"Bonfire.Social.Feeds.html#inbox_of_obj_creator/1"},{"type":"function","title":"Bonfire.Social.Feeds.maybe_create_feed/2","doc":"","ref":"Bonfire.Social.Feeds.html#maybe_create_feed/2"},{"type":"function","title":"Bonfire.Social.Feeds.maybe_creator_notification/2","doc":"","ref":"Bonfire.Social.Feeds.html#maybe_creator_notification/2"},{"type":"function","title":"Bonfire.Social.Feeds.maybe_custom_feeds/1","doc":"","ref":"Bonfire.Social.Feeds.html#maybe_custom_feeds/1"},{"type":"function","title":"Bonfire.Social.Feeds.maybe_my_outbox_feed_id/2","doc":"","ref":"Bonfire.Social.Feeds.html#maybe_my_outbox_feed_id/2"},{"type":"function","title":"Bonfire.Social.Feeds.my_feed_id/2","doc":"","ref":"Bonfire.Social.Feeds.html#my_feed_id/2"},{"type":"function","title":"Bonfire.Social.Feeds.my_home_feed_ids/2","doc":"","ref":"Bonfire.Social.Feeds.html#my_home_feed_ids/2"},{"type":"function","title":"Bonfire.Social.Feeds.named_feed_id/2","doc":"","ref":"Bonfire.Social.Feeds.html#named_feed_id/2"},{"type":"function","title":"Bonfire.Social.Feeds.reply_and_or_mentions_notifications_feeds/3","doc":"","ref":"Bonfire.Social.Feeds.html#reply_and_or_mentions_notifications_feeds/3"},{"type":"function","title":"Bonfire.Social.Feeds.schema_module/0","doc":"Callback implementation for Bonfire.Common.QueryModule.schema_module/0 .","ref":"Bonfire.Social.Feeds.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Feeds.target_feeds/3","doc":"","ref":"Bonfire.Social.Feeds.html#target_feeds/3"},{"type":"type","title":"Bonfire.Social.Feeds.feed_name/0","doc":"Names a predefined feed attached to a user","ref":"Bonfire.Social.Feeds.html#t:feed_name/0"},{"type":"module","title":"Bonfire.Social.Feeds.LiveHandler","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.assign_feed/3","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#assign_feed/3"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.feed_assigns_maybe_async/2","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#feed_assigns_maybe_async/2"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.feed_default_assigns/2","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#feed_default_assigns/2"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.handle_info/2","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#handle_info/2"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.handle_params/3","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#handle_params/3"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.insert_feed/3","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#insert_feed/3"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.load_user_feed_assigns/3","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#load_user_feed_assigns/3"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.load_user_feed_assigns/4","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#load_user_feed_assigns/4"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.object_preloads/0","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#object_preloads/0"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.paginate_default_feed/3","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#paginate_default_feed/3"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.paginate_feed/4","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#paginate_feed/4"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.paginate_fetch_assign_default/2","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#paginate_fetch_assign_default/2"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.preload/2","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#preload/2"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.preload_activity_and_object_assocs/3","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#preload_activity_and_object_assocs/3"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.reply_to_activity/2","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#reply_to_activity/2"},{"type":"macro","title":"Bonfire.Social.Feeds.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#sigil_p/2"},{"type":"function","title":"Bonfire.Social.Feeds.LiveHandler.user_feed_assign_or_load_async/4","doc":"","ref":"Bonfire.Social.Feeds.LiveHandler.html#user_feed_assign_or_load_async/4"},{"type":"module","title":"Bonfire.Social.Flags","doc":"","ref":"Bonfire.Social.Flags.html"},{"type":"function","title":"Bonfire.Social.Flags.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Flags.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Flags.ap_receive_activity/3","doc":"","ref":"Bonfire.Social.Flags.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Social.Flags.by_flagged/1","doc":"","ref":"Bonfire.Social.Flags.html#by_flagged/1"},{"type":"function","title":"Bonfire.Social.Flags.by_flagger/1","doc":"","ref":"Bonfire.Social.Flags.html#by_flagger/1"},{"type":"function","title":"Bonfire.Social.Flags.federation_module/0","doc":"","ref":"Bonfire.Social.Flags.html#federation_module/0"},{"type":"function","title":"Bonfire.Social.Flags.flag/3","doc":"","ref":"Bonfire.Social.Flags.html#flag/3"},{"type":"function","title":"Bonfire.Social.Flags.flagged?/2","doc":"","ref":"Bonfire.Social.Flags.html#flagged?/2"},{"type":"function","title":"Bonfire.Social.Flags.get/3","doc":"","ref":"Bonfire.Social.Flags.html#get/3"},{"type":"function","title":"Bonfire.Social.Flags.get!/3","doc":"","ref":"Bonfire.Social.Flags.html#get!/3"},{"type":"function","title":"Bonfire.Social.Flags.instance_moderators/0","doc":"","ref":"Bonfire.Social.Flags.html#instance_moderators/0"},{"type":"function","title":"Bonfire.Social.Flags.list/1","doc":"","ref":"Bonfire.Social.Flags.html#list/1"},{"type":"function","title":"Bonfire.Social.Flags.list_by/2","doc":"List flags by the user and which are in their outbox","ref":"Bonfire.Social.Flags.html#list_by/2"},{"type":"function","title":"Bonfire.Social.Flags.list_my/1","doc":"List current user's flags, which are in their outbox","ref":"Bonfire.Social.Flags.html#list_my/1"},{"type":"function","title":"Bonfire.Social.Flags.list_of/2","doc":"List flag of an object and which are in a feed","ref":"Bonfire.Social.Flags.html#list_of/2"},{"type":"function","title":"Bonfire.Social.Flags.list_paginated/2","doc":"","ref":"Bonfire.Social.Flags.html#list_paginated/2"},{"type":"function","title":"Bonfire.Social.Flags.list_preloaded/1","doc":"","ref":"Bonfire.Social.Flags.html#list_preloaded/1"},{"type":"function","title":"Bonfire.Social.Flags.moderators/1","doc":"","ref":"Bonfire.Social.Flags.html#moderators/1"},{"type":"function","title":"Bonfire.Social.Flags.query/2","doc":"","ref":"Bonfire.Social.Flags.html#query/2"},{"type":"function","title":"Bonfire.Social.Flags.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Flags.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Flags.unflag/2","doc":"","ref":"Bonfire.Social.Flags.html#unflag/2"},{"type":"module","title":"Bonfire.Social.Flags.LiveHandler","doc":"","ref":"Bonfire.Social.Flags.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Flags.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Flags.LiveHandler.html#handle_event/3"},{"type":"macro","title":"Bonfire.Social.Flags.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Flags.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Social.Follows","doc":"","ref":"Bonfire.Social.Follows.html"},{"type":"function","title":"Bonfire.Social.Follows.accept/2","doc":"Accepts a follow request, publishes to feeds and federates. Parameter are a Request (or its ID) plus the subject as current_user","ref":"Bonfire.Social.Follows.html#accept/2"},{"type":"function","title":"Bonfire.Social.Follows.accept_from/2","doc":"Accepts a follow request, publishes to feeds and federates. Parameters are the requester plus the subject as current_user","ref":"Bonfire.Social.Follows.html#accept_from/2"},{"type":"function","title":"Bonfire.Social.Follows.all_by_object/2","doc":"","ref":"Bonfire.Social.Follows.html#all_by_object/2"},{"type":"function","title":"Bonfire.Social.Follows.all_by_subject/2","doc":"","ref":"Bonfire.Social.Follows.html#all_by_subject/2"},{"type":"function","title":"Bonfire.Social.Follows.all_followed_outboxes/2","doc":"","ref":"Bonfire.Social.Follows.html#all_followed_outboxes/2"},{"type":"function","title":"Bonfire.Social.Follows.all_objects_by_subject/2","doc":"","ref":"Bonfire.Social.Follows.html#all_objects_by_subject/2"},{"type":"function","title":"Bonfire.Social.Follows.all_subjects_by_object/2","doc":"","ref":"Bonfire.Social.Follows.html#all_subjects_by_object/2"},{"type":"function","title":"Bonfire.Social.Follows.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Follows.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Follows.ap_receive_activity/3","doc":"","ref":"Bonfire.Social.Follows.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Social.Follows.federation_module/0","doc":"","ref":"Bonfire.Social.Follows.html#federation_module/0"},{"type":"function","title":"Bonfire.Social.Follows.follow/3","doc":"Follow someone/something. In case of success, publishes to feeds and federates. If the user is not permitted to follow the object, or the object is a remote actor, will instead request to follow.","ref":"Bonfire.Social.Follows.html#follow/3"},{"type":"function","title":"Bonfire.Social.Follows.following?/2","doc":"","ref":"Bonfire.Social.Follows.html#following?/2"},{"type":"function","title":"Bonfire.Social.Follows.get/3","doc":"","ref":"Bonfire.Social.Follows.html#get/3"},{"type":"function","title":"Bonfire.Social.Follows.get!/3","doc":"","ref":"Bonfire.Social.Follows.html#get!/3"},{"type":"function","title":"Bonfire.Social.Follows.ignore/2","doc":"","ref":"Bonfire.Social.Follows.html#ignore/2"},{"type":"function","title":"Bonfire.Social.Follows.invalidate_followed_outboxes_cache/1","doc":"","ref":"Bonfire.Social.Follows.html#invalidate_followed_outboxes_cache/1"},{"type":"function","title":"Bonfire.Social.Follows.list_followed/2","doc":"","ref":"Bonfire.Social.Follows.html#list_followed/2"},{"type":"function","title":"Bonfire.Social.Follows.list_followers/2","doc":"","ref":"Bonfire.Social.Follows.html#list_followers/2"},{"type":"function","title":"Bonfire.Social.Follows.list_my_followed/2","doc":"","ref":"Bonfire.Social.Follows.html#list_my_followed/2"},{"type":"function","title":"Bonfire.Social.Follows.list_my_followers/2","doc":"","ref":"Bonfire.Social.Follows.html#list_my_followers/2"},{"type":"function","title":"Bonfire.Social.Follows.query/2","doc":"","ref":"Bonfire.Social.Follows.html#query/2"},{"type":"function","title":"Bonfire.Social.Follows.requested?/2","doc":"","ref":"Bonfire.Social.Follows.html#requested?/2"},{"type":"function","title":"Bonfire.Social.Follows.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Follows.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Follows.unfollow/2","doc":"","ref":"Bonfire.Social.Follows.html#unfollow/2"},{"type":"module","title":"Bonfire.Social.Follows.LiveHandler","doc":"","ref":"Bonfire.Social.Follows.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Follows.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Follows.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Social.Follows.LiveHandler.preload/2","doc":"","ref":"Bonfire.Social.Follows.LiveHandler.html#preload/2"},{"type":"macro","title":"Bonfire.Social.Follows.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Follows.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Social.Import","doc":"","ref":"Bonfire.Social.Import.html"},{"type":"function","title":"Bonfire.Social.Import.blocks_from_csv/2","doc":"","ref":"Bonfire.Social.Import.html#blocks_from_csv/2"},{"type":"function","title":"Bonfire.Social.Import.blocks_from_csv_file/2","doc":"","ref":"Bonfire.Social.Import.html#blocks_from_csv_file/2"},{"type":"function","title":"Bonfire.Social.Import.follows_from_csv/2","doc":"","ref":"Bonfire.Social.Import.html#follows_from_csv/2"},{"type":"function","title":"Bonfire.Social.Import.follows_from_csv_file/2","doc":"","ref":"Bonfire.Social.Import.html#follows_from_csv_file/2"},{"type":"function","title":"Bonfire.Social.Import.ghosts_from_csv/2","doc":"","ref":"Bonfire.Social.Import.html#ghosts_from_csv/2"},{"type":"function","title":"Bonfire.Social.Import.ghosts_from_csv_file/2","doc":"","ref":"Bonfire.Social.Import.html#ghosts_from_csv_file/2"},{"type":"function","title":"Bonfire.Social.Import.import_from_csv_file/3","doc":"","ref":"Bonfire.Social.Import.html#import_from_csv_file/3"},{"type":"function","title":"Bonfire.Social.Import.perform/1","doc":"Callback implementation for Oban.Worker.perform/1 .","ref":"Bonfire.Social.Import.html#perform/1"},{"type":"function","title":"Bonfire.Social.Import.perform/3","doc":"","ref":"Bonfire.Social.Import.html#perform/3"},{"type":"function","title":"Bonfire.Social.Import.silences_from_csv/2","doc":"","ref":"Bonfire.Social.Import.html#silences_from_csv/2"},{"type":"function","title":"Bonfire.Social.Import.silences_from_csv_file/2","doc":"","ref":"Bonfire.Social.Import.html#silences_from_csv_file/2"},{"type":"module","title":"Bonfire.Social.Integration","doc":"","ref":"Bonfire.Social.Integration.html"},{"type":"function","title":"Bonfire.Social.Integration.federating?/1","doc":"","ref":"Bonfire.Social.Integration.html#federating?/1"},{"type":"function","title":"Bonfire.Social.Integration.is_admin?/1","doc":"","ref":"Bonfire.Social.Integration.html#is_admin?/1"},{"type":"function","title":"Bonfire.Social.Integration.is_local?/1","doc":"","ref":"Bonfire.Social.Integration.html#is_local?/1"},{"type":"function","title":"Bonfire.Social.Integration.mailer/0","doc":"","ref":"Bonfire.Social.Integration.html#mailer/0"},{"type":"function","title":"Bonfire.Social.Integration.many/3","doc":"","ref":"Bonfire.Social.Integration.html#many/3"},{"type":"function","title":"Bonfire.Social.Integration.maybe_federate/4","doc":"","ref":"Bonfire.Social.Integration.html#maybe_federate/4"},{"type":"function","title":"Bonfire.Social.Integration.maybe_federate_and_gift_wrap_activity/4","doc":"","ref":"Bonfire.Social.Integration.html#maybe_federate_and_gift_wrap_activity/4"},{"type":"function","title":"Bonfire.Social.Integration.repo/0","doc":"","ref":"Bonfire.Social.Integration.html#repo/0"},{"type":"module","title":"Bonfire.Social.Likes","doc":"","ref":"Bonfire.Social.Likes.html"},{"type":"function","title":"Bonfire.Social.Likes.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Likes.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Likes.ap_receive_activity/3","doc":"","ref":"Bonfire.Social.Likes.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Social.Likes.by_liked/2","doc":"","ref":"Bonfire.Social.Likes.html#by_liked/2"},{"type":"function","title":"Bonfire.Social.Likes.by_liker/2","doc":"","ref":"Bonfire.Social.Likes.html#by_liker/2"},{"type":"function","title":"Bonfire.Social.Likes.count/1","doc":"","ref":"Bonfire.Social.Likes.html#count/1"},{"type":"function","title":"Bonfire.Social.Likes.count/2","doc":"","ref":"Bonfire.Social.Likes.html#count/2"},{"type":"function","title":"Bonfire.Social.Likes.do_like/3","doc":"","ref":"Bonfire.Social.Likes.html#do_like/3"},{"type":"function","title":"Bonfire.Social.Likes.federation_module/0","doc":"","ref":"Bonfire.Social.Likes.html#federation_module/0"},{"type":"function","title":"Bonfire.Social.Likes.get/3","doc":"","ref":"Bonfire.Social.Likes.html#get/3"},{"type":"function","title":"Bonfire.Social.Likes.get!/3","doc":"","ref":"Bonfire.Social.Likes.html#get!/3"},{"type":"function","title":"Bonfire.Social.Likes.like/2","doc":"","ref":"Bonfire.Social.Likes.html#like/2"},{"type":"function","title":"Bonfire.Social.Likes.liked?/2","doc":"","ref":"Bonfire.Social.Likes.html#liked?/2"},{"type":"function","title":"Bonfire.Social.Likes.list_by/2","doc":"List likes by a user","ref":"Bonfire.Social.Likes.html#list_by/2"},{"type":"function","title":"Bonfire.Social.Likes.list_my/1","doc":"List the current user's likes","ref":"Bonfire.Social.Likes.html#list_my/1"},{"type":"function","title":"Bonfire.Social.Likes.list_of/2","doc":"List likers of something(s)","ref":"Bonfire.Social.Likes.html#list_of/2"},{"type":"function","title":"Bonfire.Social.Likes.query/2","doc":"","ref":"Bonfire.Social.Likes.html#query/2"},{"type":"function","title":"Bonfire.Social.Likes.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Likes.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Likes.unlike/2","doc":"","ref":"Bonfire.Social.Likes.html#unlike/2"},{"type":"module","title":"Bonfire.Social.Likes.LiveHandler","doc":"","ref":"Bonfire.Social.Likes.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Likes.LiveHandler.do_like/3","doc":"","ref":"Bonfire.Social.Likes.LiveHandler.html#do_like/3"},{"type":"function","title":"Bonfire.Social.Likes.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Likes.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Social.Likes.LiveHandler.liker_count/1","doc":"","ref":"Bonfire.Social.Likes.LiveHandler.html#liker_count/1"},{"type":"function","title":"Bonfire.Social.Likes.LiveHandler.preload/2","doc":"","ref":"Bonfire.Social.Likes.LiveHandler.html#preload/2"},{"type":"macro","title":"Bonfire.Social.Likes.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Likes.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Social.LivePush","doc":"","ref":"Bonfire.Social.LivePush.html"},{"type":"function","title":"Bonfire.Social.LivePush.notify/2","doc":"","ref":"Bonfire.Social.LivePush.html#notify/2"},{"type":"function","title":"Bonfire.Social.LivePush.notify/4","doc":"","ref":"Bonfire.Social.LivePush.html#notify/4"},{"type":"function","title":"Bonfire.Social.LivePush.notify_of_message/4","doc":"","ref":"Bonfire.Social.LivePush.html#notify_of_message/4"},{"type":"function","title":"Bonfire.Social.LivePush.notify_users/4","doc":"Sends a notification about an activity to a list of users, excluding the author/subject","ref":"Bonfire.Social.LivePush.html#notify_users/4"},{"type":"function","title":"Bonfire.Social.LivePush.prepare_activity/2","doc":"","ref":"Bonfire.Social.LivePush.html#prepare_activity/2"},{"type":"function","title":"Bonfire.Social.LivePush.push_activity/3","doc":"Receives an activity with a nested object, or vice versa, uses PubSub to pushes to feeds and optionally notifications","ref":"Bonfire.Social.LivePush.html#push_activity/3"},{"type":"function","title":"Bonfire.Social.LivePush.push_activity_object/4","doc":"Receives an activity and object, uses PubSub to pushes to feeds and optionally notifications, and returns an Activity.","ref":"Bonfire.Social.LivePush.html#push_activity_object/4"},{"type":"module","title":"Bonfire.Social.Messages","doc":"","ref":"Bonfire.Social.Messages.html"},{"type":"function","title":"Bonfire.Social.Messages.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Messages.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Messages.ap_receive_activity/3","doc":"","ref":"Bonfire.Social.Messages.html#ap_receive_activity/3"},{"type":"function","title":"Bonfire.Social.Messages.changeset/4","doc":"","ref":"Bonfire.Social.Messages.html#changeset/4"},{"type":"function","title":"Bonfire.Social.Messages.draft/2","doc":"","ref":"Bonfire.Social.Messages.html#draft/2"},{"type":"function","title":"Bonfire.Social.Messages.federation_module/0","doc":"","ref":"Bonfire.Social.Messages.html#federation_module/0"},{"type":"function","title":"Bonfire.Social.Messages.filter/3","doc":"","ref":"Bonfire.Social.Messages.html#filter/3"},{"type":"function","title":"Bonfire.Social.Messages.list/3","doc":"List posts created by the user and which are in their outbox, which are not replies","ref":"Bonfire.Social.Messages.html#list/3"},{"type":"function","title":"Bonfire.Social.Messages.list/4","doc":"","ref":"Bonfire.Social.Messages.html#list/4"},{"type":"function","title":"Bonfire.Social.Messages.read/2","doc":"","ref":"Bonfire.Social.Messages.html#read/2"},{"type":"function","title":"Bonfire.Social.Messages.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Messages.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Messages.send/3","doc":"TODO: check boundaries, right now anyone can message anyone :/","ref":"Bonfire.Social.Messages.html#send/3"},{"type":"module","title":"Bonfire.Social.Messages.LiveHandler","doc":"","ref":"Bonfire.Social.Messages.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Messages.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Messages.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Social.Messages.LiveHandler.handle_params/3","doc":"","ref":"Bonfire.Social.Messages.LiveHandler.html#handle_params/3"},{"type":"function","title":"Bonfire.Social.Messages.LiveHandler.list_threads/3","doc":"","ref":"Bonfire.Social.Messages.LiveHandler.html#list_threads/3"},{"type":"function","title":"Bonfire.Social.Messages.LiveHandler.live_more/3","doc":"","ref":"Bonfire.Social.Messages.LiveHandler.html#live_more/3"},{"type":"function","title":"Bonfire.Social.Messages.LiveHandler.send_message/2","doc":"","ref":"Bonfire.Social.Messages.LiveHandler.html#send_message/2"},{"type":"macro","title":"Bonfire.Social.Messages.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Messages.LiveHandler.html#sigil_p/2"},{"type":"function","title":"Bonfire.Social.Messages.LiveHandler.threads_widget/3","doc":"","ref":"Bonfire.Social.Messages.LiveHandler.html#threads_widget/3"},{"type":"module","title":"Bonfire.Social.Objects","doc":"","ref":"Bonfire.Social.Objects.html"},{"type":"function","title":"Bonfire.Social.Objects.cast/4","doc":"Handles casting: Creator Caretaker Threaded replies (when present) Tags/Mentions (when present) Acls Activity","ref":"Bonfire.Social.Objects.html#cast/4"},{"type":"function","title":"Bonfire.Social.Objects.cast_acl/3","doc":"","ref":"Bonfire.Social.Objects.html#cast_acl/3"},{"type":"function","title":"Bonfire.Social.Objects.cast_basic/4","doc":"Handles casting: Creator Caretaker Acls","ref":"Bonfire.Social.Objects.html#cast_basic/4"},{"type":"function","title":"Bonfire.Social.Objects.cast_caretaker/2","doc":"","ref":"Bonfire.Social.Objects.html#cast_caretaker/2"},{"type":"function","title":"Bonfire.Social.Objects.cast_creator/2","doc":"","ref":"Bonfire.Social.Objects.html#cast_creator/2"},{"type":"function","title":"Bonfire.Social.Objects.cast_creator_caretaker/2","doc":"","ref":"Bonfire.Social.Objects.html#cast_creator_caretaker/2"},{"type":"function","title":"Bonfire.Social.Objects.cast_mini/4","doc":"Handles casting: Acls","ref":"Bonfire.Social.Objects.html#cast_mini/4"},{"type":"function","title":"Bonfire.Social.Objects.cast_publish/4","doc":"Handles casting: Acls Activity Feed Publishes","ref":"Bonfire.Social.Objects.html#cast_publish/4"},{"type":"function","title":"Bonfire.Social.Objects.changeset_named/2","doc":"","ref":"Bonfire.Social.Objects.html#changeset_named/2"},{"type":"function","title":"Bonfire.Social.Objects.delete/2","doc":"","ref":"Bonfire.Social.Objects.html#delete/2"},{"type":"function","title":"Bonfire.Social.Objects.delete_apply_error/2","doc":"","ref":"Bonfire.Social.Objects.html#delete_apply_error/2"},{"type":"function","title":"Bonfire.Social.Objects.do_delete/2","doc":"","ref":"Bonfire.Social.Objects.html#do_delete/2"},{"type":"function","title":"Bonfire.Social.Objects.list_query/2","doc":"","ref":"Bonfire.Social.Objects.html#list_query/2"},{"type":"function","title":"Bonfire.Social.Objects.maybe_generic_delete/3","doc":"","ref":"Bonfire.Social.Objects.html#maybe_generic_delete/3"},{"type":"function","title":"Bonfire.Social.Objects.maybe_preload_activity_object/2","doc":"","ref":"Bonfire.Social.Objects.html#maybe_preload_activity_object/2"},{"type":"function","title":"Bonfire.Social.Objects.object_creator/1","doc":"","ref":"Bonfire.Social.Objects.html#object_creator/1"},{"type":"function","title":"Bonfire.Social.Objects.preload_creator/1","doc":"","ref":"Bonfire.Social.Objects.html#preload_creator/1"},{"type":"function","title":"Bonfire.Social.Objects.preload_reply_creator/1","doc":"","ref":"Bonfire.Social.Objects.html#preload_reply_creator/1"},{"type":"function","title":"Bonfire.Social.Objects.publish/5","doc":"","ref":"Bonfire.Social.Objects.html#publish/5"},{"type":"function","title":"Bonfire.Social.Objects.query_base/1","doc":"Returns a basic query over undeleted pointable objects in the system, optionally limited to one or more types.","ref":"Bonfire.Social.Objects.html#query_base/1"},{"type":"function","title":"Bonfire.Social.Objects.read/2","doc":"","ref":"Bonfire.Social.Objects.html#read/2"},{"type":"function","title":"Bonfire.Social.Objects.reset_preset_boundary/5","doc":"","ref":"Bonfire.Social.Objects.html#reset_preset_boundary/5"},{"type":"function","title":"Bonfire.Social.Objects.run_epic/3","doc":"","ref":"Bonfire.Social.Objects.html#run_epic/3"},{"type":"function","title":"Bonfire.Social.Objects.set_boundaries/4","doc":"","ref":"Bonfire.Social.Objects.html#set_boundaries/4"},{"type":"function","title":"Bonfire.Social.Objects.set_name/3","doc":"","ref":"Bonfire.Social.Objects.html#set_name/3"},{"type":"module","title":"Bonfire.Social.Objects.LiveHandler","doc":"","ref":"Bonfire.Social.Objects.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Objects.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Objects.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Social.Objects.LiveHandler.init_object_assigns/5","doc":"","ref":"Bonfire.Social.Objects.LiveHandler.html#init_object_assigns/5"},{"type":"function","title":"Bonfire.Social.Objects.LiveHandler.load_object_assigns/1","doc":"","ref":"Bonfire.Social.Objects.LiveHandler.html#load_object_assigns/1"},{"type":"function","title":"Bonfire.Social.Objects.LiveHandler.load_object_assigns/2","doc":"","ref":"Bonfire.Social.Objects.LiveHandler.html#load_object_assigns/2"},{"type":"function","title":"Bonfire.Social.Objects.LiveHandler.not_found_fallback/3","doc":"","ref":"Bonfire.Social.Objects.LiveHandler.html#not_found_fallback/3"},{"type":"macro","title":"Bonfire.Social.Objects.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Objects.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Social.Pins","doc":"","ref":"Bonfire.Social.Pins.html"},{"type":"function","title":"Bonfire.Social.Pins.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Pins.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Pins.by_pinned/2","doc":"","ref":"Bonfire.Social.Pins.html#by_pinned/2"},{"type":"function","title":"Bonfire.Social.Pins.by_pinner/2","doc":"","ref":"Bonfire.Social.Pins.html#by_pinner/2"},{"type":"function","title":"Bonfire.Social.Pins.federation_module/0","doc":"","ref":"Bonfire.Social.Pins.html#federation_module/0"},{"type":"function","title":"Bonfire.Social.Pins.get/3","doc":"","ref":"Bonfire.Social.Pins.html#get/3"},{"type":"function","title":"Bonfire.Social.Pins.get!/3","doc":"","ref":"Bonfire.Social.Pins.html#get!/3"},{"type":"function","title":"Bonfire.Social.Pins.list_by/2","doc":"List pins by a user","ref":"Bonfire.Social.Pins.html#list_by/2"},{"type":"function","title":"Bonfire.Social.Pins.list_instance_pins/1","doc":"","ref":"Bonfire.Social.Pins.html#list_instance_pins/1"},{"type":"function","title":"Bonfire.Social.Pins.list_my/1","doc":"List the current user's pins","ref":"Bonfire.Social.Pins.html#list_my/1"},{"type":"function","title":"Bonfire.Social.Pins.list_of/2","doc":"List pinners of something(s)","ref":"Bonfire.Social.Pins.html#list_of/2"},{"type":"function","title":"Bonfire.Social.Pins.pin/3","doc":"","ref":"Bonfire.Social.Pins.html#pin/3"},{"type":"function","title":"Bonfire.Social.Pins.pinned?/2","doc":"","ref":"Bonfire.Social.Pins.html#pinned?/2"},{"type":"function","title":"Bonfire.Social.Pins.query/2","doc":"","ref":"Bonfire.Social.Pins.html#query/2"},{"type":"function","title":"Bonfire.Social.Pins.rank_pin/3","doc":"","ref":"Bonfire.Social.Pins.html#rank_pin/3"},{"type":"function","title":"Bonfire.Social.Pins.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Pins.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Pins.unpin/3","doc":"","ref":"Bonfire.Social.Pins.html#unpin/3"},{"type":"module","title":"Bonfire.Social.Pins.LiveHandler","doc":"","ref":"Bonfire.Social.Pins.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Pins.LiveHandler.do_pin/3","doc":"","ref":"Bonfire.Social.Pins.LiveHandler.html#do_pin/3"},{"type":"function","title":"Bonfire.Social.Pins.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Pins.LiveHandler.html#handle_event/3"},{"type":"macro","title":"Bonfire.Social.Pins.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Pins.LiveHandler.html#sigil_p/2"},{"type":"module","title":"Bonfire.Social.PostContents","doc":"Query and manipulate post contents","ref":"Bonfire.Social.PostContents.html"},{"type":"function","title":"Bonfire.Social.PostContents.all_text_content/1","doc":"","ref":"Bonfire.Social.PostContents.html#all_text_content/1"},{"type":"function","title":"Bonfire.Social.PostContents.cast/5","doc":"Given a changeset, post content attributes, creator, boundary and options, returns a changeset prepared with relevant attributes and associations","ref":"Bonfire.Social.PostContents.html#cast/5"},{"type":"function","title":"Bonfire.Social.PostContents.changeset/2","doc":"","ref":"Bonfire.Social.PostContents.html#changeset/2"},{"type":"function","title":"Bonfire.Social.PostContents.edit/3","doc":"","ref":"Bonfire.Social.PostContents.html#edit/3"},{"type":"function","title":"Bonfire.Social.PostContents.editor_output_content_type/1","doc":"","ref":"Bonfire.Social.PostContents.html#editor_output_content_type/1"},{"type":"function","title":"Bonfire.Social.PostContents.get/2","doc":"Given a post content ID, returns the corresponding post content","ref":"Bonfire.Social.PostContents.html#get/2"},{"type":"function","title":"Bonfire.Social.PostContents.get_versions/1","doc":"","ref":"Bonfire.Social.PostContents.html#get_versions/1"},{"type":"function","title":"Bonfire.Social.PostContents.indexing_object_format/1","doc":"","ref":"Bonfire.Social.PostContents.html#indexing_object_format/1"},{"type":"function","title":"Bonfire.Social.PostContents.maybe_detect_languages/2","doc":"","ref":"Bonfire.Social.PostContents.html#maybe_detect_languages/2"},{"type":"function","title":"Bonfire.Social.PostContents.maybe_prepare_contents/4","doc":"Given post content attributes, creator, boundary, and options, prepares the post contents for processing by detecting languages, mentions, hashtags, and urls.","ref":"Bonfire.Social.PostContents.html#maybe_prepare_contents/4"},{"type":"function","title":"Bonfire.Social.PostContents.merge_with_body_or_nil/2","doc":"","ref":"Bonfire.Social.PostContents.html#merge_with_body_or_nil/2"},{"type":"function","title":"Bonfire.Social.PostContents.no_known_output/2","doc":"","ref":"Bonfire.Social.PostContents.html#no_known_output/2"},{"type":"function","title":"Bonfire.Social.PostContents.one/2","doc":"Given a set of filters, returns a single post content matching those filters","ref":"Bonfire.Social.PostContents.html#one/2"},{"type":"function","title":"Bonfire.Social.PostContents.prepare_text/3","doc":"","ref":"Bonfire.Social.PostContents.html#prepare_text/3"},{"type":"function","title":"Bonfire.Social.PostContents.query/2","doc":"Given a set of filters, returns an Ecto.Query for matching post contents.","ref":"Bonfire.Social.PostContents.html#query/2"},{"type":"function","title":"Bonfire.Social.PostContents.query_base/0","doc":"","ref":"Bonfire.Social.PostContents.html#query_base/0"},{"type":"module","title":"Bonfire.Social.Posts","doc":"","ref":"Bonfire.Social.Posts.html"},{"type":"function","title":"Bonfire.Social.Posts.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Posts.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Posts.ap_receive_activity/4","doc":"record an incoming ActivityPub post","ref":"Bonfire.Social.Posts.html#ap_receive_activity/4"},{"type":"function","title":"Bonfire.Social.Posts.changeset/4","doc":"","ref":"Bonfire.Social.Posts.html#changeset/4"},{"type":"function","title":"Bonfire.Social.Posts.count_total/0","doc":"","ref":"Bonfire.Social.Posts.html#count_total/0"},{"type":"function","title":"Bonfire.Social.Posts.delete/2","doc":"You should call Objects.delete/2 instead","ref":"Bonfire.Social.Posts.html#delete/2"},{"type":"function","title":"Bonfire.Social.Posts.draft/2","doc":"","ref":"Bonfire.Social.Posts.html#draft/2"},{"type":"function","title":"Bonfire.Social.Posts.federation_module/0","doc":"","ref":"Bonfire.Social.Posts.html#federation_module/0"},{"type":"function","title":"Bonfire.Social.Posts.filter/3","doc":"","ref":"Bonfire.Social.Posts.html#filter/3"},{"type":"function","title":"Bonfire.Social.Posts.indexing_object_format/2","doc":"","ref":"Bonfire.Social.Posts.html#indexing_object_format/2"},{"type":"function","title":"Bonfire.Social.Posts.list_by/2","doc":"List posts created by the user and which are in their outbox, which are not replies","ref":"Bonfire.Social.Posts.html#list_by/2"},{"type":"function","title":"Bonfire.Social.Posts.list_paginated/2","doc":"List posts with pagination","ref":"Bonfire.Social.Posts.html#list_paginated/2"},{"type":"function","title":"Bonfire.Social.Posts.prepare_post_attrs/1","doc":"","ref":"Bonfire.Social.Posts.html#prepare_post_attrs/1"},{"type":"function","title":"Bonfire.Social.Posts.publish/1","doc":"","ref":"Bonfire.Social.Posts.html#publish/1"},{"type":"function","title":"Bonfire.Social.Posts.query/2","doc":"","ref":"Bonfire.Social.Posts.html#query/2"},{"type":"function","title":"Bonfire.Social.Posts.query_paginated/2","doc":"Query posts with pagination","ref":"Bonfire.Social.Posts.html#query_paginated/2"},{"type":"function","title":"Bonfire.Social.Posts.read/2","doc":"","ref":"Bonfire.Social.Posts.html#read/2"},{"type":"function","title":"Bonfire.Social.Posts.run_epic/3","doc":"","ref":"Bonfire.Social.Posts.html#run_epic/3"},{"type":"function","title":"Bonfire.Social.Posts.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Posts.html#schema_module/0"},{"type":"module","title":"Bonfire.Social.Posts.LiveHandler","doc":"","ref":"Bonfire.Social.Posts.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Posts.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Posts.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Social.Posts.LiveHandler.post_changeset/2","doc":"","ref":"Bonfire.Social.Posts.LiveHandler.html#post_changeset/2"},{"type":"macro","title":"Bonfire.Social.Posts.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Posts.LiveHandler.html#sigil_p/2"},{"type":"function","title":"Bonfire.Social.Posts.LiveHandler.write_feedback/2","doc":"","ref":"Bonfire.Social.Posts.LiveHandler.html#write_feedback/2"},{"type":"module","title":"Bonfire.Social.Requests","doc":"","ref":"Bonfire.Social.Requests.html"},{"type":"function","title":"Bonfire.Social.Requests.accept/2","doc":"Request someone/something, and federate it","ref":"Bonfire.Social.Requests.html#accept/2"},{"type":"function","title":"Bonfire.Social.Requests.all_by_object/3","doc":"","ref":"Bonfire.Social.Requests.html#all_by_object/3"},{"type":"function","title":"Bonfire.Social.Requests.all_by_subject/3","doc":"","ref":"Bonfire.Social.Requests.html#all_by_subject/3"},{"type":"function","title":"Bonfire.Social.Requests.all_objects_by_subject/3","doc":"","ref":"Bonfire.Social.Requests.html#all_objects_by_subject/3"},{"type":"function","title":"Bonfire.Social.Requests.all_requested_outboxes/3","doc":"","ref":"Bonfire.Social.Requests.html#all_requested_outboxes/3"},{"type":"function","title":"Bonfire.Social.Requests.all_subjects_by_object/3","doc":"","ref":"Bonfire.Social.Requests.html#all_subjects_by_object/3"},{"type":"function","title":"Bonfire.Social.Requests.ap_publish_activity/3","doc":"","ref":"Bonfire.Social.Requests.html#ap_publish_activity/3"},{"type":"function","title":"Bonfire.Social.Requests.exists?/4","doc":"","ref":"Bonfire.Social.Requests.html#exists?/4"},{"type":"function","title":"Bonfire.Social.Requests.get/2","doc":"","ref":"Bonfire.Social.Requests.html#get/2"},{"type":"function","title":"Bonfire.Social.Requests.get/4","doc":"","ref":"Bonfire.Social.Requests.html#get/4"},{"type":"function","title":"Bonfire.Social.Requests.get!/4","doc":"","ref":"Bonfire.Social.Requests.html#get!/4"},{"type":"function","title":"Bonfire.Social.Requests.ignore/2","doc":"","ref":"Bonfire.Social.Requests.html#ignore/2"},{"type":"function","title":"Bonfire.Social.Requests.list_my_requested/1","doc":"","ref":"Bonfire.Social.Requests.html#list_my_requested/1"},{"type":"function","title":"Bonfire.Social.Requests.list_my_requesters/1","doc":"","ref":"Bonfire.Social.Requests.html#list_my_requesters/1"},{"type":"function","title":"Bonfire.Social.Requests.list_requested/2","doc":"","ref":"Bonfire.Social.Requests.html#list_requested/2"},{"type":"function","title":"Bonfire.Social.Requests.list_requesters/2","doc":"","ref":"Bonfire.Social.Requests.html#list_requesters/2"},{"type":"function","title":"Bonfire.Social.Requests.many/2","doc":"","ref":"Bonfire.Social.Requests.html#many/2"},{"type":"function","title":"Bonfire.Social.Requests.query/3","doc":"","ref":"Bonfire.Social.Requests.html#query/3"},{"type":"function","title":"Bonfire.Social.Requests.request/4","doc":"Request someone/something, and federate it","ref":"Bonfire.Social.Requests.html#request/4"},{"type":"function","title":"Bonfire.Social.Requests.requested/2","doc":"","ref":"Bonfire.Social.Requests.html#requested/2"},{"type":"function","title":"Bonfire.Social.Requests.requested?/3","doc":"","ref":"Bonfire.Social.Requests.html#requested?/3"},{"type":"function","title":"Bonfire.Social.Requests.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Requests.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Requests.unrequest/3","doc":"","ref":"Bonfire.Social.Requests.html#unrequest/3"},{"type":"module","title":"Bonfire.Social.Seen","doc":"Track seen/unseen (similar to read/unread, but only indicates that it was displayed in a feed or other listing for the user, not that they actually read it) status of things (usually Activities )","ref":"Bonfire.Social.Seen.html"},{"type":"function","title":"Bonfire.Social.Seen.get/3","doc":"","ref":"Bonfire.Social.Seen.html#get/3"},{"type":"function","title":"Bonfire.Social.Seen.get!/3","doc":"","ref":"Bonfire.Social.Seen.html#get!/3"},{"type":"function","title":"Bonfire.Social.Seen.mark_seen/2","doc":"","ref":"Bonfire.Social.Seen.html#mark_seen/2"},{"type":"function","title":"Bonfire.Social.Seen.mark_unseen/2","doc":"","ref":"Bonfire.Social.Seen.html#mark_unseen/2"},{"type":"function","title":"Bonfire.Social.Seen.query/2","doc":"","ref":"Bonfire.Social.Seen.html#query/2"},{"type":"function","title":"Bonfire.Social.Seen.schema_module/0","doc":"Callback implementation for Bonfire.Common.ContextModule.schema_module/0 .","ref":"Bonfire.Social.Seen.html#schema_module/0"},{"type":"function","title":"Bonfire.Social.Seen.seen?/2","doc":"","ref":"Bonfire.Social.Seen.html#seen?/2"},{"type":"module","title":"Bonfire.Social.Tags","doc":"","ref":"Bonfire.Social.Tags.html"},{"type":"function","title":"Bonfire.Social.Tags.auto_boost/2","doc":"","ref":"Bonfire.Social.Tags.html#auto_boost/2"},{"type":"function","title":"Bonfire.Social.Tags.cast/4","doc":"","ref":"Bonfire.Social.Tags.html#cast/4"},{"type":"function","title":"Bonfire.Social.Tags.indexing_format_tags/1","doc":"","ref":"Bonfire.Social.Tags.html#indexing_format_tags/1"},{"type":"function","title":"Bonfire.Social.Tags.maybe_auto_boost/3","doc":"","ref":"Bonfire.Social.Tags.html#maybe_auto_boost/3"},{"type":"function","title":"Bonfire.Social.Tags.maybe_boostable_categories/2","doc":"","ref":"Bonfire.Social.Tags.html#maybe_boostable_categories/2"},{"type":"function","title":"Bonfire.Social.Tags.maybe_process/3","doc":"","ref":"Bonfire.Social.Tags.html#maybe_process/3"},{"type":"function","title":"Bonfire.Social.Tags.maybe_tag/4","doc":"","ref":"Bonfire.Social.Tags.html#maybe_tag/4"},{"type":"module","title":"Bonfire.Social.Threads","doc":"","ref":"Bonfire.Social.Threads.html"},{"type":"function","title":"Bonfire.Social.Threads.arrange_replies/1","doc":"","ref":"Bonfire.Social.Threads.html#arrange_replies/1"},{"type":"function","title":"Bonfire.Social.Threads.arrange_replies_tree/1","doc":"","ref":"Bonfire.Social.Threads.html#arrange_replies_tree/1"},{"type":"function","title":"Bonfire.Social.Threads.base_query/0","doc":"","ref":"Bonfire.Social.Threads.html#base_query/0"},{"type":"function","title":"Bonfire.Social.Threads.cast/4","doc":"Handles casting related to the reply and threading. If it's not a reply or the user is not permitted to reply to the thing, a new thread will be created.","ref":"Bonfire.Social.Threads.html#cast/4"},{"type":"function","title":"Bonfire.Social.Threads.changeset/2","doc":"","ref":"Bonfire.Social.Threads.html#changeset/2"},{"type":"function","title":"Bonfire.Social.Threads.count_participants/2","doc":"Count participants in a thread (depending on user's boundaries)","ref":"Bonfire.Social.Threads.html#count_participants/2"},{"type":"function","title":"Bonfire.Social.Threads.fetch_participants/2","doc":"List participants in a thread (depending on user's boundaries)","ref":"Bonfire.Social.Threads.html#fetch_participants/2"},{"type":"function","title":"Bonfire.Social.Threads.filter/3","doc":"Group per-thread","ref":"Bonfire.Social.Threads.html#filter/3"},{"type":"function","title":"Bonfire.Social.Threads.find_reply_to/2","doc":"Returns {:ok, reply} or {:error, reason} , where reason may be: :not_found - we could not find the object you are replying to. :not_permitted - you do not have permission to reply to this.","ref":"Bonfire.Social.Threads.html#find_reply_to/2"},{"type":"function","title":"Bonfire.Social.Threads.find_thread/2","doc":"","ref":"Bonfire.Social.Threads.html#find_thread/2"},{"type":"function","title":"Bonfire.Social.Threads.list_participants/3","doc":"List participants of an activity or thread (depending on user's boundaries)","ref":"Bonfire.Social.Threads.html#list_participants/3"},{"type":"function","title":"Bonfire.Social.Threads.list_replies/2","doc":"","ref":"Bonfire.Social.Threads.html#list_replies/2"},{"type":"function","title":"Bonfire.Social.Threads.maybe_re_order_result/2","doc":"re-order distinct threads after DISTINCT ON ordered them by thread_id - Note: does not support pagination","ref":"Bonfire.Social.Threads.html#maybe_re_order_result/2"},{"type":"function","title":"Bonfire.Social.Threads.query/2","doc":"","ref":"Bonfire.Social.Threads.html#query/2"},{"type":"function","title":"Bonfire.Social.Threads.re_order_using_subquery/2","doc":"re-order distinct threads after DISTINCT ON ordered them by thread_id - Note: this results in (Ecto.QueryError) cannot preload associations in subquery in query","ref":"Bonfire.Social.Threads.html#re_order_using_subquery/2"},{"type":"function","title":"Bonfire.Social.Threads.read/2","doc":"","ref":"Bonfire.Social.Threads.html#read/2"},{"type":"function","title":"Bonfire.Social.Threads.schema_module/0","doc":"Callback implementation for Bonfire.Common.QueryModule.schema_module/0 .","ref":"Bonfire.Social.Threads.html#schema_module/0"},{"type":"module","title":"Bonfire.Social.Threads.LiveHandler","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.handle_event/3","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#handle_event/3"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.handle_info/2","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#handle_info/2"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.handle_params/3","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#handle_params/3"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.insert_comments/3","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#insert_comments/3"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.live_more/3","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#live_more/3"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.load_thread/1","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#load_thread/1"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.load_thread_assigns/1","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#load_thread_assigns/1"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.load_thread_maybe_async/3","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#load_thread_maybe_async/3"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.max_depth/1","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#max_depth/1"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.maybe_subscribe/2","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#maybe_subscribe/2"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.reply/3","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#reply/3"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.send_thread_updates/4","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#send_thread_updates/4"},{"type":"macro","title":"Bonfire.Social.Threads.LiveHandler.sigil_p/2","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#sigil_p/2"},{"type":"function","title":"Bonfire.Social.Threads.LiveHandler.thread_init/1","doc":"","ref":"Bonfire.Social.Threads.LiveHandler.html#thread_init/1"},{"type":"module","title":"Bonfire.Tag","doc":"","ref":"Bonfire.Tag.html"},{"type":"function","title":"Bonfire.Tag.context_module/0","doc":"Callback implementation for Bonfire.Common.SchemaModule.context_module/0 .","ref":"Bonfire.Tag.html#context_module/0"},{"type":"function","title":"Bonfire.Tag.query_module/0","doc":"Callback implementation for Bonfire.Common.SchemaModule.query_module/0 .","ref":"Bonfire.Tag.html#query_module/0"},{"type":"function","title":"Bonfire.Tag.tag_things_changeset/2","doc":"Add things (Pointer objects) to a tag. You usually want to add tags to a thing instead, see thing_tags_changeset","ref":"Bonfire.Tag.html#tag_things_changeset/2"},{"type":"function","title":"Bonfire.Tag.thing_tags_changeset/2","doc":"Add tags to a thing (any Pointer object which defines a many_to_many relation to tag). This function applies to your object schema but is here for convenience.","ref":"Bonfire.Tag.html#thing_tags_changeset/2"},{"type":"module","title":"Bonfire.Tag.Autocomplete","doc":"","ref":"Bonfire.Tag.Autocomplete.html"},{"type":"function","title":"Bonfire.Tag.Autocomplete.api_tag_lookup/3","doc":"","ref":"Bonfire.Tag.Autocomplete.html#api_tag_lookup/3"},{"type":"function","title":"Bonfire.Tag.Autocomplete.api_tag_lookup_public/4","doc":"","ref":"Bonfire.Tag.Autocomplete.html#api_tag_lookup_public/4"},{"type":"function","title":"Bonfire.Tag.Autocomplete.filter_results/1","doc":"","ref":"Bonfire.Tag.Autocomplete.html#filter_results/1"},{"type":"function","title":"Bonfire.Tag.Autocomplete.find_all_tags/1","doc":"","ref":"Bonfire.Tag.Autocomplete.html#find_all_tags/1"},{"type":"function","title":"Bonfire.Tag.Autocomplete.maybe_find_tags/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#maybe_find_tags/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.maybe_search/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#maybe_search/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.prefix_index/1","doc":"","ref":"Bonfire.Tag.Autocomplete.html#prefix_index/1"},{"type":"function","title":"Bonfire.Tag.Autocomplete.search_or_lookup/3","doc":"","ref":"Bonfire.Tag.Autocomplete.html#search_or_lookup/3"},{"type":"function","title":"Bonfire.Tag.Autocomplete.search_prefix/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#search_prefix/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.search_type/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#search_type/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_add_field/4","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_add_field/4"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_hit_prepare/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_hit_prepare/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_hit_prepare/4","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_hit_prepare/4"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_lookup_process/4","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_lookup_process/4"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_lookup_public/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_lookup_public/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_search/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_search/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_search_from_tags/1","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_search_from_tags/1"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_search_from_text/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_search_from_text/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tag_suggestion_display/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tag_suggestion_display/2"},{"type":"function","title":"Bonfire.Tag.Autocomplete.tags_split/1","doc":"","ref":"Bonfire.Tag.Autocomplete.html#tags_split/1"},{"type":"function","title":"Bonfire.Tag.Autocomplete.try_all_prefixes/1","doc":"","ref":"Bonfire.Tag.Autocomplete.html#try_all_prefixes/1"},{"type":"function","title":"Bonfire.Tag.Autocomplete.try_prefixes/1","doc":"","ref":"Bonfire.Tag.Autocomplete.html#try_prefixes/1"},{"type":"function","title":"Bonfire.Tag.Autocomplete.try_tag_search/1","doc":"","ref":"Bonfire.Tag.Autocomplete.html#try_tag_search/1"},{"type":"function","title":"Bonfire.Tag.Autocomplete.try_tag_search/2","doc":"","ref":"Bonfire.Tag.Autocomplete.html#try_tag_search/2"},{"type":"module","title":"Bonfire.Tag.Hashtag","doc":"","ref":"Bonfire.Tag.Hashtag.html"},{"type":"function","title":"Bonfire.Tag.Hashtag.changeset/2","doc":"","ref":"Bonfire.Tag.Hashtag.html#changeset/2"},{"type":"function","title":"Bonfire.Tag.Hashtag.get_or_create_by_name/1","doc":"","ref":"Bonfire.Tag.Hashtag.html#get_or_create_by_name/1"},{"type":"function","title":"Bonfire.Tag.Hashtag.normalize_name/1","doc":"","ref":"Bonfire.Tag.Hashtag.html#normalize_name/1"},{"type":"module","title":"Bonfire.Tag.Queries","doc":"","ref":"Bonfire.Tag.Queries.html"},{"type":"function","title":"Bonfire.Tag.Queries.filter/2","doc":"Filter the query according to arbitrary criteria","ref":"Bonfire.Tag.Queries.html#filter/2"},{"type":"function","title":"Bonfire.Tag.Queries.join_to/3","doc":"","ref":"Bonfire.Tag.Queries.html#join_to/3"},{"type":"function","title":"Bonfire.Tag.Queries.list_trending/3","doc":"","ref":"Bonfire.Tag.Queries.html#list_trending/3"},{"type":"function","title":"Bonfire.Tag.Queries.queries/4","doc":"","ref":"Bonfire.Tag.Queries.html#queries/4"},{"type":"function","title":"Bonfire.Tag.Queries.query/1","doc":"","ref":"Bonfire.Tag.Queries.html#query/1"},{"type":"function","title":"Bonfire.Tag.Queries.query/2","doc":"","ref":"Bonfire.Tag.Queries.html#query/2"},{"type":"module","title":"Bonfire.Tag.Simulate","doc":"","ref":"Bonfire.Tag.Simulate.html"},{"type":"module","title":"Bonfire.Tag.Tagged","doc":"","ref":"Bonfire.Tag.Tagged.html"},{"type":"function","title":"Bonfire.Tag.Tagged.all/0","doc":"","ref":"Bonfire.Tag.Tagged.html#all/0"},{"type":"function","title":"Bonfire.Tag.Tagged.changeset/2","doc":"","ref":"Bonfire.Tag.Tagged.html#changeset/2"},{"type":"function","title":"Bonfire.Tag.Tagged.latest/1","doc":"Get the latest tag added to a thing","ref":"Bonfire.Tag.Tagged.html#latest/1"},{"type":"function","title":"Bonfire.Tag.Tagged.q_with_tag/1","doc":"List the things tagged with a certain tag","ref":"Bonfire.Tag.Tagged.html#q_with_tag/1"},{"type":"function","title":"Bonfire.Tag.Tagged.q_with_thing/1","doc":"List the tags of a thing","ref":"Bonfire.Tag.Tagged.html#q_with_thing/1"},{"type":"function","title":"Bonfire.Tag.Tagged.q_with_type/1","doc":"List by type of tagged thing","ref":"Bonfire.Tag.Tagged.html#q_with_type/1"},{"type":"function","title":"Bonfire.Tag.Tagged.with_tag/1","doc":"","ref":"Bonfire.Tag.Tagged.html#with_tag/1"},{"type":"function","title":"Bonfire.Tag.Tagged.with_thing/1","doc":"","ref":"Bonfire.Tag.Tagged.html#with_thing/1"},{"type":"function","title":"Bonfire.Tag.Tagged.with_type/1","doc":"","ref":"Bonfire.Tag.Tagged.html#with_type/1"},{"type":"module","title":"Bonfire.Tag.Tags","doc":"","ref":"Bonfire.Tag.Tags.html"},{"type":"function","title":"Bonfire.Tag.Tags.find/2","doc":"","ref":"Bonfire.Tag.Tags.html#find/2"},{"type":"function","title":"Bonfire.Tag.Tags.get/2","doc":"","ref":"Bonfire.Tag.Tags.html#get/2"},{"type":"function","title":"Bonfire.Tag.Tags.indexing_object_format/1","doc":"","ref":"Bonfire.Tag.Tags.html#indexing_object_format/1"},{"type":"function","title":"Bonfire.Tag.Tags.indexing_object_format_name/1","doc":"","ref":"Bonfire.Tag.Tags.html#indexing_object_format_name/1"},{"type":"function","title":"Bonfire.Tag.Tags.list_trending/2","doc":"","ref":"Bonfire.Tag.Tags.html#list_trending/2"},{"type":"function","title":"Bonfire.Tag.Tags.list_trending_reset/2","doc":"","ref":"Bonfire.Tag.Tags.html#list_trending_reset/2"},{"type":"function","title":"Bonfire.Tag.Tags.many/2","doc":"Retrieves a list of tags by arbitrary filters. Used by: Various parts of the codebase that need to query for tags (inc. tests)","ref":"Bonfire.Tag.Tags.html#many/2"},{"type":"function","title":"Bonfire.Tag.Tags.maybe_find_tag/3","doc":"Try to find one (best-match) tag","ref":"Bonfire.Tag.Tags.html#maybe_find_tag/3"},{"type":"function","title":"Bonfire.Tag.Tags.maybe_find_tags/3","doc":"Search / autocomplete for tags by name","ref":"Bonfire.Tag.Tags.html#maybe_find_tags/3"},{"type":"function","title":"Bonfire.Tag.Tags.maybe_lookup_tag/2","doc":"Lookup a single for a tag by its name/username","ref":"Bonfire.Tag.Tags.html#maybe_lookup_tag/2"},{"type":"function","title":"Bonfire.Tag.Tags.maybe_tag/4","doc":"Maybe tag something","ref":"Bonfire.Tag.Tags.html#maybe_tag/4"},{"type":"function","title":"Bonfire.Tag.Tags.maybe_taxonomy_tag/2","doc":"","ref":"Bonfire.Tag.Tags.html#maybe_taxonomy_tag/2"},{"type":"function","title":"Bonfire.Tag.Tags.one/2","doc":"Retrieves a single tag by arbitrary filters. Used by: GraphQL Item queries ActivityPub integration Various parts of the codebase that need to query for tags (inc. tests)","ref":"Bonfire.Tag.Tags.html#one/2"},{"type":"function","title":"Bonfire.Tag.Tags.tag_ids/1","doc":"","ref":"Bonfire.Tag.Tags.html#tag_ids/1"},{"type":"function","title":"Bonfire.Tag.Tags.tag_something/4","doc":"tag existing thing with one or multiple Tags, Pointers, or anything that can be made into a tag","ref":"Bonfire.Tag.Tags.html#tag_something/4"},{"type":"module","title":"Bonfire.Tag.TextContent.Formatter","doc":"","ref":"Bonfire.Tag.TextContent.Formatter.html"},{"type":"function","title":"Bonfire.Tag.TextContent.Formatter.escape_mention_handler/4","doc":"","ref":"Bonfire.Tag.TextContent.Formatter.html#escape_mention_handler/4"},{"type":"function","title":"Bonfire.Tag.TextContent.Formatter.linkify/2","doc":"Parses a text and replace plain text links with HTML. Returns a tuple with a result text, mentions, and hashtags. If the 'safe_mention' option is given, only consecutive mentions at the start the post are actually mentioned.","ref":"Bonfire.Tag.TextContent.Formatter.html#linkify/2"},{"type":"function","title":"Bonfire.Tag.TextContent.Formatter.nothing_handler/3","doc":"","ref":"Bonfire.Tag.TextContent.Formatter.html#nothing_handler/3"},{"type":"function","title":"Bonfire.Tag.TextContent.Formatter.tag_handler/4","doc":"","ref":"Bonfire.Tag.TextContent.Formatter.html#tag_handler/4"},{"type":"function","title":"Bonfire.Tag.TextContent.Formatter.url_handler/3","doc":"","ref":"Bonfire.Tag.TextContent.Formatter.html#url_handler/3"},{"type":"module","title":"Bonfire.Tag.TextContent.Process","doc":"","ref":"Bonfire.Tag.TextContent.Process.html"},{"type":"function","title":"Bonfire.Tag.TextContent.Process.html_escape/2","doc":"","ref":"Bonfire.Tag.TextContent.Process.html#html_escape/2"},{"type":"function","title":"Bonfire.Tag.TextContent.Process.process/3","doc":"For use for things like a bio, where we want links but not to actually trigger mentions.","ref":"Bonfire.Tag.TextContent.Process.html#process/3"},{"type":"module","title":"Bonfire.Tag.Web.Routes","doc":"","ref":"Bonfire.Tag.Web.Routes.html"},{"type":"function","title":"Bonfire.Tag.Web.Routes.declare_routes/0","doc":"","ref":"Bonfire.Tag.Web.Routes.html#declare_routes/0"},{"type":"module","title":"Bonfire.Tags.Acts.AutoBoost","doc":"","ref":"Bonfire.Tags.Acts.AutoBoost.html"},{"type":"function","title":"Bonfire.Tags.Acts.AutoBoost.run/2","doc":"","ref":"Bonfire.Tags.Acts.AutoBoost.html#run/2"},{"type":"module","title":"Bonfire.Tags.Acts.Tag","doc":"","ref":"Bonfire.Tags.Acts.Tag.html"},{"type":"function","title":"Bonfire.Tags.Acts.Tag.run/2","doc":"","ref":"Bonfire.Tags.Acts.Tag.html#run/2"},{"type":"module","title":"Bonfire.Telemetry.Storage","doc":"","ref":"Bonfire.Telemetry.Storage.html"},{"type":"function","title":"Bonfire.Telemetry.Storage.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Bonfire.Telemetry.Storage.html#child_spec/1"},{"type":"function","title":"Bonfire.Telemetry.Storage.handle_event/4","doc":"","ref":"Bonfire.Telemetry.Storage.html#handle_event/4"},{"type":"function","title":"Bonfire.Telemetry.Storage.metrics_history/1","doc":"","ref":"Bonfire.Telemetry.Storage.html#metrics_history/1"},{"type":"function","title":"Bonfire.Telemetry.Storage.start_link/1","doc":"","ref":"Bonfire.Telemetry.Storage.html#start_link/1"},{"type":"module","title":"ActivityPub","doc":"Entrypoint to the ActivityPub API for processing incoming and outgoing federated objects (normalising, saving the the Object storage, passing them to the adapter, and queueing outgoing activities to be pushed out). In general, the functions in this module take object-like map. That includes a struct as the input for actor parameters. Use the functions in the ActivityPub.Actor module ( ActivityPub.Actor.get_cached/1 for example) to retrieve those.","ref":"ActivityPub.html"},{"type":"function","title":"ActivityPub.accept/1","doc":"Generates and federates an Accept activity via the data passed through params .","ref":"ActivityPub.html#accept/1"},{"type":"function","title":"ActivityPub.accept_activity/1","doc":"","ref":"ActivityPub.html#accept_activity/1"},{"type":"function","title":"ActivityPub.announce/1","doc":"","ref":"ActivityPub.html#announce/1"},{"type":"function","title":"ActivityPub.block/1","doc":"","ref":"ActivityPub.html#block/1"},{"type":"function","title":"ActivityPub.create/1","doc":"Generates and federates a Create activity via the data passed through params .","ref":"ActivityPub.html#create/1"},{"type":"function","title":"ActivityPub.delete/3","doc":"","ref":"ActivityPub.html#delete/3"},{"type":"function","title":"ActivityPub.flag/1","doc":"","ref":"ActivityPub.html#flag/1"},{"type":"function","title":"ActivityPub.follow/1","doc":"Generates and federates a Follow activity. Note: the follow should be reflected as a Follow on the host database side only after receiving an Accept activity in response (though you could register it as a Request if your app has that concept)","ref":"ActivityPub.html#follow/1"},{"type":"function","title":"ActivityPub.like/1","doc":"Record a Like","ref":"ActivityPub.html#like/1"},{"type":"function","title":"ActivityPub.move/4","doc":"","ref":"ActivityPub.html#move/4"},{"type":"function","title":"ActivityPub.reject/1","doc":"Generates and federates a Reject activity via the data passed through params .","ref":"ActivityPub.html#reject/1"},{"type":"function","title":"ActivityPub.unannounce/1","doc":"","ref":"ActivityPub.html#unannounce/1"},{"type":"function","title":"ActivityPub.unblock/1","doc":"","ref":"ActivityPub.html#unblock/1"},{"type":"function","title":"ActivityPub.unfollow/1","doc":"Generates and federates an Unfollow activity.","ref":"ActivityPub.html#unfollow/1"},{"type":"function","title":"ActivityPub.unlike/1","doc":"","ref":"ActivityPub.html#unlike/1"},{"type":"function","title":"ActivityPub.update/1","doc":"","ref":"ActivityPub.html#update/1"},{"type":"module","title":"ActivityPub.Actor","doc":"An ActivityPub Actor type and functions for dealing with actors.","ref":"ActivityPub.Actor.html"},{"type":"function","title":"ActivityPub.Actor.actor?/1","doc":"","ref":"ActivityPub.Actor.html#actor?/1"},{"type":"function","title":"ActivityPub.Actor.actor_url/1","doc":"","ref":"ActivityPub.Actor.html#actor_url/1"},{"type":"function","title":"ActivityPub.Actor.check_actor_is_active/1","doc":"","ref":"ActivityPub.Actor.html#check_actor_is_active/1"},{"type":"function","title":"ActivityPub.Actor.deactivate/1","doc":"","ref":"ActivityPub.Actor.html#deactivate/1"},{"type":"function","title":"ActivityPub.Actor.delete/1","doc":"","ref":"ActivityPub.Actor.html#delete/1"},{"type":"function","title":"ActivityPub.Actor.fetch_by_username/2","doc":"Fetches a remote actor by username in username@domain.tld format","ref":"ActivityPub.Actor.html#fetch_by_username/2"},{"type":"function","title":"ActivityPub.Actor.format_remote_actor/1","doc":"","ref":"ActivityPub.Actor.html#format_remote_actor/1"},{"type":"function","title":"ActivityPub.Actor.format_username/1","doc":"","ref":"ActivityPub.Actor.html#format_username/1"},{"type":"function","title":"ActivityPub.Actor.format_username/2","doc":"","ref":"ActivityPub.Actor.html#format_username/2"},{"type":"function","title":"ActivityPub.Actor.get_cached/1","doc":"","ref":"ActivityPub.Actor.html#get_cached/1"},{"type":"function","title":"ActivityPub.Actor.get_cached!/1","doc":"","ref":"ActivityPub.Actor.html#get_cached!/1"},{"type":"function","title":"ActivityPub.Actor.get_external_followers/1","doc":"","ref":"ActivityPub.Actor.html#get_external_followers/1"},{"type":"function","title":"ActivityPub.Actor.get_followers/1","doc":"","ref":"ActivityPub.Actor.html#get_followers/1"},{"type":"function","title":"ActivityPub.Actor.get_followings/1","doc":"","ref":"ActivityPub.Actor.html#get_followings/1"},{"type":"function","title":"ActivityPub.Actor.get_or_fetch/1","doc":"","ref":"ActivityPub.Actor.html#get_or_fetch/1"},{"type":"function","title":"ActivityPub.Actor.get_or_fetch_by_ap_id/2","doc":"","ref":"ActivityPub.Actor.html#get_or_fetch_by_ap_id/2"},{"type":"function","title":"ActivityPub.Actor.get_or_fetch_by_username/2","doc":"Tries to get a local actor by username or tries to fetch it remotely if username is provided in username@domain.tld format.","ref":"ActivityPub.Actor.html#get_or_fetch_by_username/2"},{"type":"function","title":"ActivityPub.Actor.get_public_key_for_ap_id/1","doc":"Fetches the public key for given actor AP ID.","ref":"ActivityPub.Actor.html#get_public_key_for_ap_id/1"},{"type":"function","title":"ActivityPub.Actor.get_remote_actor/2","doc":"","ref":"ActivityPub.Actor.html#get_remote_actor/2"},{"type":"function","title":"ActivityPub.Actor.invalidate_cache/1","doc":"","ref":"ActivityPub.Actor.html#invalidate_cache/1"},{"type":"function","title":"ActivityPub.Actor.maybe_create_actor_from_object/1","doc":"","ref":"ActivityPub.Actor.html#maybe_create_actor_from_object/1"},{"type":"function","title":"ActivityPub.Actor.reactivate/1","doc":"","ref":"ActivityPub.Actor.html#reactivate/1"},{"type":"function","title":"ActivityPub.Actor.set_cache/1","doc":"","ref":"ActivityPub.Actor.html#set_cache/1"},{"type":"function","title":"ActivityPub.Actor.update_actor/1","doc":"Updates an existing actor struct by its AP ID.","ref":"ActivityPub.Actor.html#update_actor/1"},{"type":"function","title":"ActivityPub.Actor.update_actor/2","doc":"","ref":"ActivityPub.Actor.html#update_actor/2"},{"type":"type","title":"ActivityPub.Actor.t/0","doc":"","ref":"ActivityPub.Actor.html#t:t/0"},{"type":"module","title":"ActivityPub.Config","doc":"","ref":"ActivityPub.Config.html"},{"type":"function","title":"ActivityPub.Config.actors_and_collections/0","doc":"","ref":"ActivityPub.Config.html#actors_and_collections/0"},{"type":"function","title":"ActivityPub.Config.collection_types/0","doc":"","ref":"ActivityPub.Config.html#collection_types/0"},{"type":"function","title":"ActivityPub.Config.delete/1","doc":"","ref":"ActivityPub.Config.html#delete/1"},{"type":"function","title":"ActivityPub.Config.env/0","doc":"","ref":"ActivityPub.Config.html#env/0"},{"type":"function","title":"ActivityPub.Config.federating?/0","doc":"","ref":"ActivityPub.Config.html#federating?/0"},{"type":"function","title":"ActivityPub.Config.get/1","doc":"","ref":"ActivityPub.Config.html#get/1"},{"type":"function","title":"ActivityPub.Config.get/2","doc":"","ref":"ActivityPub.Config.html#get/2"},{"type":"function","title":"ActivityPub.Config.get!/1","doc":"","ref":"ActivityPub.Config.html#get!/1"},{"type":"macro","title":"ActivityPub.Config.is_in/2","doc":"For matching against the above list in guards TODO: use runtime config","ref":"ActivityPub.Config.html#is_in/2"},{"type":"function","title":"ActivityPub.Config.public_uri/0","doc":"","ref":"ActivityPub.Config.html#public_uri/0"},{"type":"function","title":"ActivityPub.Config.public_uris/0","doc":"","ref":"ActivityPub.Config.html#public_uris/0"},{"type":"function","title":"ActivityPub.Config.put/2","doc":"","ref":"ActivityPub.Config.html#put/2"},{"type":"function","title":"ActivityPub.Config.supported_activity_types/0","doc":"","ref":"ActivityPub.Config.html#supported_activity_types/0"},{"type":"function","title":"ActivityPub.Config.supported_actor_types/0","doc":"","ref":"ActivityPub.Config.html#supported_actor_types/0"},{"type":"exception","title":"ActivityPub.Config.Error","doc":"","ref":"ActivityPub.Config.Error.html"},{"type":"module","title":"ActivityPub.Federator","doc":"","ref":"ActivityPub.Federator.html"},{"type":"function","title":"ActivityPub.Federator.incoming_ap_doc/1","doc":"","ref":"ActivityPub.Federator.html#incoming_ap_doc/1"},{"type":"function","title":"ActivityPub.Federator.perform/2","doc":"","ref":"ActivityPub.Federator.html#perform/2"},{"type":"function","title":"ActivityPub.Federator.perform/3","doc":"","ref":"ActivityPub.Federator.html#perform/3"},{"type":"function","title":"ActivityPub.Federator.publish/1","doc":"","ref":"ActivityPub.Federator.html#publish/1"},{"type":"module","title":"ActivityPub.Federator.APPublisher","doc":"","ref":"ActivityPub.Federator.APPublisher.html"},{"type":"function","title":"ActivityPub.Federator.APPublisher.determine_inbox/4","doc":"Determine a user inbox to use based on heuristics. These heuristics are based on an approximation of the sharedInbox rules in the ActivityPub specification .","ref":"ActivityPub.Federator.APPublisher.html#determine_inbox/4"},{"type":"function","title":"ActivityPub.Federator.APPublisher.gather_webfinger_links/1","doc":"Callback implementation for ActivityPub.Federator.Publisher.gather_webfinger_links/1 .","ref":"ActivityPub.Federator.APPublisher.html#gather_webfinger_links/1"},{"type":"function","title":"ActivityPub.Federator.APPublisher.is_representable?/1","doc":"Callback implementation for ActivityPub.Federator.Publisher.is_representable?/1 .","ref":"ActivityPub.Federator.APPublisher.html#is_representable?/1"},{"type":"function","title":"ActivityPub.Federator.APPublisher.maybe_federate_to_search_index/2","doc":"If you put the URL of the shared inbox of an ActivityPub instance in the following env variable, all public content will be pushed there via AP federation for search indexing purposes: PUSH_ALL_PUBLIC_CONTENT_TO_INSTANCE #TODO: move to adapter","ref":"ActivityPub.Federator.APPublisher.html#maybe_federate_to_search_index/2"},{"type":"function","title":"ActivityPub.Federator.APPublisher.publish/2","doc":"Callback implementation for ActivityPub.Federator.Publisher.publish/2 .","ref":"ActivityPub.Federator.APPublisher.html#publish/2"},{"type":"function","title":"ActivityPub.Federator.APPublisher.publish_one/1","doc":"Publish a single message to a peer. Takes a struct with the following parameters set: inbox : the inbox to publish to json : the JSON message body representing the ActivityPub message actor : the actor which is signing the message id : the ActivityStreams URI of the message","ref":"ActivityPub.Federator.APPublisher.html#publish_one/1"},{"type":"behaviour","title":"ActivityPub.Federator.Adapter","doc":"Contract for ActivityPub module adapters","ref":"ActivityPub.Federator.Adapter.html"},{"type":"function","title":"ActivityPub.Federator.Adapter.adapter/0","doc":"","ref":"ActivityPub.Federator.Adapter.html#adapter/0"},{"type":"function","title":"ActivityPub.Federator.Adapter.base_url/0","doc":"","ref":"ActivityPub.Federator.Adapter.html#base_url/0"},{"type":"callback","title":"ActivityPub.Federator.Adapter.base_url/0","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:base_url/0"},{"type":"function","title":"ActivityPub.Federator.Adapter.call_or/3","doc":"Run function from adapter if defined, otherwise return fallback value","ref":"ActivityPub.Federator.Adapter.html#call_or/3"},{"type":"function","title":"ActivityPub.Federator.Adapter.external_followers_for_activity/2","doc":"","ref":"ActivityPub.Federator.Adapter.html#external_followers_for_activity/2"},{"type":"callback","title":"ActivityPub.Federator.Adapter.external_followers_for_activity/2","doc":"Compute and return a subset of followers that should receive a specific activity","ref":"ActivityPub.Federator.Adapter.html#c:external_followers_for_activity/2"},{"type":"function","title":"ActivityPub.Federator.Adapter.get_actor_by_ap_id/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#get_actor_by_ap_id/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.get_actor_by_ap_id/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:get_actor_by_ap_id/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.get_actor_by_id/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#get_actor_by_id/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.get_actor_by_id/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:get_actor_by_id/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.get_actor_by_username/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#get_actor_by_username/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.get_actor_by_username/1","doc":"Fetch an actor given its preferred username","ref":"ActivityPub.Federator.Adapter.html#c:get_actor_by_username/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.get_follower_local_ids/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#get_follower_local_ids/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.get_follower_local_ids/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:get_follower_local_ids/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.get_following_local_ids/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#get_following_local_ids/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.get_following_local_ids/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:get_following_local_ids/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.get_or_create_service_actor_by_username/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#get_or_create_service_actor_by_username/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.get_or_create_service_actor_by_username/1","doc":"Creates an internal service actor by username, if missing.","ref":"ActivityPub.Federator.Adapter.html#c:get_or_create_service_actor_by_username/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.get_redirect_url/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#get_redirect_url/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.get_redirect_url/1","doc":"Gets local url of an AP object to redirect in browser. Can take pointer id or an actor username.","ref":"ActivityPub.Federator.Adapter.html#c:get_redirect_url/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.handle_activity/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#handle_activity/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.handle_activity/1","doc":"Passes data to be handled by the host application","ref":"ActivityPub.Federator.Adapter.html#c:handle_activity/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.maybe_create_remote_actor/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#maybe_create_remote_actor/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.maybe_create_remote_actor/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:maybe_create_remote_actor/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.maybe_handle_activity/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#maybe_handle_activity/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.maybe_publish_object/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#maybe_publish_object/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.maybe_publish_object/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:maybe_publish_object/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.update_local_actor/2","doc":"","ref":"ActivityPub.Federator.Adapter.html#update_local_actor/2"},{"type":"callback","title":"ActivityPub.Federator.Adapter.update_local_actor/2","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:update_local_actor/2"},{"type":"function","title":"ActivityPub.Federator.Adapter.update_remote_actor/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#update_remote_actor/1"},{"type":"callback","title":"ActivityPub.Federator.Adapter.update_remote_actor/1","doc":"","ref":"ActivityPub.Federator.Adapter.html#c:update_remote_actor/1"},{"type":"function","title":"ActivityPub.Federator.Adapter.update_remote_actor/2","doc":"","ref":"ActivityPub.Federator.Adapter.html#update_remote_actor/2"},{"type":"module","title":"ActivityPub.Federator.Fetcher","doc":"Handles fetching AS2 objects from remote instances.","ref":"ActivityPub.Federator.Fetcher.html"},{"type":"function","title":"ActivityPub.Federator.Fetcher.allowed_recursion?/2","doc":"Returns true if the distance to target object does not exceed max configured value. Serves to prevent fetching of very long threads, especially useful on smaller instances. Addresses memory leaks on recursive replies fetching. Applies to fetching of both ancestor (reply-to) and child (reply) objects.","ref":"ActivityPub.Federator.Fetcher.html#allowed_recursion?/2"},{"type":"function","title":"ActivityPub.Federator.Fetcher.fetch_collection/2","doc":"","ref":"ActivityPub.Federator.Fetcher.html#fetch_collection/2"},{"type":"function","title":"ActivityPub.Federator.Fetcher.fetch_fresh_object_from_id/2","doc":"","ref":"ActivityPub.Federator.Fetcher.html#fetch_fresh_object_from_id/2"},{"type":"function","title":"ActivityPub.Federator.Fetcher.fetch_object_from_id/2","doc":"Checks if an object exists in the AP and Adapter databases and fetches and creates it if not.","ref":"ActivityPub.Federator.Fetcher.html#fetch_object_from_id/2"},{"type":"function","title":"ActivityPub.Federator.Fetcher.fetch_objects_from_id/2","doc":"","ref":"ActivityPub.Federator.Fetcher.html#fetch_objects_from_id/2"},{"type":"function","title":"ActivityPub.Federator.Fetcher.fetch_remote_object_from_id/2","doc":"Fetches an AS2 object from remote AP ID.","ref":"ActivityPub.Federator.Fetcher.html#fetch_remote_object_from_id/2"},{"type":"function","title":"ActivityPub.Federator.Fetcher.get_cached_object_or_fetch_ap_id/2","doc":"Checks if an object exists in the AP database and fetches it if not (but does not send to Adapter).","ref":"ActivityPub.Federator.Fetcher.html#get_cached_object_or_fetch_ap_id/2"},{"type":"function","title":"ActivityPub.Federator.Fetcher.get_cached_object_or_fetch_pointer_id/2","doc":"Checks if an object exists in the AP database and prepares it if not (local objects only).","ref":"ActivityPub.Federator.Fetcher.html#get_cached_object_or_fetch_pointer_id/2"},{"type":"function","title":"ActivityPub.Federator.Fetcher.maybe_fetch_async/2","doc":"","ref":"ActivityPub.Federator.Fetcher.html#maybe_fetch_async/2"},{"type":"module","title":"ActivityPub.Federator.HTTP","doc":"Module for building and performing HTTP requests.","ref":"ActivityPub.Federator.HTTP.html"},{"type":"function","title":"ActivityPub.Federator.HTTP.delete/4","doc":"Makes a DELETE request see ActivityPub.Federator.HTTP.request/5","ref":"ActivityPub.Federator.HTTP.html#delete/4"},{"type":"function","title":"ActivityPub.Federator.HTTP.get/3","doc":"Makes a GET request see ActivityPub.Federator.HTTP.request/5","ref":"ActivityPub.Federator.HTTP.html#get/3"},{"type":"function","title":"ActivityPub.Federator.HTTP.post/4","doc":"Makes a POST request see ActivityPub.Federator.HTTP.request/5","ref":"ActivityPub.Federator.HTTP.html#post/4"},{"type":"function","title":"ActivityPub.Federator.HTTP.put/4","doc":"Makes a PUT request see ActivityPub.Federator.HTTP.request/5","ref":"ActivityPub.Federator.HTTP.html#put/4"},{"type":"function","title":"ActivityPub.Federator.HTTP.request/5","doc":"Builds and perform http request. Arguments: method - :get, :post, :put, :delete url body headers - a keyworld list of headers, e.g. [{&quot;content-type&quot;, &quot;text/plain&quot;}] options - custom, per-request middleware or adapter options Returns: {:ok, %Tesla.Env{}} or {:error, error}","ref":"ActivityPub.Federator.HTTP.html#request/5"},{"type":"type","title":"ActivityPub.Federator.HTTP.t/0","doc":"","ref":"ActivityPub.Federator.HTTP.html#t:t/0"},{"type":"module","title":"ActivityPub.Federator.HTTP.Connection","doc":"Specifies connection options for HTTP requests","ref":"ActivityPub.Federator.HTTP.Connection.html"},{"type":"function","title":"ActivityPub.Federator.HTTP.Connection.adapter_options/2","doc":"","ref":"ActivityPub.Federator.HTTP.Connection.html#adapter_options/2"},{"type":"function","title":"ActivityPub.Federator.HTTP.Connection.new/1","doc":"","ref":"ActivityPub.Federator.HTTP.Connection.html#new/1"},{"type":"module","title":"ActivityPub.Federator.HTTP.RequestBuilder","doc":"Helper functions for building HTTP requests","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html"},{"type":"function","title":"ActivityPub.Federator.HTTP.RequestBuilder.add_param/4","doc":"","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#add_param/4"},{"type":"function","title":"ActivityPub.Federator.HTTP.RequestBuilder.headers/2","doc":"","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#headers/2"},{"type":"function","title":"ActivityPub.Federator.HTTP.RequestBuilder.method/2","doc":"","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#method/2"},{"type":"function","title":"ActivityPub.Federator.HTTP.RequestBuilder.opts/2","doc":"","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#opts/2"},{"type":"function","title":"ActivityPub.Federator.HTTP.RequestBuilder.url/2","doc":"","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#url/2"},{"type":"behaviour","title":"ActivityPub.Federator.Publisher","doc":"Defines the contract used by federation implementations to publish messages to their peers. TODO: why not use APPublisher directly instead?","ref":"ActivityPub.Federator.Publisher.html"},{"type":"function","title":"ActivityPub.Federator.Publisher.enqueue_one/2","doc":"Enqueue publishing a single activity.","ref":"ActivityPub.Federator.Publisher.html#enqueue_one/2"},{"type":"function","title":"ActivityPub.Federator.Publisher.gather_webfinger_links/1","doc":"","ref":"ActivityPub.Federator.Publisher.html#gather_webfinger_links/1"},{"type":"callback","title":"ActivityPub.Federator.Publisher.gather_webfinger_links/1","doc":"Gathers links used by an outgoing federation module for WebFinger output.","ref":"ActivityPub.Federator.Publisher.html#c:gather_webfinger_links/1"},{"type":"callback","title":"ActivityPub.Federator.Publisher.is_representable?/1","doc":"Determine whether an activity can be relayed using the federation module.","ref":"ActivityPub.Federator.Publisher.html#c:is_representable?/1"},{"type":"function","title":"ActivityPub.Federator.Publisher.publish/2","doc":"","ref":"ActivityPub.Federator.Publisher.html#publish/2"},{"type":"callback","title":"ActivityPub.Federator.Publisher.publish/2","doc":"Relays an activity to all specified peers.","ref":"ActivityPub.Federator.Publisher.html#c:publish/2"},{"type":"callback","title":"ActivityPub.Federator.Publisher.publish_one/1","doc":"Relays an activity to a specified peer, determined by the parameters. The parameters used are controlled by the federation module.","ref":"ActivityPub.Federator.Publisher.html#c:publish_one/1"},{"type":"module","title":"ActivityPub.Federator.Transformer","doc":"This module normalises outgoing data to conform with AS2/AP specs and handles incoming objects and activities","ref":"ActivityPub.Federator.Transformer.html"},{"type":"function","title":"ActivityPub.Federator.Transformer.add_emoji_tags/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#add_emoji_tags/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.determine_explicit_mentions/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#determine_explicit_mentions/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_actor/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_actor/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_addressing/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_addressing/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_addressing_list/2","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_addressing_list/2"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_attachments/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_attachments/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_content_map/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_content_map/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_context/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_context/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_emoji/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_emoji/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_explicit_addressing/2","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_explicit_addressing/2"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_in_reply_to/2","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_in_reply_to/2"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_object/2","doc":"Modifies an incoming AP object (mastodon format) to our internal format.","ref":"ActivityPub.Federator.Transformer.html#fix_object/2"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_quote_url/2","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_quote_url/2"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_summary/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_summary/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_tag/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_tag/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.fix_url/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#fix_url/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.handle_incoming/1","doc":"Handles incoming data, inserts it into the database and triggers side effects if the data is a supported activity type.","ref":"ActivityPub.Federator.Transformer.html#handle_incoming/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.maybe_handle_other_activity/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#maybe_handle_other_activity/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.maybe_handle_other_object/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#maybe_handle_other_object/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.prepare_outgoing/1","doc":"Translates MN Entity to an AP compatible format","ref":"ActivityPub.Federator.Transformer.html#prepare_outgoing/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.preserve_privacy_of_outgoing/2","doc":"","ref":"ActivityPub.Federator.Transformer.html#preserve_privacy_of_outgoing/2"},{"type":"function","title":"ActivityPub.Federator.Transformer.replies/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#replies/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.set_replies/1","doc":"Serialized Mastodon-compatible replies collection containing self-replies . Based on Mastodon's ActivityPub::NoteSerializer#replies.","ref":"ActivityPub.Federator.Transformer.html#set_replies/1"},{"type":"function","title":"ActivityPub.Federator.Transformer.take_emoji_tags/1","doc":"","ref":"ActivityPub.Federator.Transformer.html#take_emoji_tags/1"},{"type":"module","title":"ActivityPub.Federator.WebFinger","doc":"Serves and fetches data (mainly actor URI) necessary for federation when only the username and host is known.","ref":"ActivityPub.Federator.WebFinger.html"},{"type":"function","title":"ActivityPub.Federator.WebFinger.base_url/1","doc":"","ref":"ActivityPub.Federator.WebFinger.html#base_url/1"},{"type":"function","title":"ActivityPub.Federator.WebFinger.finger/1","doc":"Fetches webfinger data for an account given in &quot;@username@domain.tld&quot; format.","ref":"ActivityPub.Federator.WebFinger.html#finger/1"},{"type":"function","title":"ActivityPub.Federator.WebFinger.output/1","doc":"Serves a webfinger response for the requested username.","ref":"ActivityPub.Federator.WebFinger.html#output/1"},{"type":"function","title":"ActivityPub.Federator.WebFinger.represent_user/1","doc":"Formats gathered data into a JRD format.","ref":"ActivityPub.Federator.WebFinger.html#represent_user/1"},{"type":"function","title":"ActivityPub.Federator.WebFinger.webfinger_from_json/1","doc":"","ref":"ActivityPub.Federator.WebFinger.html#webfinger_from_json/1"},{"type":"module","title":"ActivityPub.Federator.Worker","doc":"Helpers for workers to use","ref":"ActivityPub.Federator.Worker.html"},{"type":"function","title":"ActivityPub.Federator.Worker.worker_args/1","doc":"","ref":"ActivityPub.Federator.Worker.html#worker_args/1"},{"type":"module","title":"ActivityPub.Federator.Workers.PublisherWorker","doc":"","ref":"ActivityPub.Federator.Workers.PublisherWorker.html"},{"type":"function","title":"ActivityPub.Federator.Workers.PublisherWorker.enqueue/3","doc":"","ref":"ActivityPub.Federator.Workers.PublisherWorker.html#enqueue/3"},{"type":"function","title":"ActivityPub.Federator.Workers.PublisherWorker.enqueueable/3","doc":"","ref":"ActivityPub.Federator.Workers.PublisherWorker.html#enqueueable/3"},{"type":"module","title":"ActivityPub.Federator.Workers.ReceiverWorker","doc":"","ref":"ActivityPub.Federator.Workers.ReceiverWorker.html"},{"type":"function","title":"ActivityPub.Federator.Workers.ReceiverWorker.enqueue/3","doc":"","ref":"ActivityPub.Federator.Workers.ReceiverWorker.html#enqueue/3"},{"type":"function","title":"ActivityPub.Federator.Workers.ReceiverWorker.enqueueable/3","doc":"","ref":"ActivityPub.Federator.Workers.ReceiverWorker.html#enqueueable/3"},{"type":"module","title":"ActivityPub.Federator.Workers.RemoteFetcherWorker","doc":"","ref":"ActivityPub.Federator.Workers.RemoteFetcherWorker.html"},{"type":"function","title":"ActivityPub.Federator.Workers.RemoteFetcherWorker.enqueue/3","doc":"","ref":"ActivityPub.Federator.Workers.RemoteFetcherWorker.html#enqueue/3"},{"type":"function","title":"ActivityPub.Federator.Workers.RemoteFetcherWorker.enqueueable/3","doc":"","ref":"ActivityPub.Federator.Workers.RemoteFetcherWorker.html#enqueueable/3"},{"type":"module","title":"ActivityPub.Fixtures","doc":"","ref":"ActivityPub.Fixtures.html"},{"type":"function","title":"ActivityPub.Fixtures.file/1","doc":"","ref":"ActivityPub.Fixtures.html#file/1"},{"type":"function","title":"ActivityPub.Fixtures.fixtures/0","doc":"","ref":"ActivityPub.Fixtures.html#fixtures/0"},{"type":"function","title":"ActivityPub.Fixtures.fixtures_generic/0","doc":"","ref":"ActivityPub.Fixtures.html#fixtures_generic/0"},{"type":"function","title":"ActivityPub.Fixtures.fixtures_get/0","doc":"","ref":"ActivityPub.Fixtures.html#fixtures_get/0"},{"type":"function","title":"ActivityPub.Fixtures.get/4","doc":"","ref":"ActivityPub.Fixtures.html#get/4"},{"type":"function","title":"ActivityPub.Fixtures.head/4","doc":"","ref":"ActivityPub.Fixtures.html#head/4"},{"type":"function","title":"ActivityPub.Fixtures.insert/1","doc":"","ref":"ActivityPub.Fixtures.html#insert/1"},{"type":"function","title":"ActivityPub.Fixtures.insert_all/0","doc":"","ref":"ActivityPub.Fixtures.html#insert_all/0"},{"type":"function","title":"ActivityPub.Fixtures.maybe_get_local/4","doc":"","ref":"ActivityPub.Fixtures.html#maybe_get_local/4"},{"type":"function","title":"ActivityPub.Fixtures.mock_global/1","doc":"","ref":"ActivityPub.Fixtures.html#mock_global/1"},{"type":"function","title":"ActivityPub.Fixtures.mock_prepare/0","doc":"","ref":"ActivityPub.Fixtures.html#mock_prepare/0"},{"type":"function","title":"ActivityPub.Fixtures.post/4","doc":"","ref":"ActivityPub.Fixtures.html#post/4"},{"type":"function","title":"ActivityPub.Fixtures.request/1","doc":"","ref":"ActivityPub.Fixtures.html#request/1"},{"type":"module","title":"ActivityPub.Instances","doc":"Instances context.","ref":"ActivityPub.Instances.html"},{"type":"function","title":"ActivityPub.Instances.filter_reachable/1","doc":"See ActivityPub.Instances.Instance.filter_reachable/1 .","ref":"ActivityPub.Instances.html#filter_reachable/1"},{"type":"function","title":"ActivityPub.Instances.host/1","doc":"","ref":"ActivityPub.Instances.html#host/1"},{"type":"function","title":"ActivityPub.Instances.reachability_datetime_threshold/0","doc":"","ref":"ActivityPub.Instances.html#reachability_datetime_threshold/0"},{"type":"function","title":"ActivityPub.Instances.reachable?/1","doc":"See ActivityPub.Instances.Instance.reachable?/1 .","ref":"ActivityPub.Instances.html#reachable?/1"},{"type":"function","title":"ActivityPub.Instances.set_consistently_unreachable/1","doc":"","ref":"ActivityPub.Instances.html#set_consistently_unreachable/1"},{"type":"function","title":"ActivityPub.Instances.set_reachable/1","doc":"See ActivityPub.Instances.Instance.set_reachable/1 .","ref":"ActivityPub.Instances.html#set_reachable/1"},{"type":"function","title":"ActivityPub.Instances.set_unreachable/2","doc":"See ActivityPub.Instances.Instance.set_unreachable/2 .","ref":"ActivityPub.Instances.html#set_unreachable/2"},{"type":"module","title":"ActivityPub.Instances.Instance","doc":"Instance.","ref":"ActivityPub.Instances.Instance.html"},{"type":"function","title":"ActivityPub.Instances.Instance.changeset/2","doc":"","ref":"ActivityPub.Instances.Instance.html#changeset/2"},{"type":"function","title":"ActivityPub.Instances.Instance.filter_reachable/1","doc":"","ref":"ActivityPub.Instances.Instance.html#filter_reachable/1"},{"type":"function","title":"ActivityPub.Instances.Instance.host/1","doc":"See ActivityPub.Instances.host/1 .","ref":"ActivityPub.Instances.Instance.html#host/1"},{"type":"function","title":"ActivityPub.Instances.Instance.reachable?/1","doc":"","ref":"ActivityPub.Instances.Instance.html#reachable?/1"},{"type":"function","title":"ActivityPub.Instances.Instance.set_reachable/1","doc":"","ref":"ActivityPub.Instances.Instance.html#set_reachable/1"},{"type":"function","title":"ActivityPub.Instances.Instance.set_unreachable/2","doc":"","ref":"ActivityPub.Instances.Instance.html#set_unreachable/2"},{"type":"behaviour","title":"ActivityPub.MRF","doc":"","ref":"ActivityPub.MRF.html"},{"type":"function","title":"ActivityPub.MRF.filter/2","doc":"","ref":"ActivityPub.MRF.html#filter/2"},{"type":"callback","title":"ActivityPub.MRF.filter/2","doc":"","ref":"ActivityPub.MRF.html#c:filter/2"},{"type":"function","title":"ActivityPub.MRF.filter/3","doc":"","ref":"ActivityPub.MRF.html#filter/3"},{"type":"function","title":"ActivityPub.MRF.get_policies/0","doc":"","ref":"ActivityPub.MRF.html#get_policies/0"},{"type":"function","title":"ActivityPub.MRF.subdomain_match?/2","doc":"","ref":"ActivityPub.MRF.html#subdomain_match?/2"},{"type":"function","title":"ActivityPub.MRF.subdomains_regex/1","doc":"","ref":"ActivityPub.MRF.html#subdomains_regex/1"},{"type":"module","title":"ActivityPub.MRF.SimplePolicy","doc":"Filter activities depending on their origin instance","ref":"ActivityPub.MRF.SimplePolicy.html"},{"type":"function","title":"ActivityPub.MRF.SimplePolicy.check_reject/2","doc":"","ref":"ActivityPub.MRF.SimplePolicy.html#check_reject/2"},{"type":"module","title":"ActivityPub.Object","doc":"","ref":"ActivityPub.Object.html"},{"type":"function","title":"ActivityPub.Object.actor_from_data/1","doc":"","ref":"ActivityPub.Object.html#actor_from_data/1"},{"type":"function","title":"ActivityPub.Object.actor_id_from_data/1","doc":"","ref":"ActivityPub.Object.html#actor_id_from_data/1"},{"type":"function","title":"ActivityPub.Object.changeset/1","doc":"","ref":"ActivityPub.Object.html#changeset/1"},{"type":"function","title":"ActivityPub.Object.changeset/2","doc":"","ref":"ActivityPub.Object.html#changeset/2"},{"type":"function","title":"ActivityPub.Object.delete/1","doc":"","ref":"ActivityPub.Object.html#delete/1"},{"type":"function","title":"ActivityPub.Object.do_insert/1","doc":"","ref":"ActivityPub.Object.html#do_insert/1"},{"type":"function","title":"ActivityPub.Object.do_update_existing/2","doc":"","ref":"ActivityPub.Object.html#do_update_existing/2"},{"type":"function","title":"ActivityPub.Object.fetch_latest_block/2","doc":"","ref":"ActivityPub.Object.html#fetch_latest_block/2"},{"type":"function","title":"ActivityPub.Object.fetch_latest_follow/2","doc":"","ref":"ActivityPub.Object.html#fetch_latest_follow/2"},{"type":"function","title":"ActivityPub.Object.get_activity_for_object_ap_id/1","doc":"","ref":"ActivityPub.Object.html#get_activity_for_object_ap_id/1"},{"type":"function","title":"ActivityPub.Object.get_activity_for_object_ap_id/2","doc":"","ref":"ActivityPub.Object.html#get_activity_for_object_ap_id/2"},{"type":"function","title":"ActivityPub.Object.get_ap_id/1","doc":"","ref":"ActivityPub.Object.html#get_ap_id/1"},{"type":"function","title":"ActivityPub.Object.get_cached/1","doc":"","ref":"ActivityPub.Object.html#get_cached/1"},{"type":"function","title":"ActivityPub.Object.get_cached!/1","doc":"","ref":"ActivityPub.Object.html#get_cached!/1"},{"type":"function","title":"ActivityPub.Object.get_existing_announce/2","doc":"Retruns an existing announce activity if the notice has already been announced","ref":"ActivityPub.Object.html#get_existing_announce/2"},{"type":"function","title":"ActivityPub.Object.get_existing_like/2","doc":"Returns an existing like if a user already liked an object","ref":"ActivityPub.Object.html#get_existing_like/2"},{"type":"function","title":"ActivityPub.Object.get_follow_activity/2","doc":"","ref":"ActivityPub.Object.html#get_follow_activity/2"},{"type":"function","title":"ActivityPub.Object.get_outbox_for_actor/2","doc":"","ref":"ActivityPub.Object.html#get_outbox_for_actor/2"},{"type":"function","title":"ActivityPub.Object.get_outbox_for_instance/0","doc":"","ref":"ActivityPub.Object.html#get_outbox_for_instance/0"},{"type":"function","title":"ActivityPub.Object.get_uncached/1","doc":"","ref":"ActivityPub.Object.html#get_uncached/1"},{"type":"function","title":"ActivityPub.Object.hard_delete/1","doc":"","ref":"ActivityPub.Object.html#hard_delete/1"},{"type":"function","title":"ActivityPub.Object.hashtags/1","doc":"","ref":"ActivityPub.Object.html#hashtags/1"},{"type":"function","title":"ActivityPub.Object.invalidate_cache/1","doc":"","ref":"ActivityPub.Object.html#invalidate_cache/1"},{"type":"function","title":"ActivityPub.Object.make_tombstone/2","doc":"","ref":"ActivityPub.Object.html#make_tombstone/2"},{"type":"function","title":"ActivityPub.Object.maybe_fetch/2","doc":"","ref":"ActivityPub.Object.html#maybe_fetch/2"},{"type":"function","title":"ActivityPub.Object.maybe_upsert/3","doc":"","ref":"ActivityPub.Object.html#maybe_upsert/3"},{"type":"function","title":"ActivityPub.Object.normalize/3","doc":"","ref":"ActivityPub.Object.html#normalize/3"},{"type":"function","title":"ActivityPub.Object.normalize_actors/1","doc":"","ref":"ActivityPub.Object.html#normalize_actors/1"},{"type":"function","title":"ActivityPub.Object.normalize_params/3","doc":"","ref":"ActivityPub.Object.html#normalize_params/3"},{"type":"function","title":"ActivityPub.Object.object_url/1","doc":"","ref":"ActivityPub.Object.html#object_url/1"},{"type":"function","title":"ActivityPub.Object.prepare_data/4","doc":"Prepares a struct to be inserted into the objects table","ref":"ActivityPub.Object.html#prepare_data/4"},{"type":"function","title":"ActivityPub.Object.purge_cache/0","doc":"","ref":"ActivityPub.Object.html#purge_cache/0"},{"type":"function","title":"ActivityPub.Object.self_replies_ids/2","doc":"","ref":"ActivityPub.Object.html#self_replies_ids/2"},{"type":"function","title":"ActivityPub.Object.set_cache/1","doc":"","ref":"ActivityPub.Object.html#set_cache/1"},{"type":"function","title":"ActivityPub.Object.swap_object_with_tombstone/1","doc":"","ref":"ActivityPub.Object.html#swap_object_with_tombstone/1"},{"type":"function","title":"ActivityPub.Object.update_and_set_cache/1","doc":"","ref":"ActivityPub.Object.html#update_and_set_cache/1"},{"type":"function","title":"ActivityPub.Object.update_existing/2","doc":"","ref":"ActivityPub.Object.html#update_existing/2"},{"type":"function","title":"ActivityPub.Object.update_state/3","doc":"Updates a follow activity's state (for locked accounts).","ref":"ActivityPub.Object.html#update_state/3"},{"type":"type","title":"ActivityPub.Object.t/0","doc":"","ref":"ActivityPub.Object.html#t:t/0"},{"type":"module","title":"ActivityPub.Pruner","doc":"Prunes objects from the database.","ref":"ActivityPub.Pruner.html"},{"type":"function","title":"ActivityPub.Pruner.prune_all/0","doc":"","ref":"ActivityPub.Pruner.html#prune_all/0"},{"type":"function","title":"ActivityPub.Pruner.prune_deletes/0","doc":"","ref":"ActivityPub.Pruner.html#prune_deletes/0"},{"type":"function","title":"ActivityPub.Pruner.prune_objects/1","doc":"","ref":"ActivityPub.Pruner.html#prune_objects/1"},{"type":"function","title":"ActivityPub.Pruner.prune_removes/0","doc":"","ref":"ActivityPub.Pruner.html#prune_removes/0"},{"type":"function","title":"ActivityPub.Pruner.prune_stale_follow_requests/0","doc":"","ref":"ActivityPub.Pruner.html#prune_stale_follow_requests/0"},{"type":"function","title":"ActivityPub.Pruner.prune_tombstones/0","doc":"","ref":"ActivityPub.Pruner.html#prune_tombstones/0"},{"type":"function","title":"ActivityPub.Pruner.prune_undos/0","doc":"","ref":"ActivityPub.Pruner.html#prune_undos/0"},{"type":"function","title":"ActivityPub.Pruner.remove_embedded_objects/0","doc":"","ref":"ActivityPub.Pruner.html#remove_embedded_objects/0"},{"type":"module","title":"ActivityPub.Pruner.PruneDatabaseWorker","doc":"The worker to prune old data from the database.","ref":"ActivityPub.Pruner.PruneDatabaseWorker.html"},{"type":"module","title":"ActivityPub.Queries","doc":"Contains queries for Object.","ref":"ActivityPub.Queries.html"},{"type":"function","title":"ActivityPub.Queries.activity_by_object_ap_id/2","doc":"","ref":"ActivityPub.Queries.html#activity_by_object_ap_id/2"},{"type":"function","title":"ActivityPub.Queries.by_actor/2","doc":"","ref":"ActivityPub.Queries.html#by_actor/2"},{"type":"function","title":"ActivityPub.Queries.by_ap_id/2","doc":"","ref":"ActivityPub.Queries.html#by_ap_id/2"},{"type":"function","title":"ActivityPub.Queries.by_id/2","doc":"","ref":"ActivityPub.Queries.html#by_id/2"},{"type":"function","title":"ActivityPub.Queries.by_object_id/2","doc":"","ref":"ActivityPub.Queries.html#by_object_id/2"},{"type":"function","title":"ActivityPub.Queries.by_object_in_reply_to_id/3","doc":"","ref":"ActivityPub.Queries.html#by_object_in_reply_to_id/3"},{"type":"function","title":"ActivityPub.Queries.by_type/2","doc":"","ref":"ActivityPub.Queries.html#by_type/2"},{"type":"function","title":"ActivityPub.Queries.exclude_type/2","doc":"","ref":"ActivityPub.Queries.html#exclude_type/2"},{"type":"function","title":"ActivityPub.Queries.find_by_object_ap_id/2","doc":"","ref":"ActivityPub.Queries.html#find_by_object_ap_id/2"},{"type":"function","title":"ActivityPub.Queries.last_follow/2","doc":"","ref":"ActivityPub.Queries.html#last_follow/2"},{"type":"function","title":"ActivityPub.Queries.replies/2","doc":"","ref":"ActivityPub.Queries.html#replies/2"},{"type":"function","title":"ActivityPub.Queries.self_replies/1","doc":"","ref":"ActivityPub.Queries.html#self_replies/1"},{"type":"function","title":"ActivityPub.Queries.with_joined_activity/3","doc":"","ref":"ActivityPub.Queries.html#with_joined_activity/3"},{"type":"function","title":"ActivityPub.Queries.with_joined_object/2","doc":"","ref":"ActivityPub.Queries.html#with_joined_object/2"},{"type":"function","title":"ActivityPub.Queries.with_preloaded_object/2","doc":"","ref":"ActivityPub.Queries.html#with_preloaded_object/2"},{"type":"type","title":"ActivityPub.Queries.query/0","doc":"","ref":"ActivityPub.Queries.html#t:query/0"},{"type":"module","title":"ActivityPub.Safety.Containment","doc":"This module contains some useful functions for containing objects to specific origins and determining those origins. They previously lived in the ActivityPub Transformer module. Object containment is an important step in validating remote objects to prevent spoofing, therefore removal of object containment functions is NOT recommended.","ref":"ActivityPub.Safety.Containment.html"},{"type":"function","title":"ActivityPub.Safety.Containment.contain_child/1","doc":"","ref":"ActivityPub.Safety.Containment.html#contain_child/1"},{"type":"function","title":"ActivityPub.Safety.Containment.contain_origin/2","doc":"Checks that an imported AP object's actor matches the host it came from.","ref":"ActivityPub.Safety.Containment.html#contain_origin/2"},{"type":"function","title":"ActivityPub.Safety.Containment.contain_origin_from_id/2","doc":"","ref":"ActivityPub.Safety.Containment.html#contain_origin_from_id/2"},{"type":"function","title":"ActivityPub.Safety.Containment.contain_uri/2","doc":"","ref":"ActivityPub.Safety.Containment.html#contain_uri/2"},{"type":"function","title":"ActivityPub.Safety.Containment.get_object/1","doc":"","ref":"ActivityPub.Safety.Containment.html#get_object/1"},{"type":"function","title":"ActivityPub.Safety.Containment.is_public?/1","doc":"","ref":"ActivityPub.Safety.Containment.html#is_public?/1"},{"type":"function","title":"ActivityPub.Safety.Containment.restrict_unauthenticated_access?/1","doc":"","ref":"ActivityPub.Safety.Containment.html#restrict_unauthenticated_access?/1"},{"type":"function","title":"ActivityPub.Safety.Containment.restrict_unauthenticated_access?/2","doc":"","ref":"ActivityPub.Safety.Containment.html#restrict_unauthenticated_access?/2"},{"type":"function","title":"ActivityPub.Safety.Containment.visible_for_user?/2","doc":"","ref":"ActivityPub.Safety.Containment.html#visible_for_user?/2"},{"type":"module","title":"ActivityPub.Safety.Keys","doc":"Handles RSA keys and HTTP signatures","ref":"ActivityPub.Safety.Keys.html"},{"type":"function","title":"ActivityPub.Safety.Keys.add_public_key/1","doc":"","ref":"ActivityPub.Safety.Keys.html#add_public_key/1"},{"type":"function","title":"ActivityPub.Safety.Keys.cast_uri/1","doc":"","ref":"ActivityPub.Safety.Keys.html#cast_uri/1"},{"type":"function","title":"ActivityPub.Safety.Keys.ensure_keys_present/1","doc":"Checks if an actor struct has a non-nil keys field and generates a PEM if it doesn't.","ref":"ActivityPub.Safety.Keys.html#ensure_keys_present/1"},{"type":"function","title":"ActivityPub.Safety.Keys.fetch_public_key/1","doc":"Callback implementation for HTTPSignatures.Adapter.fetch_public_key/1 .","ref":"ActivityPub.Safety.Keys.html#fetch_public_key/1"},{"type":"function","title":"ActivityPub.Safety.Keys.generate_rsa_pem/0","doc":"","ref":"ActivityPub.Safety.Keys.html#generate_rsa_pem/0"},{"type":"function","title":"ActivityPub.Safety.Keys.key_id_to_actor_id/1","doc":"","ref":"ActivityPub.Safety.Keys.html#key_id_to_actor_id/1"},{"type":"function","title":"ActivityPub.Safety.Keys.keypair_from_pem/1","doc":"","ref":"ActivityPub.Safety.Keys.html#keypair_from_pem/1"},{"type":"function","title":"ActivityPub.Safety.Keys.maybe_add_sign_headers/3","doc":"","ref":"ActivityPub.Safety.Keys.html#maybe_add_sign_headers/3"},{"type":"function","title":"ActivityPub.Safety.Keys.refetch_public_key/1","doc":"Callback implementation for HTTPSignatures.Adapter.refetch_public_key/1 .","ref":"ActivityPub.Safety.Keys.html#refetch_public_key/1"},{"type":"function","title":"ActivityPub.Safety.Keys.sign/2","doc":"","ref":"ActivityPub.Safety.Keys.html#sign/2"},{"type":"function","title":"ActivityPub.Safety.Keys.signed_date/0","doc":"","ref":"ActivityPub.Safety.Keys.html#signed_date/0"},{"type":"function","title":"ActivityPub.Safety.Keys.signed_date/1","doc":"","ref":"ActivityPub.Safety.Keys.html#signed_date/1"},{"type":"module","title":"ActivityPub.Utils","doc":"Misc functions used for federation","ref":"ActivityPub.Utils.html"},{"type":"function","title":"ActivityPub.Utils.activitypub_object_headers/0","doc":"","ref":"ActivityPub.Utils.html#activitypub_object_headers/0"},{"type":"function","title":"ActivityPub.Utils.adapter_fallback/0","doc":"","ref":"ActivityPub.Utils.html#adapter_fallback/0"},{"type":"function","title":"ActivityPub.Utils.ap_base_url/0","doc":"","ref":"ActivityPub.Utils.html#ap_base_url/0"},{"type":"function","title":"ActivityPub.Utils.as_local_public/0","doc":"","ref":"ActivityPub.Utils.html#as_local_public/0"},{"type":"function","title":"ActivityPub.Utils.cachex_fetch/4","doc":"","ref":"ActivityPub.Utils.html#cachex_fetch/4"},{"type":"function","title":"ActivityPub.Utils.error_json/3","doc":"","ref":"ActivityPub.Utils.html#error_json/3"},{"type":"function","title":"ActivityPub.Utils.generate_id/1","doc":"","ref":"ActivityPub.Utils.html#generate_id/1"},{"type":"function","title":"ActivityPub.Utils.generate_object_id/0","doc":"","ref":"ActivityPub.Utils.html#generate_object_id/0"},{"type":"function","title":"ActivityPub.Utils.get_with_cache/4","doc":"","ref":"ActivityPub.Utils.html#get_with_cache/4"},{"type":"function","title":"ActivityPub.Utils.is_ulid?/1","doc":"","ref":"ActivityPub.Utils.html#is_ulid?/1"},{"type":"function","title":"ActivityPub.Utils.is_uuid?/1","doc":"Takes a string and returns true if it is a valid UUID (Universally Unique Identifier)","ref":"ActivityPub.Utils.html#is_uuid?/1"},{"type":"function","title":"ActivityPub.Utils.json_with_cache/4","doc":"","ref":"ActivityPub.Utils.html#json_with_cache/4"},{"type":"function","title":"ActivityPub.Utils.label_in_message?/2","doc":"","ref":"ActivityPub.Utils.html#label_in_message?/2"},{"type":"function","title":"ActivityPub.Utils.make_date/0","doc":"","ref":"ActivityPub.Utils.html#make_date/0"},{"type":"function","title":"ActivityPub.Utils.make_json_ld_header/0","doc":"","ref":"ActivityPub.Utils.html#make_json_ld_header/0"},{"type":"function","title":"ActivityPub.Utils.maybe_put/3","doc":"conditionally update a map","ref":"ActivityPub.Utils.html#maybe_put/3"},{"type":"function","title":"ActivityPub.Utils.maybe_to_atom/1","doc":"","ref":"ActivityPub.Utils.html#maybe_to_atom/1"},{"type":"function","title":"ActivityPub.Utils.ok_unwrap/2","doc":"","ref":"ActivityPub.Utils.html#ok_unwrap/2"},{"type":"function","title":"ActivityPub.Utils.public?/1","doc":"","ref":"ActivityPub.Utils.html#public?/1"},{"type":"function","title":"ActivityPub.Utils.public?/2","doc":"Determines if an object or an activity is public.","ref":"ActivityPub.Utils.html#public?/2"},{"type":"function","title":"ActivityPub.Utils.put_if_present/4","doc":"","ref":"ActivityPub.Utils.html#put_if_present/4"},{"type":"function","title":"ActivityPub.Utils.repo/0","doc":"","ref":"ActivityPub.Utils.html#repo/0"},{"type":"function","title":"ActivityPub.Utils.request_ip/1","doc":"","ref":"ActivityPub.Utils.html#request_ip/1"},{"type":"function","title":"ActivityPub.Utils.safe_put_in/3","doc":"","ref":"ActivityPub.Utils.html#safe_put_in/3"},{"type":"function","title":"ActivityPub.Utils.service_actor/0","doc":"","ref":"ActivityPub.Utils.html#service_actor/0"},{"type":"function","title":"ActivityPub.Utils.set_repo/1","doc":"","ref":"ActivityPub.Utils.html#set_repo/1"},{"type":"function","title":"ActivityPub.Utils.single_ap_id/1","doc":"","ref":"ActivityPub.Utils.html#single_ap_id/1"},{"type":"function","title":"ActivityPub.Utils.single_ap_id_or_object/1","doc":"","ref":"ActivityPub.Utils.html#single_ap_id_or_object/1"},{"type":"function","title":"ActivityPub.Utils.ulid/1","doc":"","ref":"ActivityPub.Utils.html#ulid/1"},{"type":"module","title":"ActivityPub.Web","doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on. This can be used in your application as: use ActivityPub.Web , :controller use ActivityPub.Web , :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"ActivityPub.Web.html"},{"type":"macro","title":"ActivityPub.Web.__using__/1","doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"ActivityPub.Web.html#__using__/1"},{"type":"function","title":"ActivityPub.Web.base_url/0","doc":"","ref":"ActivityPub.Web.html#base_url/0"},{"type":"function","title":"ActivityPub.Web.channel/0","doc":"","ref":"ActivityPub.Web.html#channel/0"},{"type":"function","title":"ActivityPub.Web.controller/0","doc":"","ref":"ActivityPub.Web.html#controller/0"},{"type":"function","title":"ActivityPub.Web.router/0","doc":"","ref":"ActivityPub.Web.html#router/0"},{"type":"function","title":"ActivityPub.Web.view/0","doc":"","ref":"ActivityPub.Web.html#view/0"},{"type":"module","title":"ActivityPub.Web.ActivityPubController","doc":"Endpoints for serving objects and collections, so the ActivityPub API can be used to read information from the server. Even though we store the data in AS format, some changes need to be applied to the entity before serving it in the AP REST response. This is done in ActivityPub.Web.ActivityPubView .","ref":"ActivityPub.Web.ActivityPubController.html"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.actor/2","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#actor/2"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.ap_route_helper/1","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#ap_route_helper/1"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.followers/2","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#followers/2"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.following/2","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#following/2"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.inbox/2","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#inbox/2"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.json_object_with_cache/2","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#json_object_with_cache/2"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.noop/2","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#noop/2"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.object/2","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#object/2"},{"type":"function","title":"ActivityPub.Web.ActivityPubController.outbox/2","doc":"","ref":"ActivityPub.Web.ActivityPubController.html#outbox/2"},{"type":"module","title":"ActivityPub.Web.ActorView","doc":"","ref":"ActivityPub.Web.ActorView.html"},{"type":"function","title":"ActivityPub.Web.ActorView.actor_json/1","doc":"","ref":"ActivityPub.Web.ActorView.html#actor_json/1"},{"type":"function","title":"ActivityPub.Web.ActorView.collection/4","doc":"","ref":"ActivityPub.Web.ActorView.html#collection/4"},{"type":"function","title":"ActivityPub.Web.ActorView.render/2","doc":"","ref":"ActivityPub.Web.ActorView.html#render/2"},{"type":"module","title":"ActivityPub.Web.Endpoint","doc":"","ref":"ActivityPub.Web.Endpoint.html"},{"type":"function","title":"ActivityPub.Web.Endpoint.broadcast/3","doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"ActivityPub.Web.Endpoint.html#broadcast/3"},{"type":"function","title":"ActivityPub.Web.Endpoint.broadcast!/3","doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"ActivityPub.Web.Endpoint.html#broadcast!/3"},{"type":"function","title":"ActivityPub.Web.Endpoint.broadcast_from/4","doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"ActivityPub.Web.Endpoint.html#broadcast_from/4"},{"type":"function","title":"ActivityPub.Web.Endpoint.broadcast_from!/4","doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"ActivityPub.Web.Endpoint.html#broadcast_from!/4"},{"type":"function","title":"ActivityPub.Web.Endpoint.call/2","doc":"Callback implementation for Plug.call/2 .","ref":"ActivityPub.Web.Endpoint.html#call/2"},{"type":"function","title":"ActivityPub.Web.Endpoint.child_spec/1","doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"ActivityPub.Web.Endpoint.html#child_spec/1"},{"type":"function","title":"ActivityPub.Web.Endpoint.config/2","doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"ActivityPub.Web.Endpoint.html#config/2"},{"type":"function","title":"ActivityPub.Web.Endpoint.config_change/2","doc":"Reloads the configuration given the application environment changes.","ref":"ActivityPub.Web.Endpoint.html#config_change/2"},{"type":"function","title":"ActivityPub.Web.Endpoint.host/0","doc":"Returns the host for the given endpoint.","ref":"ActivityPub.Web.Endpoint.html#host/0"},{"type":"function","title":"ActivityPub.Web.Endpoint.init/1","doc":"Callback implementation for Plug.init/1 .","ref":"ActivityPub.Web.Endpoint.html#init/1"},{"type":"function","title":"ActivityPub.Web.Endpoint.local_broadcast/3","doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"ActivityPub.Web.Endpoint.html#local_broadcast/3"},{"type":"function","title":"ActivityPub.Web.Endpoint.local_broadcast_from/4","doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"ActivityPub.Web.Endpoint.html#local_broadcast_from/4"},{"type":"function","title":"ActivityPub.Web.Endpoint.path/1","doc":"Generates the path information when routing to this endpoint.","ref":"ActivityPub.Web.Endpoint.html#path/1"},{"type":"function","title":"ActivityPub.Web.Endpoint.script_name/0","doc":"Generates the script name.","ref":"ActivityPub.Web.Endpoint.html#script_name/0"},{"type":"function","title":"ActivityPub.Web.Endpoint.start_link/1","doc":"Starts the endpoint supervision tree. All other options are merged into the endpoint configuration.","ref":"ActivityPub.Web.Endpoint.html#start_link/1"},{"type":"function","title":"ActivityPub.Web.Endpoint.static_integrity/1","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"ActivityPub.Web.Endpoint.html#static_integrity/1"},{"type":"function","title":"ActivityPub.Web.Endpoint.static_lookup/1","doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"ActivityPub.Web.Endpoint.html#static_lookup/1"},{"type":"function","title":"ActivityPub.Web.Endpoint.static_path/1","doc":"Generates a route to a static file in priv/static .","ref":"ActivityPub.Web.Endpoint.html#static_path/1"},{"type":"function","title":"ActivityPub.Web.Endpoint.static_url/0","doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"ActivityPub.Web.Endpoint.html#static_url/0"},{"type":"function","title":"ActivityPub.Web.Endpoint.struct_url/0","doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"ActivityPub.Web.Endpoint.html#struct_url/0"},{"type":"function","title":"ActivityPub.Web.Endpoint.subscribe/2","doc":"Callback implementation for Phoenix.Endpoint.subscribe/2 .","ref":"ActivityPub.Web.Endpoint.html#subscribe/2"},{"type":"function","title":"ActivityPub.Web.Endpoint.unsubscribe/1","doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1 .","ref":"ActivityPub.Web.Endpoint.html#unsubscribe/1"},{"type":"function","title":"ActivityPub.Web.Endpoint.url/0","doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"ActivityPub.Web.Endpoint.html#url/0"},{"type":"module","title":"ActivityPub.Web.ErrorHelpers","doc":"Conveniences for translating and building error messages.","ref":"ActivityPub.Web.ErrorHelpers.html"},{"type":"function","title":"ActivityPub.Web.ErrorHelpers.error_tag/2","doc":"Generates tag for inlined form input errors.","ref":"ActivityPub.Web.ErrorHelpers.html#error_tag/2"},{"type":"module","title":"ActivityPub.Web.ErrorView","doc":"Standard error view","ref":"ActivityPub.Web.ErrorView.html"},{"type":"function","title":"ActivityPub.Web.ErrorView.render/2","doc":"","ref":"ActivityPub.Web.ErrorView.html#render/2"},{"type":"function","title":"ActivityPub.Web.ErrorView.template_not_found/2","doc":"By default, Phoenix returns the status message from the template name. For example, &quot;404.html&quot; becomes &quot;Not Found&quot;.","ref":"ActivityPub.Web.ErrorView.html#template_not_found/2"},{"type":"module","title":"ActivityPub.Web.ObjectView","doc":"","ref":"ActivityPub.Web.ObjectView.html"},{"type":"function","title":"ActivityPub.Web.ObjectView.collection/4","doc":"","ref":"ActivityPub.Web.ObjectView.html#collection/4"},{"type":"function","title":"ActivityPub.Web.ObjectView.render/2","doc":"","ref":"ActivityPub.Web.ObjectView.html#render/2"},{"type":"module","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug","doc":"Ensures HTTP signature has been validated by previous plugs on ActivityPub requests.","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html"},{"type":"function","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.call/2","doc":"","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html#call/2"},{"type":"function","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.init/1","doc":"","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html#init/1"},{"type":"module","title":"ActivityPub.Web.Plugs.EnsurePublicOrAuthenticatedPlug","doc":"Ensures instance publicity or user authentication (app-bound user-unbound tokens are accepted only if the instance is public).","ref":"ActivityPub.Web.Plugs.EnsurePublicOrAuthenticatedPlug.html"},{"type":"function","title":"ActivityPub.Web.Plugs.EnsurePublicOrAuthenticatedPlug.init/1","doc":"","ref":"ActivityPub.Web.Plugs.EnsurePublicOrAuthenticatedPlug.html#init/1"},{"type":"module","title":"ActivityPub.Web.Plugs.HTTPSignaturePlug","doc":"","ref":"ActivityPub.Web.Plugs.HTTPSignaturePlug.html"},{"type":"function","title":"ActivityPub.Web.Plugs.HTTPSignaturePlug.call/2","doc":"","ref":"ActivityPub.Web.Plugs.HTTPSignaturePlug.html#call/2"},{"type":"function","title":"ActivityPub.Web.Plugs.HTTPSignaturePlug.init/1","doc":"","ref":"ActivityPub.Web.Plugs.HTTPSignaturePlug.html#init/1"},{"type":"module","title":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug","doc":"","ref":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.html"},{"type":"function","title":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.call/2","doc":"","ref":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.html#call/2"},{"type":"function","title":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.init/1","doc":"","ref":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.html#init/1"},{"type":"module","title":"ActivityPub.Web.RedirectController","doc":"","ref":"ActivityPub.Web.RedirectController.html"},{"type":"function","title":"ActivityPub.Web.RedirectController.actor/2","doc":"","ref":"ActivityPub.Web.RedirectController.html#actor/2"},{"type":"function","title":"ActivityPub.Web.RedirectController.object/2","doc":"","ref":"ActivityPub.Web.RedirectController.html#object/2"},{"type":"function","title":"ActivityPub.Web.RedirectController.remote_interaction/2","doc":"","ref":"ActivityPub.Web.RedirectController.html#remote_interaction/2"},{"type":"module","title":"ActivityPub.Web.Router","doc":"","ref":"ActivityPub.Web.Router.html"},{"type":"module","title":"ActivityPub.Web.Telemetry","doc":"","ref":"ActivityPub.Web.Telemetry.html"},{"type":"function","title":"ActivityPub.Web.Telemetry.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"ActivityPub.Web.Telemetry.html#child_spec/1"},{"type":"function","title":"ActivityPub.Web.Telemetry.metrics/0","doc":"","ref":"ActivityPub.Web.Telemetry.html#metrics/0"},{"type":"function","title":"ActivityPub.Web.Telemetry.start_link/1","doc":"","ref":"ActivityPub.Web.Telemetry.html#start_link/1"},{"type":"module","title":"ActivityPub.Web.UserSocket","doc":"","ref":"ActivityPub.Web.UserSocket.html"},{"type":"module","title":"ActivityPub.Web.WebFingerController","doc":"","ref":"ActivityPub.Web.WebFingerController.html"},{"type":"function","title":"ActivityPub.Web.WebFingerController.webfinger/2","doc":"","ref":"ActivityPub.Web.WebFingerController.html#webfinger/2"},{"type":"module","title":"AnimalAvatarGenerator","doc":"Generate SVG avatars from a string seed. It should always return the same avatar for the corresponding seed. Based on https://www.npmjs.com/package/animal-avatar-generator (translated to Elixir, mostly by ChatGPT)","ref":"AnimalAvatarGenerator.html"},{"type":"function","title":"AnimalAvatarGenerator.avatar/2","doc":"","ref":"AnimalAvatarGenerator.html#avatar/2"},{"type":"function","title":"AnimalAvatarGenerator.avatar_face/2","doc":"","ref":"AnimalAvatarGenerator.html#avatar_face/2"},{"type":"function","title":"AnimalAvatarGenerator.brows/0","doc":"","ref":"AnimalAvatarGenerator.html#brows/0"},{"type":"function","title":"AnimalAvatarGenerator.clamp/3","doc":"","ref":"AnimalAvatarGenerator.html#clamp/3"},{"type":"function","title":"AnimalAvatarGenerator.create_background/3","doc":"","ref":"AnimalAvatarGenerator.html#create_background/3"},{"type":"function","title":"AnimalAvatarGenerator.create_blackout/1","doc":"","ref":"AnimalAvatarGenerator.html#create_blackout/1"},{"type":"function","title":"AnimalAvatarGenerator.create_svg/2","doc":"","ref":"AnimalAvatarGenerator.html#create_svg/2"},{"type":"function","title":"AnimalAvatarGenerator.darken/2","doc":"","ref":"AnimalAvatarGenerator.html#darken/2"},{"type":"function","title":"AnimalAvatarGenerator.ears/0","doc":"","ref":"AnimalAvatarGenerator.html#ears/0"},{"type":"function","title":"AnimalAvatarGenerator.empty_shape/0","doc":"","ref":"AnimalAvatarGenerator.html#empty_shape/0"},{"type":"function","title":"AnimalAvatarGenerator.eyes/0","doc":"","ref":"AnimalAvatarGenerator.html#eyes/0"},{"type":"function","title":"AnimalAvatarGenerator.faces/0","doc":"","ref":"AnimalAvatarGenerator.html#faces/0"},{"type":"function","title":"AnimalAvatarGenerator.hairs/0","doc":"","ref":"AnimalAvatarGenerator.html#hairs/0"},{"type":"function","title":"AnimalAvatarGenerator.muzzles/0","doc":"","ref":"AnimalAvatarGenerator.html#muzzles/0"},{"type":"function","title":"AnimalAvatarGenerator.patterns/0","doc":"","ref":"AnimalAvatarGenerator.html#patterns/0"},{"type":"module","title":"Arrows","doc":"A handful of (mostly) arrow macros with superpowers.","ref":"Arrows.html"},{"type":"macro","title":"Arrows.<|>/2","doc":"Like || , except only defaults if the left is nil (i.e. false is valid)","ref":"Arrows.html#%3C%7C%3E/2"},{"type":"macro","title":"Arrows.<~>/2","doc":"Like || , except with the logic applied by ~&gt;","ref":"Arrows.html#%3C~%3E/2"},{"type":"function","title":"Arrows.from_ok/1","doc":"","ref":"Arrows.html#from_ok/1"},{"type":"function","title":"Arrows.ok/1","doc":"","ref":"Arrows.html#ok/1"},{"type":"function","title":"Arrows.ok_or/2","doc":"","ref":"Arrows.html#ok_or/2"},{"type":"function","title":"Arrows.to_ok/1","doc":"","ref":"Arrows.html#to_ok/1"},{"type":"macro","title":"Arrows.|>/2","doc":"A more flexible drop-in replacement for the standard elixir pipe operator. Special features are unlocked when using the ... (ellipsis) on the right hand side: The right hand side need not be a function, it can be any expression containing the ellipsis. The ellipsis will be replaced with the result of evaluating the hand side expression. You may use the ellipsis multiple times and the left hand side will be calculated exactly once. You can do crazy stuff with the ellipsis, but remember that people have to read it!","ref":"Arrows.html#%7C%3E/2"},{"type":"macro","title":"Arrows.~>/2","doc":"Like OK.~&gt;","ref":"Arrows.html#~%3E/2"},{"type":"module","title":"ConsoleHelpers","doc":"","ref":"ConsoleHelpers.html"},{"type":"module","title":"DaisyTheme","doc":"","ref":"DaisyTheme.html"},{"type":"function","title":"DaisyTheme.adjust/5","doc":"","ref":"DaisyTheme.html#adjust/5"},{"type":"function","title":"DaisyTheme.clamp/3","doc":"","ref":"DaisyTheme.html#clamp/3"},{"type":"function","title":"DaisyTheme.darken/2","doc":"","ref":"DaisyTheme.html#darken/2"},{"type":"function","title":"DaisyTheme.darker/5","doc":"","ref":"DaisyTheme.html#darker/5"},{"type":"function","title":"DaisyTheme.default_theme/0","doc":"","ref":"DaisyTheme.html#default_theme/0"},{"type":"function","title":"DaisyTheme.generate/1","doc":"","ref":"DaisyTheme.html#generate/1"},{"type":"function","title":"DaisyTheme.is_dark?/1","doc":"","ref":"DaisyTheme.html#is_dark?/1"},{"type":"function","title":"DaisyTheme.keys/0","doc":"","ref":"DaisyTheme.html#keys/0"},{"type":"function","title":"DaisyTheme.lighten/2","doc":"","ref":"DaisyTheme.html#lighten/2"},{"type":"function","title":"DaisyTheme.style_attr/1","doc":"","ref":"DaisyTheme.html#style_attr/1"},{"type":"function","title":"DaisyTheme.theme/1","doc":"","ref":"DaisyTheme.html#theme/1"},{"type":"module","title":"DummyAdapter","doc":"","ref":"DummyAdapter.html"},{"type":"module","title":"EctoSparkles","doc":"query_filter brings convenience and shortens the boilterplate of ecto queries Common filters available include: preload - Preloads fields onto the query results start_date - Query for items inserted after this date end_date - Query for items inserted before this date before - Get items with IDs before this value after - Get items with IDs after this value ids - Get items with a list of ids first - Gets the first n items last - Gets the last n items limit - Gets the first n items offset - Offsets limit by n items search - Warning: This requires schemas using this to have a &amp;by_search(query, val) function You are also able to filter on any natural field of a model, as well as use gte/gt lte/lt like/ilike is_nil/not(is_nil) query_filter ( User , %{ name : %{ ilike : &quot;steve&quot; } } ) query_filter ( User , %{ name : %{ ilike : &quot;steve&quot; } } , :last_name , :asc ) query_filter ( User , %{ name : %{ age : %{ gte : 18 , lte : 30 } } } ) query_filter ( User , %{ name : %{ is_banned : %{ != : nil } } } ) query_filter ( User , %{ name : %{ is_banned : %{ == : nil } } } ) my_query = query_filter ( User , %{ name : &quot;Billy&quot; } ) query_filter ( my_query , %{ last_name : &quot;Joe&quot; } )","ref":"EctoSparkles.html"},{"type":"macro","title":"EctoSparkles.join_preload/2","doc":"join_preload is a helper for preloading associations using joins. By default, Ecto preloads associations using a separate query for each association, which can degrade performance. You could make it run faster by using a combination of join/preload, but that requires a bit of boilerplate (see example below). With EctoSparkles , you can accomplish this with just one line of code. Example using just Ecto import Ecto.Query Invoice |&gt; join ( :left , [ i ] , assoc ( i , :customer ) , as : :customer ) |&gt; join ( :left , [ i , c ] , assoc ( c , :account ) , as : :account ) |&gt; join ( :left , [ i ] , assoc ( i , :lines ) , as : :lines ) |&gt; preload ( [ lines : v , customers : c , account : a ] , lines : v , customer : { c , [ a : account ] } ) |&gt; Repo . all ( ) Example using join_preload import EctoSparkles Invoice |&gt; join_preload ( [ :customer , :account ] ) |&gt; join_preload ( [ :lines ] ) |&gt; Repo . all ( )","ref":"EctoSparkles.html#join_preload/2"},{"type":"macro","title":"EctoSparkles.proload/3","doc":"AKA join_preload++ . It's more powerful, but it does it with more (and different!) syntax. e.g. proload ( query , activity : [ :verb , :boost_count , :like_count , :replied , # relations under object will have their aliases prefixed with object_, i.e. # :object_message, :object_post, :object_post_content # the original names will still be used for the associations. object : { &quot;object_&quot; , [ :message , :post , :post_content ] } ] )","ref":"EctoSparkles.html#proload/3"},{"type":"function","title":"EctoSparkles.query_filter/4","doc":"","ref":"EctoSparkles.html#query_filter/4"},{"type":"macro","title":"EctoSparkles.reusable_join/5","doc":"reusable_join is similar to Ecto.Query.join/{4,5} , but can be called multiple times with the same alias. Note that only the first join operation is performed, the subsequent ones that use the same alias are just ignored. Also note that because of this behaviour, it is mandatory to specify an alias when using this function. This is helpful when you need to perform a join while building queries one filter at a time, because the same filter could be used multiple times or you could have multiple filters that require the same join, which poses a problem with how the filter/3 callback work, as you need to return a dynamic with the filtering, which means that the join must have an alias, and by default Ecto raises an error when you add multiple joins with the same alias. To solve this, it is recommended to use this macro instead of the default Ecto.Query.join/{4,5} , in which case there will be only one join in the query that can be reused by multiple filters.","ref":"EctoSparkles.html#reusable_join/5"},{"type":"module","title":"EctoSparkles.AutoMigrator","doc":"Runs ecto migrations automatically on startup (add this to your app's supervision tree)","ref":"EctoSparkles.AutoMigrator.html"},{"type":"function","title":"EctoSparkles.AutoMigrator.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"EctoSparkles.AutoMigrator.html#child_spec/1"},{"type":"function","title":"EctoSparkles.AutoMigrator.init/1","doc":"Callback implementation for GenServer.init/1 .","ref":"EctoSparkles.AutoMigrator.html#init/1"},{"type":"function","title":"EctoSparkles.AutoMigrator.start_link/1","doc":"","ref":"EctoSparkles.AutoMigrator.html#start_link/1"},{"type":"function","title":"EctoSparkles.AutoMigrator.startup_migrations/0","doc":"","ref":"EctoSparkles.AutoMigrator.html#startup_migrations/0"},{"type":"module","title":"EctoSparkles.Changesets","doc":"Helper functions for changesets","ref":"EctoSparkles.Changesets.html"},{"type":"function","title":"EctoSparkles.Changesets.change_synced_timestamp/3","doc":"If a changeset includes a change to bool_field , we ensure that the timestamp field is updated if required. In the case of true, this means setting it to now if it is null and in the case of false, this means setting it to null if it is not null.","ref":"EctoSparkles.Changesets.html#change_synced_timestamp/3"},{"type":"function","title":"EctoSparkles.Changesets.change_synced_timestamps/5","doc":"If a changeset includes a change to bool_field , we change two timestamps columns (representing activated and deactivated) so that only one is set to a non-null value at a time.","ref":"EctoSparkles.Changesets.html#change_synced_timestamps/5"},{"type":"function","title":"EctoSparkles.Changesets.validate_exactly_one/3","doc":"","ref":"EctoSparkles.Changesets.html#validate_exactly_one/3"},{"type":"function","title":"EctoSparkles.Changesets.validate_http_url/2","doc":"Validates that a URL uses HTTP(S) and has a correct format.","ref":"EctoSparkles.Changesets.html#validate_http_url/2"},{"type":"function","title":"EctoSparkles.Changesets.validate_not_expired/4","doc":"Validates that the entity has not expired","ref":"EctoSparkles.Changesets.html#validate_not_expired/4"},{"type":"module","title":"EctoSparkles.Changesets.Errors","doc":"","ref":"EctoSparkles.Changesets.Errors.html"},{"type":"function","title":"EctoSparkles.Changesets.Errors.changeset_errors_string/2","doc":"","ref":"EctoSparkles.Changesets.Errors.html#changeset_errors_string/2"},{"type":"function","title":"EctoSparkles.Changesets.Errors.error/2","doc":"","ref":"EctoSparkles.Changesets.Errors.html#error/2"},{"type":"module","title":"EctoSparkles.ErlangTermBinary","doc":"A custom Ecto type for handling the serialization of arbitrary data types stored as binary data in the database. Requires the underlying DB field to be a binary.","ref":"EctoSparkles.ErlangTermBinary.html"},{"type":"function","title":"EctoSparkles.ErlangTermBinary.cast/1","doc":"Callback implementation for Ecto.Type.cast/1 .","ref":"EctoSparkles.ErlangTermBinary.html#cast/1"},{"type":"function","title":"EctoSparkles.ErlangTermBinary.cast/2","doc":"Provides custom casting rules for params. Nothing changes here. We only need to handle deserialization.","ref":"EctoSparkles.ErlangTermBinary.html#cast/2"},{"type":"function","title":"EctoSparkles.ErlangTermBinary.dump/1","doc":"Converting the data structure to binary for storage.","ref":"EctoSparkles.ErlangTermBinary.html#dump/1"},{"type":"function","title":"EctoSparkles.ErlangTermBinary.embed_as/1","doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"EctoSparkles.ErlangTermBinary.html#embed_as/1"},{"type":"function","title":"EctoSparkles.ErlangTermBinary.equal?/2","doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"EctoSparkles.ErlangTermBinary.html#equal?/2"},{"type":"function","title":"EctoSparkles.ErlangTermBinary.load/1","doc":"Convert the raw binary value from the database back to the desired term.","ref":"EctoSparkles.ErlangTermBinary.html#load/1"},{"type":"function","title":"EctoSparkles.ErlangTermBinary.type/0","doc":"Callback implementation for Ecto.Type.type/0 .","ref":"EctoSparkles.ErlangTermBinary.html#type/0"},{"type":"module","title":"EctoSparkles.Log","doc":"Log slow Ecto queries","ref":"EctoSparkles.Log.html"},{"type":"function","title":"EctoSparkles.Log.check_if_n_plus_1/1","doc":"","ref":"EctoSparkles.Log.html#check_if_n_plus_1/1"},{"type":"function","title":"EctoSparkles.Log.format_log/4","doc":"","ref":"EctoSparkles.Log.html#format_log/4"},{"type":"function","title":"EctoSparkles.Log.handle_event/4","doc":"","ref":"EctoSparkles.Log.html#handle_event/4"},{"type":"function","title":"EctoSparkles.Log.inline_params/3","doc":"","ref":"EctoSparkles.Log.html#inline_params/3"},{"type":"function","title":"EctoSparkles.Log.log_query/4","doc":"","ref":"EctoSparkles.Log.html#log_query/4"},{"type":"function","title":"EctoSparkles.Log.setup/1","doc":"","ref":"EctoSparkles.Log.html#setup/1"},{"type":"module","title":"EctoSparkles.Migrator","doc":"","ref":"EctoSparkles.Migrator.html"},{"type":"function","title":"EctoSparkles.Migrator.create/0","doc":"","ref":"EctoSparkles.Migrator.html#create/0"},{"type":"function","title":"EctoSparkles.Migrator.create/1","doc":"","ref":"EctoSparkles.Migrator.html#create/1"},{"type":"function","title":"EctoSparkles.Migrator.migrate/0","doc":"","ref":"EctoSparkles.Migrator.html#migrate/0"},{"type":"function","title":"EctoSparkles.Migrator.migrate/1","doc":"","ref":"EctoSparkles.Migrator.html#migrate/1"},{"type":"function","title":"EctoSparkles.Migrator.rollback/2","doc":"","ref":"EctoSparkles.Migrator.html#rollback/2"},{"type":"function","title":"EctoSparkles.Migrator.rollback_all/0","doc":"","ref":"EctoSparkles.Migrator.html#rollback_all/0"},{"type":"function","title":"EctoSparkles.Migrator.rollback_all/1","doc":"","ref":"EctoSparkles.Migrator.html#rollback_all/1"},{"type":"function","title":"EctoSparkles.Migrator.rollback_to/1","doc":"","ref":"EctoSparkles.Migrator.html#rollback_to/1"},{"type":"function","title":"EctoSparkles.Migrator.rollback_to/2","doc":"","ref":"EctoSparkles.Migrator.html#rollback_to/2"},{"type":"function","title":"EctoSparkles.Migrator.status/0","doc":"Print the migration status for configured Repos' migrations.","ref":"EctoSparkles.Migrator.html#status/0"},{"type":"module","title":"EctoSparkles.NPlus1Detector","doc":"Checks a query against the previous one and increments counter of collisions or swaps previous query with the last one.","ref":"EctoSparkles.NPlus1Detector.html"},{"type":"function","title":"EctoSparkles.NPlus1Detector.check/1","doc":"","ref":"EctoSparkles.NPlus1Detector.html#check/1"},{"type":"function","title":"EctoSparkles.NPlus1Detector.do_check/2","doc":"","ref":"EctoSparkles.NPlus1Detector.html#do_check/2"},{"type":"module","title":"EctoSparkles.SanitiseStrings","doc":"Provides functions for sanitising input on Ecto.Changeset string fields.","ref":"EctoSparkles.SanitiseStrings.html"},{"type":"function","title":"EctoSparkles.SanitiseStrings.clean_html/2","doc":"","ref":"EctoSparkles.SanitiseStrings.html#clean_html/2"},{"type":"function","title":"EctoSparkles.SanitiseStrings.sanitise_strings/2","doc":"","ref":"EctoSparkles.SanitiseStrings.html#sanitise_strings/2"},{"type":"function","title":"EctoSparkles.SanitiseStrings.strip_all_tags/2","doc":"Sanitises all changes in the given changeset that apply to field which are of the :string Ecto type. By default it uses the HtmlSanitizeEx.strip_tags/1 function on any change that satisfies all of the following conditions: The field associated with the change is of the type :string . The field associated with the change is not in the blacklisted_fields list of opts as defined using the :except key in opts . Note that this function will change the value in the :changes map of an %Ecto.Changeset{} struct if the given changes are sanitized. Examples iex&gt; attrs = %{ string_field : &quot;&lt;script&gt;Bad&lt;/script&gt;&quot; } iex&gt; result_changeset = ...&gt; attrs ...&gt; |&gt; FakeEctoSchema . changeset ( ) ...&gt; |&gt; EctoSparkles.SanitiseStrings . strip_all_tags ( ) iex&gt; result_changeset . changes %{ string_field : &quot;Bad&quot; } Fields can be exempted from sanitization via the :except option. iex&gt; attrs = %{ string_field : &quot;&lt;script&gt;Bad&lt;/script&gt;&quot; } iex&gt; result_changeset = ...&gt; attrs ...&gt; |&gt; FakeEctoSchema . changeset ( ) ...&gt; |&gt; EctoSparkles.SanitiseStrings . strip_all_tags ( except : [ :string_field ] ) iex&gt; result_changeset . changes %{ string_field : &quot;&lt;script&gt;Bad&lt;/script&gt;&quot; } You can also specify a specific scrubber (by passing a function as reference): ies&gt; attrs ...&gt; |&gt; FakeEctoSchema . changeset ( ) ...&gt; |&gt; EctoSparkles.SanitiseStrings . sanitise_strings ( scrubber : HtmlSanitizeEx.Scrubber . html5 / 1 )","ref":"EctoSparkles.SanitiseStrings.html#strip_all_tags/2"},{"type":"module","title":"Flexto","doc":"Configuration-driven Ecto Schemata.","ref":"Flexto.html"},{"type":"macro","title":"Flexto.flex_schema/1","doc":"Adds additional associations dynamically from app config. Reads config for the given OTP application, under the name of the current module. Each key maps to an Ecto.Schema function: belongs_to field has_many has_one many_to_many Each of these keys should map to a keyword list where the key is the name of the field or association and the value is one of: A type A tuple of type and options (keyword list) Example Schema: defmodule My.Schema do use Ecto.Schema import Flexto , only : [ flex_schema : 1 ] schema &quot;my_table&quot; do field :name , :string # just normal schema things flex_schema ( :my_app ) # boom! give me the stuff end end Example configuration: config :my_app , My.Schema , belongs_to : [ foo : Foo , # belongs_to :foo, Foo bar : { Bar , type : :integer } , # belongs_to :bar, Bar, type: :integer ] , field : [ foo : :string , # field :foo, :string bar : { :integer , default : 4 } , # field :foo, :integer, default: 4 ] , has_one : [ foo : Foo , # has_one :foo, Foo bar : { Bar , foreign_key : :the_bar_id } , # has_one :bar, Bar, foreign_key: :the_bar_id ] has_many : [ foo : Foo , # has_many :foo, Foo bar : { Bar , foreign_key : :the_bar_id } , # has_many :bar, Bar, foreign_key: :the_bar_id ] many_to_many : [ foo : Foo , # many_to_many :foo, Foo bar : { Bar , join_through : FooBar } , # many_to_many :bar, Bar, :join_through: FooBar ] This one won't work very well because we define foo and bar 5 times each, but I think you get the point. Reading of configuration is done during compile time. The relations will be baked in during compilation, thus: Do not expect this to work in runtime config. You will need to rebuild all dependencies which use this macro when you change their configuration.","ref":"Flexto.html#flex_schema/1"},{"type":"module","title":"Import2Alias","doc":"","ref":"Import2Alias.html"},{"type":"function","title":"Import2Alias.import2alias/2","doc":"","ref":"Import2Alias.html#import2alias/2"},{"type":"module","title":"Import2Alias.CallerTracer","doc":"","ref":"Import2Alias.CallerTracer.html"},{"type":"function","title":"Import2Alias.CallerTracer.trace/2","doc":"","ref":"Import2Alias.CallerTracer.html#trace/2"},{"type":"module","title":"Import2Alias.Server","doc":"","ref":"Import2Alias.Server.html"},{"type":"function","title":"Import2Alias.Server.child_spec/1","doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Import2Alias.Server.html#child_spec/1"},{"type":"function","title":"Import2Alias.Server.entries/0","doc":"","ref":"Import2Alias.Server.html#entries/0"},{"type":"function","title":"Import2Alias.Server.record/6","doc":"","ref":"Import2Alias.Server.html#record/6"},{"type":"function","title":"Import2Alias.Server.start_link/1","doc":"","ref":"Import2Alias.Server.html#start_link/1"},{"type":"task","title":"Mix.Tasks.Bonfire.Account.New","doc":"Creates an account in the database, automatically activated Usage mix bonfire . account . new [ email @address ] You will be prompted for a password and an email if it was not provided.","ref":"Mix.Tasks.Bonfire.Account.New.html"},{"type":"function","title":"Mix.Tasks.Bonfire.Account.New.run/1","doc":"Callback implementation for Mix.Task.run/1 .","ref":"Mix.Tasks.Bonfire.Account.New.html#run/1"},{"type":"task","title":"Mix.Tasks.Bonfire.Deps.Compile","doc":"(re)compiles dependencies. TODO: check if we still need this now that we treat extensions as umbrella apps in dev... This is a modified version of Elixir's Mix.Tasks.Deps.Compile which was needed to compile dependencies and extract localisable strings in Mix.Tasks.Bonfire.Localise.Extract By default, compile all dependencies. A list of dependencies can be given compile multiple dependencies in order. This task attempts to detect if the project contains one of the following files and act accordingly: mix.exs - invokes mix compile otherwise skip If a list of dependencies is given, Mix will attempt to compile them as is. For example, if project a depends on b , calling mix deps.compile a will compile a even if b is out of date. This is to allow parts of the dependency tree to be recompiled without propagating those changes upstream. To ensure b is included in the compilation step, pass --include-children .","ref":"Mix.Tasks.Bonfire.Deps.Compile.html"},{"type":"function","title":"Mix.Tasks.Bonfire.Deps.Compile.force_compile/2","doc":"","ref":"Mix.Tasks.Bonfire.Deps.Compile.html#force_compile/2"},{"type":"function","title":"Mix.Tasks.Bonfire.Deps.Compile.loaded_by_name/3","doc":"Receives a list of dependency names and returns loaded Mix.Dep s. Logs a message if the dependency could not be found. Exceptions This function raises an exception if any of the dependencies provided in the project are in the wrong format.","ref":"Mix.Tasks.Bonfire.Deps.Compile.html#loaded_by_name/3"},{"type":"function","title":"Mix.Tasks.Bonfire.Deps.Compile.run/1","doc":"Callback implementation for Mix.Task.run/1 .","ref":"Mix.Tasks.Bonfire.Deps.Compile.html#run/1"},{"type":"function","title":"Mix.Tasks.Bonfire.Deps.Compile.touch_manifests/0","doc":"","ref":"Mix.Tasks.Bonfire.Deps.Compile.html#touch_manifests/0"},{"type":"function","title":"Mix.Tasks.Bonfire.Deps.Compile.try_compile/2","doc":"","ref":"Mix.Tasks.Bonfire.Deps.Compile.html#try_compile/2"},{"type":"task","title":"Mix.Tasks.Bonfire.Localise.Extract","doc":"Extracts translations by recompiling the Elixir source code. mix gettext . extract [ OPTIONS ] Translations are extracted into POT (Portable Object Template) files (with a .pot extension). The location of these files is determined by the :otp_app and :priv options given by Gettext modules when they call use Gettext . One POT file is generated for each translation domain. It is possible to give the --merge option to perform merging for every Gettext backend updated during merge: mix gettext . extract -- merge All other options passed to gettext.extract are forwarded to the gettext.merge task ( Mix.Tasks.Gettext.Merge ), which is called internally by this task. For example: mix gettext . extract -- merge -- no - fuzzy","ref":"Mix.Tasks.Bonfire.Localise.Extract.html"},{"type":"function","title":"Mix.Tasks.Bonfire.Localise.Extract.run/1","doc":"Callback implementation for Mix.Task.run/1 .","ref":"Mix.Tasks.Bonfire.Localise.Extract.html#run/1"},{"type":"task","title":"Mix.Tasks.Bonfire.Release","doc":"","ref":"Mix.Tasks.Bonfire.Release.html"},{"type":"function","title":"Mix.Tasks.Bonfire.Release.main/1","doc":"","ref":"Mix.Tasks.Bonfire.Release.html#main/1"},{"type":"function","title":"Mix.Tasks.Bonfire.Release.run/1","doc":"","ref":"Mix.Tasks.Bonfire.Release.html#run/1"},{"type":"task","title":"Mix.Tasks.Bonfire.Secrets","doc":"Generates secrets and prints to the terminal. mix bonfire . secrets [ length ] By default, it generates keys 64 characters long. The minimum value for length is 32.","ref":"Mix.Tasks.Bonfire.Secrets.html"},{"type":"function","title":"Mix.Tasks.Bonfire.Secrets.main/1","doc":"","ref":"Mix.Tasks.Bonfire.Secrets.html#main/1"},{"type":"task","title":"Mix.Tasks.Bonfire.User.Admin.Promote","doc":"Creates an account in the database, automatically activated Usage mix bonfire . user . admin . promote username","ref":"Mix.Tasks.Bonfire.User.Admin.Promote.html"},{"type":"function","title":"Mix.Tasks.Bonfire.User.Admin.Promote.run/1","doc":"Callback implementation for Mix.Task.run/1 .","ref":"Mix.Tasks.Bonfire.User.Admin.Promote.html#run/1"},{"type":"task","title":"Mix.Tasks.Docs.Deps","doc":"mix docs.deps Command line options --only - the environment to include dependencies for --target - the target to include dependencies for --exclude - exclude dependencies which you do not want to see in docs. any arguments supported by mix docs will be passed along","ref":"Mix.Tasks.Docs.Deps.html"},{"type":"task","title":"Mix.Tasks.Import2alias","doc":"","ref":"Mix.Tasks.Import2alias.html"},{"type":"behaviour","title":"Paginator","doc":"Defines a paginator. This module adds a paginate/3 function to your Ecto.Repo so that you can paginate through results using opaque cursors. Usage defmodule MyApp.Repo do use Ecto.Repo , otp_app : :my_app use Paginator end Options Paginator can take any options accepted by paginate/3 . This is useful when you want to enforce some options globally across your project. Example defmodule MyApp.Repo do use Ecto.Repo , otp_app : :my_app use Paginator , limit : 10 , # sets the default limit to 10 maximum_limit : 100 , # sets the maximum limit to 100 include_total_count : true , # include total count by default total_count_primary_key_field : :uuid # sets the total_count_primary_key_field to uuid for calculate total_count end Note that these values can be still be overriden when paginate/3 is called. Use without macros If you wish to avoid use of macros or you wish to use a different name for the pagination function you can define your own function like so: defmodule MyApp.Repo do use Ecto.Repo , otp_app : :my_app def my_paginate_function ( queryable , opts \\ [ ] , repo_opts \\ [ ] ) do defaults = [ limit : 10 ] # Default options of your choice here opts = Keyword . merge ( defaults , opts ) Paginator . paginate ( queryable , opts , __MODULE__ , repo_opts ) end end","ref":"Paginator.html"},{"type":"function","title":"Paginator.cursor_for_record/3","doc":"Generate a cursor for the supplied record, in the same manner as the before and after cursors generated by paginate/3 . For the cursor to be compatible with paginate/3 , cursor_fields must have the same value as the cursor_fields option passed to it. Example iex&gt; Paginator . cursor_for_record ( % Paginator.Customer { id : 1 } , [ :id ] ) &quot;g3QAAAABZAACaWRhAQ==&quot; iex&gt; Paginator . cursor_for_record ( % Paginator.Customer { id : 1 , name : &quot;Alice&quot; } , [ id : :asc , name : :desc ] ) &quot;g3QAAAACZAACaWRhAWQABG5hbWVtAAAABUFsaWNl&quot;","ref":"Paginator.html#cursor_for_record/3"},{"type":"function","title":"Paginator.default_fetch_cursor_value/2","doc":"Default function used to get the value of a cursor field from the supplied map. This function can be overriden in the Paginator.Config using the fetch_cursor_value_fun key. When using named bindings to sort on joined columns it will attempt to get the value of joined column by using the named binding as the name of the relationship on the original Ecto.Schema. Example iex&gt; Paginator . default_fetch_cursor_value ( % Paginator.Customer { id : 1 } , :id ) 1 iex&gt; Paginator . default_fetch_cursor_value ( % Paginator.Customer { id : 1 , address : % Paginator.Address { city : &quot;London&quot; } } , { :address , :city } ) &quot;London&quot;","ref":"Paginator.html#default_fetch_cursor_value/2"},{"type":"callback","title":"Paginator.paginate/3","doc":"Fetches all the results matching the query within the cursors. Options :after - Fetch the records after this cursor. :before - Fetch the records before this cursor. :cursor_fields - The fields with sorting direction used to determine the cursor. In most cases, this should be the same fields as the ones used for sorting in the query. When you use named bindings in your query they can also be provided. :fetch_cursor_value_fun function of arity 2 to lookup cursor values on returned records. Defaults to Paginator.default_fetch_cursor_value/2 :include_total_count - Set this to true to return the total number of records matching the query. Note that this number will be capped by :total_count_limit . Defaults to false . :total_count_primary_key_field - Running count queries on specified column of the table :limit - Limits the number of records returned per page. Note that this number will be capped by :maximum_limit . Defaults to 50 . :maximum_limit - Sets a maximum cap for :limit . This option can be useful when :limit is set dynamically (e.g from a URL param set by a user) but you still want to enforce a maximum. Defaults to 500 . :sort_direction - The direction used for sorting. Defaults to :asc . It is preferred to set the sorting direction per field in :cursor_fields . :total_count_limit - Running count queries on tables with a large number of records is expensive so it is capped by default. Can be set to :infinity in order to count all the records. Defaults to 10,000 . Repo options This will be passed directly to Ecto.Repo.all/2 , as such any option supported by this function can be used here. Simple example query = from ( p in Post , order_by : [ asc : p . inserted_at , asc : p . id ] , select : p ) Repo . paginate ( query , cursor_fields : [ :inserted_at , :id ] , limit : 50 ) Example with using custom sort directions per field query = from ( p in Post , order_by : [ asc : p . inserted_at , desc : p . id ] , select : p ) Repo . paginate ( query , cursor_fields : [ inserted_at : :asc , id : :desc ] , limit : 50 ) Example with sorting on columns in joined tables from ( p in Post , as : :posts , join : a in assoc ( p , :author ) , as : :author , preload : [ author : a ] , select : p , order_by : [ { :asc , a . name } , { :asc , p . id } ] ) Repo . paginate ( query , cursor_fields : [ { { :author , :name } , :asc } , id : :asc ] , limit : 50 ) When sorting on columns in joined tables it is necessary to use named bindings. In this case we name it author . In the cursor_fields we refer to this named binding and its column name. To build the cursor Paginator uses the returned Ecto.Schema. When using a joined column the returned Ecto.Schema won't have the value of the joined column unless we preload it. E.g. in this case the cursor will be build up from post.id and post.author.name . This presupposes that the named of the binding is the same as the name of the relationship on the original struct. One level deep joins are supported out of the box but if we join on a second level, e.g. post.author.company.name a custom function can be supplied to handle the cursor value retrieval. This also applies when the named binding does not map to the name of the relationship. Example from ( p in Post , as : :posts , join : a in assoc ( p , :author ) , as : :author , join : c in assoc ( a , :company ) , as : :company , preload : [ author : a ] , select : p , order_by : [ { :asc , a . name } , { :asc , p . id } ] ) Repo . paginate ( query , cursor_fields : [ { { :company , :name } , :asc } , id : :asc ] , fetch_cursor_value_fun : fn post , { { :company , name } , _ } -&gt; post . author . company . name post , field -&gt; Paginator . default_fetch_cursor_value ( post , field ) end , limit : 50 )","ref":"Paginator.html#c:paginate/3"},{"type":"function","title":"Paginator.paginated_query/2","doc":"","ref":"Paginator.html#paginated_query/2"},{"type":"module","title":"Paginator.Page","doc":"Defines a page. Fields edges - a list of entries contained in this page. page_info - meta-data attached to this page.","ref":"Paginator.Page.html"},{"type":"type","title":"Paginator.Page.t/0","doc":"","ref":"Paginator.Page.html#t:t/0"},{"type":"module","title":"Paginator.PageInfo","doc":"Defines page page_info. Fields start_cursor - an opaque cursor representing the first row of the current page, to be used with the before query parameter. end_cursor - an opaque cursor representing the last row of the current page, to be used with the after query parameter. limit - the maximum number of edges that can be contained in this page. page_count - the number of edges on the current page. total_count - the total number of edges matching the query. total_count_cap_exceeded - a boolean indicating whether the :total_count_limit was exceeded.","ref":"Paginator.PageInfo.html"},{"type":"type","title":"Paginator.PageInfo.opaque_cursor/0","doc":"","ref":"Paginator.PageInfo.html#t:opaque_cursor/0"},{"type":"type","title":"Paginator.PageInfo.t/0","doc":"","ref":"Paginator.PageInfo.html#t:t/0"},{"type":"module","title":"Releaser.Git","doc":"","ref":"Releaser.Git.html"},{"type":"function","title":"Releaser.Git.add_commit_and_tag/1","doc":"This module contains some git-specific functionality","ref":"Releaser.Git.html#add_commit_and_tag/1"},{"type":"module","title":"Releaser.Publish","doc":"","ref":"Releaser.Publish.html"},{"type":"function","title":"Releaser.Publish.publish!/0","doc":"","ref":"Releaser.Publish.html#publish!/0"},{"type":"module","title":"Releaser.Tests","doc":"","ref":"Releaser.Tests.html"},{"type":"function","title":"Releaser.Tests.run_tests!/0","doc":"","ref":"Releaser.Tests.html#run_tests!/0"},{"type":"module","title":"Releaser.VersionUtils","doc":"","ref":"Releaser.VersionUtils.html"},{"type":"function","title":"Releaser.VersionUtils.bump_major/1","doc":"Some utilities to get and set version numbers in the mix.exs file and to programmatically transform version numbers. Maybe the bump_* functions should be in the standard library? This script doesn't support pre-release versions or versions with build information.","ref":"Releaser.VersionUtils.html#bump_major/1"},{"type":"function","title":"Releaser.VersionUtils.bump_minor/1","doc":"","ref":"Releaser.VersionUtils.html#bump_minor/1"},{"type":"function","title":"Releaser.VersionUtils.bump_patch/1","doc":"","ref":"Releaser.VersionUtils.html#bump_patch/1"},{"type":"function","title":"Releaser.VersionUtils.bump_pre/2","doc":"","ref":"Releaser.VersionUtils.html#bump_pre/2"},{"type":"function","title":"Releaser.VersionUtils.get_version/1","doc":"","ref":"Releaser.VersionUtils.html#get_version/1"},{"type":"function","title":"Releaser.VersionUtils.set_version/2","doc":"","ref":"Releaser.VersionUtils.html#set_version/2"},{"type":"function","title":"Releaser.VersionUtils.update_version/2","doc":"","ref":"Releaser.VersionUtils.html#update_version/2"},{"type":"function","title":"Releaser.VersionUtils.version_to_string/1","doc":"","ref":"Releaser.VersionUtils.html#version_to_string/1"},{"type":"module","title":"UserAuthLiveMount","doc":"","ref":"UserAuthLiveMount.html"},{"type":"function","title":"UserAuthLiveMount.on_mount/4","doc":"","ref":"UserAuthLiveMount.html#on_mount/4"},{"type":"module","title":"Voodoo","doc":"","ref":"Voodoo.html"},{"type":"macro","title":"Voodoo.def_reverse_router/2","doc":"Generates a reverse router function with the given name based upon a compiled(!) phoenix router module. Must be used outside of the router module, or else the router won't be compiled yet and we won't be able to look up the routes. Generated function wraps the existing phoenix helpers. defmodule MyAppWeb.Router do use MyAppWeb , :router # ... end defmodule MyAppWeb.Router.Reverse do import Voodoo , only : [ def_reverse_router : 2 ] def_reverse_router :path , for : MyAppWeb.Router end","ref":"Voodoo.html#def_reverse_router/2"},{"type":"function","title":"Voodoo.router/1","doc":"Turns a Conn or Socket into the name of the router that routed it.","ref":"Voodoo.html#router/1"},{"type":"module","title":"Zest","doc":"","ref":"Zest.html"},{"type":"function","title":"Zest.each/2","doc":"Iterates over a collections, calling the provided effectful function with each item.","ref":"Zest.html#each/2"},{"type":"function","title":"Zest.each/3","doc":"Iterates over two collections, calling the provided effectful function with each pair of items","ref":"Zest.html#each/3"},{"type":"function","title":"Zest.hijack/2","doc":"You take on the role of the apply function in this exciting function that wraps execution of a function such that your function is responsible for calling it.","ref":"Zest.html#hijack/2"},{"type":"function","title":"Zest.in_scope/2","doc":"Add some debug information to the context for the duration of a function's execution. If a raise , throw or exit occurs, the context will be pretty printed to the screen to aid with debugging.","ref":"Zest.html#in_scope/2"},{"type":"function","title":"Zest.intercept/2","doc":"Catches errors and exceptions, invoking an interceptor function","ref":"Zest.html#intercept/2"},{"type":"function","title":"Zest.rethrow/3","doc":"An interceptor function which simply rethrows/reraises/re-exits","ref":"Zest.html#rethrow/3"},{"type":"function","title":"Zest.rethrowing/1","doc":"Wraps an interceptor or nullary function into an interceptor function such that after the execution of the provided function, the error or exception will be rethrown.","ref":"Zest.html#rethrowing/1"},{"type":"macro","title":"Zest.scope/2","doc":"Add some debug information to the context for the duration of a block or expression. If a raise , throw or exit occurs, the context will be pretty printed to the screen to aid with debugging. Examples: scope [foo: :bar[, assert(true == false) scope [foo: :bar] do assert true == false end","ref":"Zest.html#scope/2"},{"type":"function","title":"Zest.scoped/2","doc":"Wrap a function such that it is as if its body was wrapped in scope/2","ref":"Zest.html#scoped/2"},{"type":"type","title":"Zest.intercept_type/0","doc":"","ref":"Zest.html#t:intercept_type/0"},{"type":"type","title":"Zest.interceptor/0","doc":"","ref":"Zest.html#t:interceptor/0"},{"type":"module","title":"Zest.Faking","doc":"Helpers to make random generator functions more useful in tests","ref":"Zest.Faking.html"},{"type":"function","title":"Zest.Faking.forbid/2","doc":"Partner to unused . Adds a list of values to the list of used values under a key.","ref":"Zest.Faking.html#forbid/2"},{"type":"function","title":"Zest.Faking.sequential/2","doc":"Returns the next unused integer id for name starting from start . Permits jumping by artificially increasing start - if start is higher than the last used id, it will return start and set it as the last used id","ref":"Zest.Faking.html#sequential/2"},{"type":"function","title":"Zest.Faking.such_that/4","doc":"Reruns a faker until a predicate passes. Default limit is 10 tries.","ref":"Zest.Faking.html#such_that/4"},{"type":"function","title":"Zest.Faking.unused/3","doc":"Reruns a faker until an unseen value has been generated. Default limit is 10 tries. Stores seen things in the process dict (yes, that process dict)","ref":"Zest.Faking.html#unused/3"},{"type":"extras","title":"README","doc":"Bonfire Bonfire - tend to your digital life in community Customise and host your own online space and control your experience at the most granular level. ⚠️ Warning This project is in the beta stage - you're welcome to try out it out (specifically the social features in the classic flavour), but APIs may still change and no guarantees are given about stability. You can keep track of progress in our milestones 🔥 Flavours This repo includes configurations to run two main flavours of Bonfire you can choose from: Classic for basic social networking Cooperation with a bunch more extensions and features As well as app flavours being built by others, including: Haha Academy by haha.academy Reflow by reflowproject.eu and dyne.org","ref":"readme.html"},{"type":"extras","title":"README - 📖 Documentation","doc":"Website Set up an instance - for testing and evaluation only! Hacking on Bonfire Code documentation Community chat","ref":"readme.html#documentation"},{"type":"extras","title":"README - Copyright and License","doc":"Copyright (c) 2020-2022 Bonfire Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"readme.html#copyright-and-license"},{"type":"extras","title":"Bonfire Spark","doc":"An essential Bonfire extension that sets up the other extensions and starts the app. NOTE: this extension uses top-level naming for the OTP app ( :bonfire ) and modules ( Bonfire. ). Documentation can be generated with ExDoc and published on HexDocs . Once published, the docs can be found at https://hexdocs.pm/bonfire_app .","ref":"extension-bonfire.html"},{"type":"extras","title":"Bonfire.Common","doc":"Bonfire.Common is an extension for Bonfire that contains: Many common functions in Bonfire.Common.Utils Path and URL generators in Bonfire.Common.URIs Date and time helpers in Bonfire.Common.DatesTimes Etc","ref":"extension-bonfire_common.html"},{"type":"extras","title":"Bonfire.Common - Handy commands","doc":"","ref":"extension-bonfire_common.html#handy-commands"},{"type":"extras","title":"Bonfire.Common - Copyright and License","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_common.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Editor.Ck","doc":"An extension for Bonfire that handles: Entering/editing rich text using ckeditor","ref":"extension-bonfire_editor_ck.html"},{"type":"extras","title":"Bonfire.Editor.Ck - Handy commands","doc":"","ref":"extension-bonfire_editor_ck.html#handy-commands"},{"type":"extras","title":"Bonfire.Editor.Ck - Copyright and License","doc":"Copyright (c) 2020 Bonfire This program is free software: you can redistribute it and/or modify it under the terms of the MIT License. You should have received a copy of the License along with this program.","ref":"extension-bonfire_editor_ck.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Editor.Quill","doc":"A rich text editor for Bonfire based on https://quilljs.com","ref":"extension-bonfire_editor_quill.html"},{"type":"extras","title":"Bonfire.Editor.Quill - Copyright and License","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_editor_quill.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Mailer","doc":"An library for Bonfire that contains: Sending email (using Bamboo ) Checking hypothetical email or domain validity","ref":"extension-bonfire_mailer.html"},{"type":"extras","title":"Bonfire.Mailer - Handy commands","doc":"","ref":"extension-bonfire_mailer.html#handy-commands"},{"type":"extras","title":"Bonfire.Mailer - Copyright and License","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_mailer.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Epics","doc":"Bonfire.Epics is a way of structuring tasks that is extension and customisability friendly.","ref":"extension-bonfire_epics.html"},{"type":"extras","title":"Bonfire.Epics - Copyright and License","doc":"Copyright (c) 2022 Bonfire Contributors Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"extension-bonfire_epics.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Ecto","doc":"Bonfire.Ecto contains Ecto transactional support as acts for Bonfire.Epics","ref":"extension-bonfire_ecto.html"},{"type":"extras","title":"Bonfire.Search","doc":"An extension for Bonfire to handle: Search indexing Ultra-fast search LiveView search UI You can implement adapters for your prefered search backend. Currently adapters are included for: Meili Search","ref":"extension-bonfire_search.html"},{"type":"extras","title":"Bonfire.Search - Development &amp; Deployment Documentation","doc":"This extension is meant to be used inside of a Bonfire app, so please refer to the main repo at: https://github.com/bonfire-networks/bonfire-app","ref":"extension-bonfire_search.html#development-deployment-documentation"},{"type":"extras","title":"Bonfire.Search - Copyright and License","doc":"Copyright (c) 2020 Bonfire Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_search.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Data.Assort","doc":"Various assorted database schemas for: Ranked linked items TODO: move schemas from bonfire_classify and bonfire_tag here?","ref":"extension-bonfire_data_assort.html"},{"type":"extras","title":"Bonfire.Data.Assort - Copyright and License","doc":"Copyright ( c ) 2020 Bonfire Contributors This Source Code Form is subject to the terms of the Mozilla Public License , v . 2.0 . If a copy of the MPL was not distributed with this file , You can obtain one at http :// mozilla . org / MPL / 2.0 / .","ref":"extension-bonfire_data_assort.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Files","doc":"File management for bonfire apps. Bonfire Files wraps waffle a file management library, adding support for media type checking using magic bytes inside of files, along with creating a pointable table for storage of file data.","ref":"extension-bonfire_files.html"},{"type":"extras","title":"Bonfire.Files - Configuration","doc":"","ref":"extension-bonfire_files.html#configuration"},{"type":"extras","title":"Bonfire.Files - TODO's","doc":"Generate docs More tests","ref":"extension-bonfire_files.html#todo-s"},{"type":"extras","title":"Bonfire.Boundaries","doc":"An extension for Bonfire that handles: Circles Verbs Accesses ACLs Grants Queries with healthy boundaries","ref":"extension-bonfire_boundaries.html"},{"type":"extras","title":"Bonfire.Boundaries - Handy commands","doc":"","ref":"extension-bonfire_boundaries.html#handy-commands"},{"type":"extras","title":"Bonfire.Boundaries - Copyright and License","doc":"Copyright (c) 2020 Bonfire Contributors This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/ .","ref":"extension-bonfire_boundaries.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Federate.ActivityPub","doc":"An extension for Bonfire that handles: Extensible/configurable tools for translating Bonfire data to/from ActivityStreams Bonfire Adapter for the ActivityPub federation library","ref":"extension-bonfire_federate_activitypub.html"},{"type":"extras","title":"Bonfire.Federate.ActivityPub - Testing","doc":"There are unit tests both in this repo, and in the activity_pub lib, but they can't cover every possible federation case, so manual testing with e.g. curl -H &quot;Accept: application/activity+json&quot; -v &quot;http://localhost:4001/pub/actors/my_username&quot; | jq '.' and by trying out federation flows between instances of Bonfire and other ActivityPub implementation is a must.","ref":"extension-bonfire_federate_activitypub.html#testing"},{"type":"extras","title":"Bonfire.Federate.ActivityPub - Handy commands","doc":"","ref":"extension-bonfire_federate_activitypub.html#handy-commands"},{"type":"extras","title":"Bonfire.Federate.ActivityPub - Copyright and License","doc":"Copyright (c) 2020 Bonfire Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_federate_activitypub.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Invite.Links","doc":"An extension for Bonfire to generate invite links","ref":"extension-bonfire_invite_links.html"},{"type":"extras","title":"Bonfire.Invite.Links - Handy commands","doc":"","ref":"extension-bonfire_invite_links.html#handy-commands"},{"type":"extras","title":"Bonfire.Invite.Links - Copyright and License","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_invite_links.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Data.AccessControl","doc":"See also https://bonfirenetworks.org/docs/boundaries/ for more docs (TODO: merge/deduplicate) Bonfire has a slightly unusual way of dealing with access control. It's not so different from role-based access control (RBAC), but we do a few things differently and there are quite a lot of pieces to get your head around. We'll start gently. Bonfire has a Verb table containing strings like &quot;comment&quot; and &quot;delete&quot; that represent actions a user might wish to perform. They are a basic part of the bonfire vocabulary within the codebase. A permission is a decision about whether the action may be performed it not. There are 3 decisions we support: true (permitted) false (explicitly not permitted, never permit) null / nil (not explicitly permitted) It may seem odd to have the null here. We will come back to this after we've introduced a few more pieces of the puzzle. A boundary is simply an unordered list or group of permissions. Each permission may only occur once. Any permissions that are not specified are assumed to be null . This loosely corresponds to a role in RBAC. A Grant links a subject (user or circle) to a boundary. It determines what permissions are considered for a given subject. A Acl is simply an unordered list or group of Grant s. Subjects may appear more than once in a list (with different boundaries) and the permissions will be merged according to the following truth table: input input output false false false false true false false null false true false false true true true true null true null false false null true true null null null Or in words: take the highest value where false &gt; true &gt; null . At the end of this combination process, the user is only permitted if the result is true. You can see this as requiring an affirmative answer to permit something, while always allowing you a bigger no to deny when things are combined. Null values are additionally not required to be present in the database, saving us resources. That is to say we default to null if there is no relevant record. Finally, an object is linked to one or more Acl s by the Controlled multimixin, which pairs an object ID with an ACL ID. Because it is a multimixin, a given object can have multiple ACLs applied. In the case of overlap, permissions are combined in the manner described earlier.","ref":"extension-bonfire_data_access_control.html"},{"type":"extras","title":"Bonfire.Data.AccessControl - Copyright and License","doc":"Copyright (c) 2020 James Laver, bonfire_data_access_control Contributors This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/ .","ref":"extension-bonfire_data_access_control.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Data.ActivityPub","doc":"Actor schema.","ref":"extension-bonfire_data_activity_pub.html"},{"type":"extras","title":"Bonfire.Data.ActivityPub - Copyright and License","doc":"Copyright ( c ) 2020 James Laver , bonfire_data_activity_pub Contributors This Source Code Form is subject to the terms of the Mozilla Public License , v . 2.0 . If a copy of the MPL was not distributed with this file , You can obtain one at http :// mozilla . org / MPL / 2.0 / .","ref":"extension-bonfire_data_activity_pub.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Data.Identity","doc":"Schemas for accounts, users, etc.","ref":"extension-bonfire_data_identity.html"},{"type":"extras","title":"Bonfire.Data.Identity - Copyright and License","doc":"Copyright ( c ) 2020 James Laver , bonfire_data_identity Contributors This Source Code Form is subject to the terms of the Mozilla Public License , v . 2.0 . If a copy of the MPL was not distributed with this file , You can obtain one at http :// mozilla . org / MPL / 2.0 / .","ref":"extension-bonfire_data_identity.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Data.Social","doc":"Schemas for social activities, posts, feeds, etc","ref":"extension-bonfire_data_social.html"},{"type":"extras","title":"Bonfire.Data.Social - Copyright and License","doc":"Copyright ( c ) 2020 James Laver , bonfire_data_social Contributors This Source Code Form is subject to the terms of the Mozilla Public License , v . 2.0 . If a copy of the MPL was not distributed with this file , You can obtain one at http :// mozilla . org / MPL / 2.0 / .","ref":"extension-bonfire_data_social.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Me","doc":"An extension for Bonfire that handles: Account creation Email verification Authentication User/Profile creation User/Profile switching User Profile Settings","ref":"extension-bonfire_me.html"},{"type":"extras","title":"Bonfire.Me - Handy commands","doc":"","ref":"extension-bonfire_me.html#handy-commands"},{"type":"extras","title":"Bonfire.Me - Copyright and License","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_me.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Social","doc":"An extension for Bonfire that handles: Posting Following Feeds / Timelines Discussions Boosting Liking Flagging etc","ref":"extension-bonfire_social.html"},{"type":"extras","title":"Bonfire.Social - Handy commands","doc":"","ref":"extension-bonfire_social.html#handy-commands"},{"type":"extras","title":"Bonfire.Social - Copyright and License","doc":"Copyright (c) 2020 Bonfire Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_social.html#copyright-and-license"},{"type":"extras","title":"Bonfire.UI.Common","doc":"Bonfire.UI.Common is an extension for Bonfire that contains: Many common functions for web UIs in Bonfire extensions Common and generic re-usable components Etc","ref":"extension-bonfire_ui_common.html"},{"type":"extras","title":"Bonfire.UI.Common - Handy commands","doc":"","ref":"extension-bonfire_ui_common.html#handy-commands"},{"type":"extras","title":"Bonfire.UI.Common - Copyright and License","doc":"Copyright (c) 2022 Bonfire Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_ui_common.html#copyright-and-license"},{"type":"extras","title":"Bonfire.UI.Social","doc":"Bonfire.UI.Social is an extension that includes the main User Interfaces (routes, pages and components) required to have a fully working federated social network app. This extension is meant to be used by other extensions like Bonfire.Social , which provides logic for the UI to work with/ You can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment Bonfire.UI.Social.Routes from your top-level Router to use your custom routes and views instead). Stack So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means: Phoenix Elixir TailwindCSS Alpine.js LiveView Surface Surface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs. Scaffolding The relevant folders are: Components : Surface stateless and stateful components. Views : The main pages that are rendered when navigating to a specific route Test : All the unit tests for the specific module. Other resources A blog post that introduces the concept of themeable bonfire apps","ref":"extension-bonfire_ui_social.html"},{"type":"extras","title":"Bonfire.UI.Social - Copyright and License","doc":"Copyright (c) 2020 Bonfire, and CommonsPub Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_ui_social.html#copyright-and-license"},{"type":"extras","title":"Bonfire.UI.Me","doc":"Bonfire.UI.Me is an extension that includes the main User Interfaces (routes, pages and components) for functionality around accounts, users, profiles, authentication, etc. This extension is meant to be used by other extensions like Bonfire.Me , which provide logic for the UI to work with. You can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment Bonfire.UI.Me.Routes from your top-level Router to use your custom routes and views instead). Stack So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means: Phoenix Elixir TailwindCSS Alpine.js LiveView Surface Surface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs. Scaffolding The relevant folders are: Components : Surface stateless and stateful components. Views : The main pages that are rendered when navigating to a specific route Test : All the unit tests for the specific module. Other resources A blog post that introduces the concept of themeable bonfire apps","ref":"extension-bonfire_ui_me.html"},{"type":"extras","title":"Bonfire.UI.Me - Copyright and License","doc":"Copyright (c) 2022 Bonfire Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_ui_me.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Data.SharedUser","doc":"","ref":"extension-bonfire_data_shared_user.html"},{"type":"extras","title":"Bonfire.Data.SharedUser - Copyright and License","doc":"Copyright ( c ) 2020 Bonfire Contributors This Source Code Form is subject to the terms of the Mozilla Public License , v . 2.0 . If a copy of the MPL was not distributed with this file , You can obtain one at http :// mozilla . org / MPL / 2.0 / .","ref":"extension-bonfire_data_shared_user.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Tag","doc":"An extension for Bonfire that handles: Tagging posts or other things (i.e. with a Category from Bonfire.Classify or a location from Bonfire.Geolocate) @ mentions (WIP) Hashtags (WIP)","ref":"extension-bonfire_tag.html"},{"type":"extras","title":"Bonfire.Tag - Handy commands","doc":"","ref":"extension-bonfire_tag.html#handy-commands"},{"type":"extras","title":"Bonfire.Tag - Copyright and License","doc":"Copyright (c) 2020 Bonfire, Haha Academy, and CommonsPub Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_tag.html#copyright-and-license"},{"type":"extras","title":"Arrows","doc":"A handful of (mostly) arrow macros.","ref":"extension-arrows.html"},{"type":"extras","title":"Arrows - Installation","doc":"The package can be installed by adding arrows to your list of dependencies in mix.exs : --&gt; def deps do [ { :arrows , &quot;~&gt; 0.1.0&quot; } ] end Or via git: def deps do [ { :arrows , git : &quot;https://github.com/bonfire-networks/arrows&quot; , branch : &quot;main&quot; } ] end","ref":"extension-arrows.html#installation"},{"type":"extras","title":"Arrows - Documentation","doc":"The Elixir |&gt; (&quot;pipe&quot;) operator is one of the things that seems to get people excited about elixir. Probably in part because you then don't have to keep coming up with function names. Unfortunately it's kind of limiting. The moment you need to pipe a parameter into a position that isn't the first one, it breaks down and you have to drop out of the pipeline format or write a secondary function to handle it. Not any more! By simply inserting ... where you would like the value to be inserted, Arrows will override where it is placed. This allows you to keep on piping while accommodating that function with the annoying argument order. Arrows was inspired by an existing library . Here is part of the test suite in lieu of examples: defmodule ArrowsTest do use ExUnit.Case use Arrows def double ( x ) , do : x * 2 def double_fst ( x , _ ) , do : x * 2 def double_snd ( _ , x ) , do : x * 2 def add_snd_thd ( _ , x , y ) , do : x + y test &quot;|&gt;&quot; do assert 4 == ( 2 |&gt; double ) assert 4 == ( 2 |&gt; double ( ) ) assert 4 == ( 2 |&gt; double ( ... ) ) assert 8 == ( 2 |&gt; double ( double ( ... ) ) ) assert 4 == ( 2 |&gt; double_fst ( 1 ) ) assert 4 == ( 2 |&gt; double_fst ( ... , 1 ) ) assert 8 == ( 2 |&gt; double_fst ( double ( ... ) , 1 ) ) assert 4 == ( 2 |&gt; double_snd ( 1 , ... ) ) assert 8 == ( 2 |&gt; double_snd ( 1 , double ( ... ) ) ) assert 3 == ( 2 |&gt; add_snd_thd ( 1 , ... , 1 ) ) assert 4 == ( 2 |&gt; add_snd_thd ( 1 , ... , ... ) ) assert 6 == ( 2 |&gt; add_snd_thd ( 1 , ... , double ( ... ) ) ) for x &lt;- [ :yes , 2 , nil , false ] do assert { :ok , x } == ( x |&gt; { :ok , ... } ) end end end A few little extra features you might notice here: You can move the parameter into a subexpression, as in 2 |&gt; double_fst(double(...), 1) where double will be called before the parameter is passed to double_fst . You can use ... multiple times, substituting it in multiple places. The right hand side need not even be a function call, you can use any expression with ... . Ok-pipe Arrows also provides an ok-pipe operator, ~&gt; , which only pipes into the next function if the result from the last one was considered a success. It's inspired by OK , but we have chosen to do things slightly differently so it better fits with our regular pipe. input result :----------------------- :-------------- {:ok, x} fun.(x) {:error, e} {:error, e} nil nil x when not is_nil(x) fun.(x) In the case of a function returning an ok/error tuple being on the left hand side, this is straightforward to determine. In the event of {:ok, x} , x will be passed into the right hand side to call. In the event of {:error, x} , the result will be {:error, x} . We also deal with a lot of functions that indicate failure by returning nil. ~&gt; tries to 'do what I mean' for both of these so you can have one pipe operator to rule them all. If nil is a valid result, you must thus be sure to wrap it in an ok tuple when it occurs on the left hand side of ~&gt; . |&gt; and ~&gt; compose in the way you'd expect; i.e. a ~&gt; receiving an error tuple or nil will stop executing the rest of the chain of (mixed) pipes. Documentation can be found at https://hexdocs.pm/arrows .","ref":"extension-arrows.html#documentation"},{"type":"extras","title":"ActivityPub","doc":"ActivityPub Library for elixir. WORK IN PROGRESS, TESTING FEDERATION WITH DIFFERENT IMPLEMENTATIONS IS UNDERWAY","ref":"extension-activity_pub.html"},{"type":"extras","title":"ActivityPub - Installation","doc":"Add this library to your dependencies in mix.exs defp deps do [ ... ] { :activity_pub , git : &quot;https://github.com/bonfire-networks/activity_pub.git&quot; , branch : &quot;stable&quot; } # branch can &quot;stable&quot;, or &quot;develop&quot; for the bleeding edge end Create an adapter module. To start, one created at lib/my_app/adapter.ex might look like defmodule MyApp.Adapter do @moduledoc &quot;&quot;&quot; Adapter functions delegated from the `ActivityPub` Library &quot;&quot;&quot; @behaviour ActivityPub.Federator.Adapter end Note that, due to the defined @behavior , Elixir will warn you that the required functions base_url/0 get_actor_by_id/1 get_actor_by_username/1 get_follower_local_ids/1 get_following_local_ids/1 get_redirect_url/1 handle_activity/1 maybe_create_remote_actor/1 maybe_publish_object/1 update_local_actor/2 update_remote_actor/1 have not yet been implemented though you will be able to start your app. Defining these allows ActivityPub to handle ActivityPub HTTP and database calls and operations. An example of an implemented adaptor can be found here . Then set it in config config :activity_pub , :adapter , MyApp.Adapter Set your application repo in config config :activity_pub , :repo , MyApp.Repo Create a new ecto migration and call ActivityPub.Migration.up/0 from it Inject AP routes to your router by adding use ActivityPub.Web.Router to your app's router module Copy the default AP config to your app's confix.exs config :activity_pub , :mrf_simple , media_removal : [ ] , media_nsfw : [ ] , report_removal : [ ] , accept : [ ] , avatar_removal : [ ] , banner_removal : [ ] config :activity_pub , :instance , hostname : &quot;example.com&quot; , federation_publisher_modules : [ ActivityPub.Federator.APPublisher ] , federation_reachability_timeout_days : 7 , federating : true , rewrite_policy : [ ] config :activity_pub , :http , proxy_url : nil , user_agent : &quot;Your app name&quot; , send_user_agent : true , adapter : [ ssl_options : [ # Workaround for remote server certificate chain issues partial_chain : &amp; :hackney_connect . partial_chain / 1 , # We don&#39;t support TLS v1.3 yet versions : [ :tlsv1 , :&quot;tlsv1.1&quot; , :&quot;tlsv1.2&quot; ] ] ] Change the hostname value in the instance config block to your instance's hostname If you don't already have Oban set up, follow the Oban installation intructions and add the AP queues: config :my_app , Oban , queues : [ federator_incoming : 50 , federator_outgoing : 50 , remote_fetcher : 20 ] Now you should be able to compile and run your app and move over to integration.","ref":"extension-activity_pub.html#installation"},{"type":"extras","title":"Paginator","doc":"Paginator implements cursor-based pagination for Elixir Ecto . Documentation","ref":"extension-paginator.html"},{"type":"extras","title":"Paginator - Why?","doc":"There are several ways to implement pagination in a project and they all have pros and cons depending on your situation. Limit-offset This is the easiest method to use and implement: you just have to set LIMIT and OFFSET on your queries and the database will return records based on this two parameters. Unfortunately, it has two major drawbacks: Inconsistent results: if the dataset changes while you are querying, the results in the page will shift and your user might end seeing records they have already seen and missing new ones. Inefficiency: OFFSET N instructs the database to skip the first N results of a query. However, the database must still fetch these rows from disk and order them before it can returns the ones requested. If the dataset you are querying is large this will result in significant slowdowns. Cursor-based (a.k.a keyset pagination) This method relies on opaque cursor to figure out where to start selecting records. It is more performant than LIMIT-OFFSET because it can filter records without traversing all of them. It's also consistent, any insertions/deletions before the current page will leave results unaffected. It has some limitations though: for instance you can't jump directly to a specific page. This may not be an issue for an API or if you use infinite scrolling on your website. Learn more http://use-the-index-luke.com/no-offset http://use-the-index-luke.com/sql/partial-results/fetch-next-page https://www.citusdata.com/blog/2016/03/30/five-ways-to-paginate/ https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines","ref":"extension-paginator.html#why"},{"type":"extras","title":"Paginator - Getting started","doc":"defmodule MyApp.Repo do use Ecto.Repo , otp_app : :my_app , adapter : Ecto.Adapters.Postgres use Paginator end query = from ( p in Post , order_by : [ asc : p . inserted_at , asc : p . id ] ) page = MyApp.Repo . paginate ( query , cursor_fields : [ :inserted_at , :id ] , limit : 50 ) # `page.edges` contains all the entries for this page. # `page.page_info` contains the meta-data associated with this page (cursors, limit, total count)","ref":"extension-paginator.html#getting-started"},{"type":"extras","title":"Paginator - Install","doc":"Add paginator to your list of dependencies in mix.exs : def deps do [ { :paginator , &quot;~&gt; 1.0.4&quot; } ] end","ref":"extension-paginator.html#install"},{"type":"extras","title":"Paginator - Usage","doc":"Add Paginator to your repo. defmodule MyApp.Repo do use Ecto.Repo , otp_app : :my_app , adapter : Ecto.Adapters.Postgres use Paginator end Use the paginate function to paginate your queries. query = from ( p in Post , order_by : [ asc : p . inserted_at , asc : p . id ] ) # return the first 50 posts %{ edges : edges , page_info : page_info } = Repo . paginate ( query , cursor_fields : [ :inserted_at , :id ] , limit : 50 ) # assign the `after` cursor to a variable cursor_after = page_info . end_cursor # return the next 50 posts %{ edges : edges , page_info : page_info } = Repo . paginate ( query , after : cursor_after , cursor_fields : [ { :inserted_at , :asc } , { :id , :asc } ] , limit : 50 ) # assign the `before` cursor to a variable cursor_before = page_info . start_cursor # return the previous 50 posts (if no post was created in between it should be the same list as in our first call to `paginate`) %{ edges : edges , page_info : page_info } = Repo . paginate ( query , before : cursor_before , cursor_fields : [ :inserted_at , :id ] , limit : 50 ) # return total count # NOTE: this will issue a separate `SELECT COUNT(*) FROM table` query to the database. %{ edges : edges , page_info : page_info } = Repo . paginate ( query , include_total_count : true , cursor_fields : [ :inserted_at , :id ] , limit : 50 ) IO . puts &quot;total count: \#{ page_info . total_count } &quot;","ref":"extension-paginator.html#usage"},{"type":"extras","title":"Paginator - Security Considerations","doc":"Repo.paginate/4 will throw an ArgumentError should it detect an executable term in the cursor parameters passed to it ( before , after ). This is done to protect you from potential side-effects of malicious user input, see paginator_test.exs .","ref":"extension-paginator.html#security-considerations"},{"type":"extras","title":"Paginator - Indexes","doc":"If you want to reap all the benefits of this method it is better that you create indexes on the columns you are using as cursor fields. Example # If your cursor fields are: [:inserted_at, :id] # Add the following in a migration create index ( &quot;posts&quot; , [ :inserted_at , :id ] )","ref":"extension-paginator.html#indexes"},{"type":"extras","title":"Paginator - Caveats","doc":"This method requires a deterministic sort order. If the columns you are currently using for sorting don't match that definition, just add any unique column and extend your index accordingly. You need to add order_by clauses yourself before passing your query to paginate/2 . In the future we might do that for you automatically based on the fields specified in :cursor_fields . There is an outstanding issue where Postgrex fails to properly builds the query if it includes custom PostgreSQL types. This library has only be tested with PostgreSQL.","ref":"extension-paginator.html#caveats"},{"type":"extras","title":"Paginator - Documentation","doc":"Documentation is written into the library, you will find it in the source code, accessible from iex and of course, it all gets published to hexdocs .","ref":"extension-paginator.html#documentation"},{"type":"extras","title":"Paginator - Contributing","doc":"Running tests Clone the repo and fetch its dependencies: $ git clone https://github.com/duffelhq/paginator.git $ cd paginator $ mix deps.get $ mix test Building docs $ mix docs","ref":"extension-paginator.html#contributing"},{"type":"extras","title":"Paginator - LICENSE","doc":"See LICENSE","ref":"extension-paginator.html#license"},{"type":"extras","title":"Voodoo","doc":"Voodoo is a drop-in replacement for Phoenix path helpers which is more convenient to use.","ref":"extension-voodoo.html"},{"type":"extras","title":"EctoSparkles","doc":"Some helpers to sparkle on top of Ecto join_preload reusable_join EctoSparkles.Changesets with various changeset helpers and validators and EctoSparkles.Changesets.Errors to handle changeset errors EctoSparkles.Migrator to run migrations, rollbacks, etc in a release EctoSparkles.Log to log slow or possible N+1 queries with telemetry (showing stacktraces) NOTE: you need to put something like config :ecto_sparkles, :otp_app, :your_otp_app_name in your app's config.","ref":"extension-ecto_sparkles.html"},{"type":"extras","title":"EctoSparkles - join_preload Documentation","doc":"A macro which tells Ecto to perform a join and preload of (up to 5 nested levels of) associations. By default, Ecto preloads associations using a separate query for each association, which can degrade performance. You could make it run faster by using a combination of join/preload, but that requires a bit of boilerplate (see examples below). Examples using just Ecto query |&gt; join ( :left , [ o , activity : activity ] , assoc ( :object ) , as : :object ) |&gt; preload ( [ l , activity : activity , object : object ] , activity : { activity , [ object : object ] } ) Ecto requires calling Query.join/4 , Query.assoc/3 and Query.preload/2 . Here's another example: Invoice |&gt; join ( :left , [ i ] , assoc ( i , :customer ) , as : :customer ) |&gt; join ( :left , [ i ] , assoc ( i , :lines ) , as : :lines ) |&gt; preload ( [ lines : v , customers : c ] , lines : v , customer : c ) |&gt; Repo . all ( )","ref":"extension-ecto_sparkles.html#join_preload-documentation"},{"type":"extras","title":"EctoSparkles - Example using join_preload","doc":"With join_preload , you can accomplish this with just one line of code. query |&gt; join_preload ( [ :activity , :object ] ) Invoice |&gt; join_preload ( :customer ) |&gt; join_preload ( :lines ) |&gt; Repo . all ( ) As a bonus, join_preload automatically makes use of reusable_join so calling it multiple times for the same association has no ill effects.","ref":"extension-ecto_sparkles.html#example-using-join_preload"},{"type":"extras","title":"EctoSparkles - reusable_join Documentation","doc":"A macro is similar to Ecto.Query.join/{4,5} , but can be called multiple times with the same alias. Note that only the first join operation is performed, the subsequent ones that use the same alias are just ignored. Also note that because of this behaviour, its mandatory to specify an alias when using this function. This is helpful when you need to perform a join while building queries one filter at a time, because the same filter could be used multiple times or you could have multiple filters that require the same join, which poses a problem with how the filter/3 callback work, as you need to return a dynamic with the filtering, which means that the join must have an alias, and by default Ecto raises an error when you add multiple joins with the same alias. To solve this, it is recommended to use this macro instead of the default Ecto.Query.join/{4,5} , in which case there will be only one join in the query that can be reused by multiple filters. Creating reusable joins query |&gt; reusable_join ( :left , [ t1 ] , t2 in &quot;other_table&quot; , on : t1 . id == t2 . id , as : :other_a ) |&gt; reusable_join ( :left , [ t1 ] , t2 in &quot;other_table&quot; , on : t1 . id == t2 . id , as : :other_b )","ref":"extension-ecto_sparkles.html#reusable_join-documentation"},{"type":"extras","title":"EctoSparkles - Copyright","doc":"Copyright (c) 2021 Bonfire developers Copyright (c) 2020 Up Learn Copyright (c) 2019 Joshua Nussbaum join_preload was originally forked from Ecto.Preloader , licensed under WTFPL) reusable_join was originally forked from QueryElf , licensed under Apache License Version 2.0","ref":"extension-ecto_sparkles.html#copyright"},{"type":"extras","title":"Flexto","doc":"hexdocs Flexto provides configuration-driven Ecto schema extensibility","ref":"extension-flexto.html"},{"type":"extras","title":"Flexto - Usage","doc":"Example Schema: defmodule My.Schema do use Ecto.Schema import Flexto , only : [ flex_schema : 1 ] schema &quot;my_table&quot; do field :name , :string # just normal schema things flex_schema ( :my_app ) # boom! give me the stuff end end Example configuration config :my_app , My.Schema , belongs_to : [ foo : Foo , # belongs_to :foo, Foo bar : { Bar , type : :integer } , # belongs_to :bar, Bar, type: :integer ] , field : [ foo : :string , # field :foo, :string bar : { :integer , default : 4 } , # field :foo, :integer, default: 4 ] , has_one : [ foo : Foo , # has_one :foo, Foo bar : { Bar , foreign_key : :the_bar_id } , # has_one :bar, Bar, foreign_key: :the_bar_id ] has_many : [ foo : Foo , # has_many :foo, Foo bar : { Bar , foreign_key : :the_bar_id } , # has_many :bar, Bar, foreign_key: :the_bar_id ] many_to_many : [ foo : Foo , # many_to_many :foo, Foo bar : { Bar , join_through : FooBar } , # many_to_many :bar, Bar, :join_through: FooBar ] This one won't work very well because we define foo and bar 5 times each, but I think you get the point. Reading of configuration is done during compile time. The relations will be baked in during compilation, thus: Do not expect this to work in runtime config. You will need to rebuild all dependencies which use this macro when you change their configuration.","ref":"extension-flexto.html#usage"},{"type":"extras","title":"Flexto - Copyright and License","doc":"Copyright (c) 2020 Flexto Contributors Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"extension-flexto.html#copyright-and-license"},{"type":"extras","title":"Pointers","doc":"hexdocs Ecto's missing universal foreign key One foreign key to rule them all and in the darkness, bind them. -- Gandalf, paraphrased. A means of foreign keying many tables in one field. Designed for highly interlinked data in highly dynamic schemata where tracking all the foreign keys is neither desired nor practical. Note: a universal foreign key is actually a hard problem. Many approaches are on offer with a variety of tradeoffs. You should carefully consider a variety of approaches rather than just blindly adopting the one that fitted our project's needs the best!","ref":"extension-pointers.html"},{"type":"extras","title":"Pointers - Background","doc":"A Table is a record of a table that may be linked to by a pointer. A Pointer is a pointer id and a table id. With these two ingredients, we can construct a means of pointing to any table that has a Table entry. Pointer and Table IDs are both Pointers.ULID , a UUID-like type that combines a millisecond-precision timestamp and some randomness to reduce the likelihood of a clash. It naturally sorts both in binary and text form by time and as far as postgres is concerned, it's a UUID.","ref":"extension-pointers.html#background"},{"type":"extras","title":"Pointers - Installation","doc":"Aside from the hex dependency, you will also need to write a simple migration to set up the database before you can start writing your regular migrations: defmodule MyApp.Repo.Migrations.InitPointers do @moduledoc false use Ecto.Migration import Pointers.Migration def up ( ) , do : inits ( :up ) def down ( ) , do : inits ( :down ) defp inits ( dir ) do init_pointers_ulid_extra ( dir ) # this one is optional but recommended init_pointers ( dir ) # this one is not optional end end","ref":"extension-pointers.html#installation"},{"type":"extras","title":"Pointers - Defining a Pointable Type","doc":"Pointable tables require a unique sentinel ULID to identify them. These must be 26 characters long and in the alphabet of Crockford's Base32 . They should be easy to identify in a printout and might be silly. There is a helper function, synthesise!/1 in Pointers.ULID to assist with this process - give it a 26-character long binary of ascii alphanumerics and it will give you the closest ULID that matches back. Let's look at a simple schema: defmodule MyApp.Greeting do use Pointers.Pointable , otp_app : :my_app , source : &quot;myapp_greeting&quot; , table_id : &quot;GREET1NGSFR0MD0CEXAMP1E000&quot; pointable_schema do field :greeting , :string end end To declare a pointable schema, we start by using Pointers.Pointable , providing the name of our otp application, the source table's name in the database and our chosen sentinel ULID. We then call pointable_schema and define any fields we wish to put directly in the table. For the most part, pointable_schema is like Ecto's schema macro, except you do not provide the table name and let it handle the primary key. If for some reason you wished to turn autogeneration off, you could pass autogenerate: false to the options provided when using Pointers.Pointable . Now let's define the migration for our schema: defmodule MyApp.Repo.Migrations.Greeting do @moduledoc false use Ecto.Migration import Pointers.Migration def up ( ) do create_pointable_table ( :greeting , &quot;GREET1NGSFR0MD0CEXAMP1E000&quot; ) do add :greeting , :text , null : false end end def down ( ) do drop_pointable_table ( :greeting , &quot;GREET1NGSFR0MD0CEXAMP1E000&quot; ) end end As you can see, it's pretty similar to defining a regular migration, except you use create_pointable_table and drop_pointable_table . Notice that our sentinel ULID makes an appearance again here. It's very important that these match what we declared in the schema.","ref":"extension-pointers.html#defining-a-pointable-type"},{"type":"extras","title":"Pointers - Referencing Pointers","doc":"Ecto does not know anything about our scheme, so unless we specifically want something to reference one of the pointed tables, we typically belongs_to with Pointers.Pointer . The table in which we do this does not itself need to be pointable. defmodule MyApp.Foo do use Ecto.Schema alias Pointers.Pointer # regular ecto table, not pointable! schema &quot;hello&quot; do belongs_to :pointer , Pointer # who knows what it points to? end end You may choose to reference a specific schema rather than Pointer if it will only point to a single table. If you do this, you must ensure that the referenced record exists in that table in the normal way. There may be some performance benefit, we didn't benchmark it. The migration is slightly more complex, we have to decide what type of a pointer it is. Pointers come in three categories: A strong pointer is not nullable and is deleted when the object it points to is deleted. A weak pointer is nullable and is nilified when the object it points to is deleted. An unbreakable pointer will raise when you attempt to delete the object it points to. Type Nullable? On Delete Strong No Cascade Weak Yes Set Null Unbreakable No Raise In this case we will use a strong pointer, because we want it to be deleted if the pointed object is deleted. defmodule MyApp.Repo.Migrations.Hello do @moduledoc false use Ecto.Migration import Pointers.Migration def change ( ) do create_if_not_exists table ( :hello ) do add :pointer , strong_pointer ( ) , null : false add :greeting , :text , null : false end end end If you are pointing to a specific table instead of pointer, strong_pointer/1 allows you to pass the name of that module ( strong_pointer/0 calls this with Pointers.Pointer ).","ref":"extension-pointers.html#referencing-pointers"},{"type":"extras","title":"Pointers - Dereferencing Pointers","doc":"It is common that even though you have a universal foreign key, you will want to issue different queries based upon the type that is being pointed to. For this reason, it is up to you to decide how to perform an onward query. Pointers.schema/1 turns a Pointer into an Ecto schema module name you can switch against. Pointers.plan breaks down a list of Pointers into a map of ids keyed by schema module. It is handy to define some functions in your (non-library) application that can load any type of pointer in given contexts.","ref":"extension-pointers.html#dereferencing-pointers"},{"type":"extras","title":"Pointers - Querying Pointers","doc":"Since Pointer has a table, you can use its table_id field to filter by pointed type. Pointers.Tables.id!/1 (or ids!/1 for a list) can be used to obtain the IDs for a table or tables. Then you run into another problem, that even though you know all of the tables you're working with will have a certain field, you need to know which table they are to work with them! The solution to this is what we are calling 'mixin tables' for convenience. A mixin table has a Pointer primary key along with any other fields you wish to store in this mixin. By moving fields out to mixin tables, you gain knowledge of the table name to which you need to join. An example mixin schema: defmodule My.Creator do use Pointers.Mixin , otp_app : :my_app , source : &quot;creator&quot; mixin_schema do belongs_to :creator , My.User end end Mixin tables are not themselves pointable, so there is no need to specify a table id as when defining a pointable schema. The migration for this is slightly more complicated: defmodule My.Creator.Migration do import Ecto.Migration import Pointers.Migration defp creator_table ( ) , do : My.Creator . __schema__ ( :source ) defp user_table ( ) , do : My.User . __schema__ ( :source ) def migrate_creator ( index_opts \\\\ [ ] ) , do : migrate_creator ( index_opts , direction ( ) ) defp migrate_creator ( index_opts , :up ) do create_mixin_table ( creator_table ( ) ) do add :creator_id , strong_pointer ( user_table ( ) ) , null : false end create_if_not_exists ( unique_index ( creator_table ( ) , [ :creator_id ] , index_opts ) ) end defp migrate_creator ( index_opts , :down ) do drop_if_exists ( unique_index ( creator_table ( ) , [ :creator_id ] , index_opts ) ) drop_mixin_table ( creator_table ( ) ) end end","ref":"extension-pointers.html#querying-pointers"},{"type":"extras","title":"Pointers - Virtual pointables (&quot;virtuals&quot;)","doc":"Virtuals are a new addition in pointers 0.6.0. They behave like pointables that you have not added any fields to. We noticed it was very common in bonfire to create pointables with no extra fields just so we could use the pointers system. Virtuals are alternative for this case that requires less typing and provides a reduced overhead vs pointables. Virtuals are backed by a writable view onto the pointers table. This means that when we can save the cost of maintaining a primary key in that table and the associated disk space. In all other respects, they behave like pointables. You can have changesets over them and select and insert as usual.","ref":"extension-pointers.html#virtual-pointables-virtuals"},{"type":"extras","title":"Pointers - Elixir-based logic","doc":"The practical result of pointers is that it pushes a certain amount of validation and consistency logic back into elixir land. It is therefore your elixir code's responsibility to ensure that data is inserted into the appropriate mixin tables when inserting a pointable object and to manage deletions as appropriate. When assembling queries with mixin tables, pay careful attention to the type of join you are performing. An inner join is explicitly asking not to be shown objects that do not have a record for that mixin. You quite possibly wanted to left join.","ref":"extension-pointers.html#elixir-based-logic"},{"type":"extras","title":"Pointers - Configuration and overrides","doc":"Every pointable or mixin schema is overrideable with configuration during compilation (this is why using them requires an :otp_app to be specified). For example, we could override Pointers.Table (which is a pointable table) thus: config :pointers , Pointers.Table , source : &quot;my_pointers_table&quot; The table_id is also configurable, but we don't recommend you change it. In addition, all pointable and mixin schemas permit extension with Flexto . See the Flexto docs for more information about how to extend schemas via configuration. You will probably at the very least want to insert some has_one for mixins off your pointables.","ref":"extension-pointers.html#configuration-and-overrides"},{"type":"extras","title":"Pointers - Tradeoffs","doc":"All solutions to the universal primary key problem have tradeofs. Here are what we see as the deficiencies in our approach: It forces a ULID on you. This is great for us, but not everyone. ULID exposes a timestamp with millisecond precision. If the time of creation of a resource is sensitive information for your purposes, ULIDs are not going to be suitable for you. Ecto has no knowledge of the specialty of Pointer , e.g. Repo.preload does not work and you need to specify a join condition to join through a pointer. Use our functions or add extra associations with flexto configuration. Dereferencing a list of pointers requires a select query per table type that occurs in the input set. Reliance on user attention. You have to follow the instructions correctly to make the system work at all. There is likely some performance impact from postgres not understanding the relationships between the various tables properly. It's hard to gauge and we haven't even tried. These are not likely to change. If you're going to pick this library, do so in the full knowledge of the tradeoffs it makes. Alternatives include (I'm sure you can think of others): Storing the table name in a second column alongside every foreign key. A compound datatype of id and table name. Byte/String manipulation tricks. Evil SQL hacks based upon compile time configuration. While we have our gripes with this approach, once you've gotten the hang of using it, it works out pretty well for most purposes and it's one of the simpler options to work with.","ref":"extension-pointers.html#tradeoffs"},{"type":"extras","title":"Pointers - Copyright and License","doc":"Copyright (c) 2020 pointers Contributors Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"extension-pointers.html#copyright-and-license"},{"type":"extras","title":"Pointers.ULID","doc":"hexdocs A ULID datatype and some postgres support for ULID operations ( min and max functions and aggregates) Originally forked from ecto-ulid but the internals have been replaced with a dependency on ex_ulid","ref":"extension-pointers_ulid.html"},{"type":"extras","title":"Pointers.ULID - Installation","doc":"{ :pointers_ulid , git : &quot;https://github.com/bonfire-networks/pointers_ulid&quot; , branch : &quot;main&quot; }","ref":"extension-pointers_ulid.html#installation"},{"type":"extras","title":"Pointers.ULID - Copyright and License","doc":"Copyright (c) 2018 The RealReal, Inc. Copyright (c) 2020 pointers_ulid contributors. Licensed under the terms of the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","ref":"extension-pointers_ulid.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Pages","doc":"Basic CMS","ref":"extension-bonfire_pages.html"},{"type":"extras","title":"Bonfire.Pages - Copyright and License","doc":"Copyright (c) 2020 Bonfire Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_pages.html#copyright-and-license"},{"type":"extras","title":"Bonfire.Encrypt","doc":"Experimenting with encryption for Bonfire . Not ready for use. Based on the code of Live Secret (by Jesse Stimpson, Apache License 2.0)","ref":"extension-bonfire_encrypt.html"},{"type":"extras","title":"Bonfire.Encrypt - How to use it","doc":"","ref":"extension-bonfire_encrypt.html#how-to-use-it"},{"type":"extras","title":"Bonfire.Encrypt - Copyright and License","doc":"Copyright (c) 2022 Bonfire &amp; Live Secret Contributors This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/ .","ref":"extension-bonfire_encrypt.html#copyright-and-license"},{"type":"extras","title":"Zest","doc":"A fresh approach to testing.","ref":"extension-zest.html"},{"type":"extras","title":"Zest - Usage","doc":"Installation: { :zest , &quot;~&gt; 0.1.2&quot; } Example (taken from our test suite): defmodule MyTest do use ExUnit.Case import Zest test &quot;scope fails spectacularly&quot; do scope [ this : %{ is : :a } , test : :case ] do scope [ error : :this_should_not_show ] do end scope [ the : :order , must : :be_correct ] do scope [ to : :pass ] , assert ( true == false ) end end end end Output: Zest Context : * this : %{ is : :a } * test : :case * the : :order * must : :be_correct * to : :pass 1 ) test scope fails spectacularly ( ZestTest ) test / zest_test . exs : 7 Assertion with == failed code : assert true == false left : true right : false stacktrace : ( zest 0.1 . 0 ) lib / zest . ex : 52 : Zest . in_scope / 2 ( zest 0.1 . 0 ) lib / zest . ex : 47 : anonymous fn / 1 in Zest . in_scope / 2 ( zest 0.1 . 0 ) lib / zest . ex : 113 : Zest . intercept / 2 test / zest_test . exs : 8 : ( test )","ref":"extension-zest.html#usage"},{"type":"extras","title":"Zest - Contributing","doc":"Contributions are welcome, even just doc fixes or suggestions. This project has adopted a Code of Conduct based on the Contributor Covenant. Please be nice when interacting with the community.","ref":"extension-zest.html#contributing"},{"type":"extras","title":"Zest - Copyright and License","doc":"Copyright (c) 2020 James Laver Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http :// www . apache . org / licenses / LICENSE - 2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"extension-zest.html#copyright-and-license"},{"type":"extras","title":"Grumble","doc":"A DSL for generating GraphQL queries","ref":"extension-grumble.html"},{"type":"extras","title":"Grumble - Status: beta","doc":"We use this in our tests at work to generate all the queries (because we outgrew string concatenation). I'm not sure I'd want to depend on it in production yet because it's hard to feel like it's had a proper stress testing. Needs (better) tests and documentation. Missing support for some things we don't use.","ref":"extension-grumble.html#status-beta"},{"type":"extras","title":"Grumble - Usage","doc":"Add to your deps: { :grumble , &quot;~&gt; 0.1.0&quot; } Simple example: import Grumble alias Grumble.PP IO . puts ( PP . to_string ( query ( params : [ community_id : type! ( :string ) ] , fields : [ field ( :community , args : [ community_id : var ( :community_id ) ] , fields : [ :id , :name ] ) ] ) ) ) Output: query ( $ communityId : String ! ) { community ( communityId : $ communityId ) { name id } }","ref":"extension-grumble.html#usage"},{"type":"extras","title":"Grumble - Guide","doc":"Most of the useful functions are in the Grumble module. From there you can read which arguments are understood by the relevant new function. We apologise for the poor documentation, please feel free to contribute better docs!","ref":"extension-grumble.html#guide"},{"type":"extras","title":"Grumble - Contributing","doc":"Contributions are welcome, even just doc fixes or suggestions. This project has adopted a Code of Conduct based on the Contributor Covenant. Please be nice when interacting with the community.","ref":"extension-grumble.html#contributing"},{"type":"extras","title":"Grumble - Copyright and License","doc":"Copyright (c) 2020 Grumble contributors. Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http :// www . apache . org / licenses / LICENSE - 2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"extension-grumble.html#copyright-and-license"},{"type":"extras","title":"Development guide","doc":"These instructions are for hacking on Bonfire. If you wish to deploy in production, please refer to our deployment guide instead. Hello, potential contributor! :-) This is a work in progress guide to getting up and running as a developer. Please ask questions in the issue tracker if something is not clear and we'll try to improve it. Happy hacking!","ref":"hacking.html"},{"type":"extras","title":"Development guide - Status: beta - have fun and provide feedback 🙏","doc":"Bonfire is currently beta software. While it's fun to play with it, we would not recommend running any production instances (meaning not using it for your primary fediverse identity) yet because it's not quite ready for that today.","ref":"hacking.html#status-beta-have-fun-and-provide-feedback"},{"type":"extras","title":"Development guide - Download","doc":"Either way, you need to first clone this repository and change into the directory and then do some configuration: $ git clone https://github.com/bonfire-networks/bonfire-app bonfire $ cd bonfire","ref":"hacking.html#download"},{"type":"extras","title":"Development guide - Configure","doc":"Pick a flavour Bonfire is a flexible platform that powers a variety of social networks. The first thing you have to choose is which app (or &quot;flavour&quot;) you want to hack on: classic (&quot;Bonfire Social&quot;, a basic social network that interoperates with the fediverse) community (for groups and communities) cooperation (for building cooperative economic networks) Note that at the current time, the core team are focusing most of their efforts on the classic flavour and this is where we recommend you start. You first need to install just which is a handy tool (a make alternative) to run commands defined in ./justfile . So for example if you want to run the classic flavour, with a fully-docker-managed setup (see the other options available below), run: export FLAVOUR=classic WITH_DOCKER=total You may also want to put this in the appropriate place in your system so your choice of flavour is remembered for next time (eg. ~/.bashrc or ~/.zshrc ) Then run just config to initialise some config. Configure Then edit the config (especially the secrets) for the current flavour in ./.env Option A - the entry way (fully managed via docker-compose, recommended when you're first exploring) Dependencies: Recent versions of Docker &amp; docker-compose Make sure you've set the environment variable to indicate your choice: export WITH_DOCKER=total Make sure you've edited your .env file (see above) before getting started and proceed to Hello world! Option B - the easy way (with bare-metal elixir, and docker-managed tooling, database &amp; search index, recommended for active development) Dependencies: Recent versions of Elixir (1.13+) and OTP/erlang (24+) yarn Recent versions of Docker &amp; docker-compose Make sure you've set the env to indicate your choice: export WITH_DOCKER=easy Make sure you've edited your .env file (see above) before getting started and proceed to Hello world! Option C - the partial way (with bare-metal elixir and tooling, and docker-managed database &amp; search index) Dependencies: Recent versions of Elixir (1.13+) and OTP/erlang (24+) Recent versions of Rust and Cargo yarn Recent versions of Docker &amp; docker-compose Make sure you've set the environment variable to indicate your choice: export WITH_DOCKER=partial Make sure you've edited your .env file (see above) before getting started and proceed to Hello world! Option D - the bare metal (if you don't use docker) Dependencies: Recent versions of Elixir (1.13+) and OTP/erlang (24+) Recent versions of Rust and Cargo yarn Postgres 12+ (or rather Postgis if using the bonfire_geolocate extension) Meili Search (optional) You will need to set the relevant environment variables in the .env file (see above) to match your local install of Postgres. If you want search capabilities, you'll also need to setup a Meili server and set the relevant env variables as well. Make sure you've set the environment variable to indicate your choice: export WITH_DOCKER=no and proceed to Hello world! Option E - the nix one (dev environment with Nix) Dependencies: Run a recent version of Nix or NixOS: https://nixos.org/download.html Enable Flakes: https://nixos.wiki/wiki/Flakes#Installing_flakes Install direnv through nix if you don't have the tool already: nix profile install nixpkgs#direnv and add it to your shell: https://direnv.net/docs/hook.html Clone the bonfire-app repo if you haven't already and allow direnv to use environment variables: git clone https :// github . com / bonfire - networks / bonfire - app cd ` bonfire - app ` direnv allow The tool direnv is necessary for the nix setup as the nix shell environment will use variables defined on .envrc to set itself up. Note: when you run direnv allow on the bonfire-app directory for the first time, nix will automatically fetch the dependencies for bonfire. The process will take a while as it's downloading everything needed to use the development environment. Afterwards you will be able to use just fine. Proceeding times you enter the directory, the shell with automatically set up for your use without downloading the packages again. You will need to update the db directory which is automatically created by nix the first time you initialized the shell with direnv allow . You can do so with the following steps: Update props.nix to the settings you want. Run just nix-db-init to create the database and user for postgres defined on props.nix . Modify the .env file to comment out all POSTGRES_* variables. These are populated automatically by nix. So if the variables are set here, you may get issues with overriding your settings in props.nix when using bonfire. You can now proceed to Hello World! Note: if you ever want to shut off the postgres server in nix, simply run the nix-db targets in just: # stop postgres server running locally just nix - db stop # start postgres server running locally just nix - db start","ref":"hacking.html#configure"},{"type":"extras","title":"Development guide - Hello world!","doc":"From a fresh checkout of this repository, this command will fetch the app's dependencies and setup the database (the same commands apply for all three options above): just setup You should then be able to run the app with: just dev See the just commands below for more things you may want to do.","ref":"hacking.html#hello-world"},{"type":"extras","title":"Development guide - Onboarding","doc":"By default, the back-end listens on port 4000 (TCP), so you can access it on http://localhost:4000/ Your first step will be to create an account to log in with. The easiest way to do this is with our mix task: $ just mix bonfire.account.new Enter an email address: root@localhost Enter a password: Your password must be at least 10 characters long and the output could be more helpful if you don't do that. This task seems to work most reliably if you open a second terminal window with the devserver running. We're not sure why. You should then be able to log in and create a user through the web interface. If you would like to become an administrator, there is a mix task for that too: just mix bonfire.user.admin.promote your_username","ref":"hacking.html#onboarding"},{"type":"extras","title":"Development guide - The Bonfire Environment","doc":"We like to think of bonfire as a comfortable way of developing software - there are a lot of conveniences built in once you know how they all work. The gotcha is that while you don't know them, it can be a bit overwhelming. Don't worry, we've got your back. Architecture - an overview of the stack and code structure. Bonfire-flavoured Elixir - an introduction to the way we write Elixir. Bonfire's Database: an Introduction - an overview of how our database is designed. Boundaries - an introduction to our access control system. Note: these are still at the early draft stage, we expect to gradually improve documentation over time.","ref":"hacking.html#the-bonfire-environment"},{"type":"extras","title":"Development guide - Documentation","doc":"The code is somewhat documented inline. You can generate HTML docs (using Exdoc ) by running just docs .","ref":"hacking.html#documentation"},{"type":"extras","title":"Development guide - Additional information","doc":"messctl is a little utility for programmatically updating the .deps files from which the final elixir dependencies list is compiled by the mess script. The only use of it is in the dep-* tasks of the Makefile. It is used by some of the project developers and the build does not rely on it. ./extensions/ is used to hack on local copies of Bonfire extensions. You can clone an extension from its git repo and use the local version during development, eg: just dep-clone-local bonfire_me https://github.com/bonfire-networks/bonfire_me ./forks/ is used to hack on local copies of any other dependencies. You can migrate the DB when the app is running (also runs automatically on startup): EctoSparkles.Migrator.migrate You can generate a dependency graph using just xref-graph which will generate a DOT file at docs/ (if Graphviz is installed it will also generate an SVG visualisation using dot ). Usage under Windows (WSL, MSYS or CYGWIN) By default, the justfile requires symlinks, which can be enabled with the help of this link . See the pull request adding WSL support for details about usage without symlinks.","ref":"hacking.html#additional-information"},{"type":"extras","title":"Development guide - just commands","doc":"Run just followed by any of these commands when appropriate rather than directly using the equivalent commands like mix , docker , docker-compose , etc. For example, just setup will get you started, and just dev will run the app. You can first set an env variable to control which mode these commands will assume you're using. Here are your options: WITH_DOCKER=total : use docker for everything (default) WITH_DOCKER=partial : use docker for services like the DB WITH_DOCKER=easy : use docker for services like the DB &amp; compiled utilities like messctl WITH_DOCKER=no : please no Run just help to see the list of possible commands and what they do.","ref":"hacking.html#just-commands"},{"type":"extras","title":"Development guide - Troubleshooting","doc":"EACCES Permissions Error If you get a permissions error when following any of the steps, run the following command and it should be fixed: cd bonfire &amp;&amp; sudo chown -R yourusername:yourusername . Note that the command should be modified so your shell is pointing to wherever you have bonfire installed. If you are already in the bonfire directory then you only need to worry about running the chown portion of the command. Unable to access Postgres database If you are getting any :nxdomain errors, check if you have any firewalls that may be blocking the port on your system. For example, if you are running UFW (a lot of Linux distros do), run the following command to allow access to port 4000: sudo ufw allow 4000 (Mix) Package fetch failed Example: ** (Mix) Package fetch failed and no cached copy available (https://repo.hex.pm/tarballs/distillery-2.0.12.tar) In this case, distillery (as an example of a dependency) made a new release and retired the old release from hex. The new version ( 2.0.14 ) is quite close to the version we were depending on ( 2.0.12 ), so we chose to upgrade: mix deps.update distillery This respects the version bounds in mix.exs ( ~&gt; 2.0 ), so increment that if required. (DBConnection.ConnectionError) tcp recv: closed Example: ** (DBConnection.ConnectionError) tcp recv: closed (the connection was closed by the pool, possibly due to a timeout or because the pool has been terminated) In this case, the seeds were unable to complete because a query took too long to execute on your machine. You can configure the timeout to be larger in the dev environment: Open config/dev.exs in your editor. Find the database configuration (search for Bonfire.Common.Repo ). Add timeout: 60_000 to the list of options: config :bonfire , Bonfire.Common.Repo , timeout : 60_000 , [ ... ]","ref":"hacking.html#troubleshooting"},{"type":"extras","title":"Deployment guide","doc":"WARNING: beta status - have fun but don't rely on it yet 🙏 Bonfire is currently beta software. While it's fun to play with it, we would not recommend running any production instances yet (meaning not using it for your primary fediverse identity) because it's not quite ready for that today. These instructions are for setting up Bonfire in production. If you want to run the backend in development, please refer to our developer guide instead.","ref":"deploy.html"},{"type":"extras","title":"Deployment guide - Security Warning","doc":"We recommend only granting an account to people you trust to minimise the attack surface. Accordingly, Bonfire ships with public registration disabled. The admin panel has an invite facility.","ref":"deploy.html#security-warning"},{"type":"extras","title":"Deployment guide - Step - 0 - Decide how you want to deploy and manage the app","doc":"Option A - Install using Co-op Cloud (recommended) which is an alternative to corporate cloud services built by tech co-ops, and provides handy tools for setting up and managing many self-hosted free software tools using ready-to-use &quot;recipes&quot;. Very useful if you'd like to host Bonfire alongside other open and/or federated projects. In this case, jump straight to step 4. Option B - Install using Docker containers (easy mode) Option B1 - Using pre-built Docker images Option B2 - Building your own Docker image (if you want to make changes to the code) Option C - Manual installation (without Docker)","ref":"deploy.html#step-0-decide-how-you-want-to-deploy-and-manage-the-app"},{"type":"extras","title":"Deployment guide - Step 1 - Download and configure the app","doc":"Option A - Install using Co-op Cloud (recommended) Install Abra on your machine Set up a server with co-op cloud Use the Bonfire recipe and follow the instructions there. Options B and C Install dependencies. You may need to install just , and other requirements such as Docker (check the exact list of requirements based on the option you choose in step 2.) Clone this repository and change into the directory: git clone --depth 1 https://github.com/bonfire-networks/bonfire-app.git bonfire &amp;&amp; cd bonfire Specify what flavour you want to run in production: The first thing to do is choose what flavour of Bonfire (eg. classic, community, or cooperation) you want to deploy, as each flavour uses different Docker images and set of configs. For example if you want to run the classic flavour: export MIX_ENV=prod FLAVOUR=classic You may also want to put this in the appropriate place in your system so your choice of flavour is remembered for next time (eg. ~/.bashrc or ~/.zshrc ) If you're not planning on using Docker, you'll also need: export WITH_DOCKER=no","ref":"deploy.html#step-1-download-and-configure-the-app"},{"type":"extras","title":"Deployment guide - Step 2- Prepare the config","doc":"Option A : if deploying with co-op cloud, edit the env file at ~/.abra/servers/your_server/your_app.env instead. Option B and C : Run just config to initialise some default config and then edit the config in the ./.env file. Config keys you should pay special attention to: The app needs these environment variables to be configured in order to work. FLAVOUR should reflect your chosen flavour HOSTNAME (your domain name, eg: bonfire.example.com ) PUBLIC_PORT (usually 443) MAIL_DOMAIN and MAIL_KEY and related keys to configure transactional email, for example set MAIL_BACKEND=mailgun and sign up at Mailgun and then configure the domain name and key (you may also need to set MAIL_BASE_URI if your domain is not setup in EU, as the default MAIL_BASE_URI is set as https://api.eu.mailgun.net/v3 ). SMTP is supported as well, through the following env vars MAIL_SERVER ( smtp domain of the mail server ) MAIL_DOMAIN ( the bit after the @ in your email ) MAIL_USER MAIL_PASSWORD MAIL_FROM MAIL_PORT ( optional ) MAIL_SSL ( optional ) UPLOADS_S3_BUCKET and the related API key and secret for uploads. WARNING: If you want to store uploads in an object storage rather than directly on your server (which you probably want, to not run out of space), you need to configure that up front, otherwise URLs will break if you change it later. See config/runtime.exs for extra variables to set if you're not using the default service and region (which is Scaleway Paris). Secret keys for which you should put random secrets. You can run just secrets to generate some for you. SECRET_KEY_BASE SIGNING_SALT ENCRYPTION_SALT POSTGRES_PASSWORD MEILI_MASTER_KEY Further information on config In the ./config/ (which is a symbolic link to the config of the flavour you choose to run) directory of the codebase, there are following config files: config.exs : default base configuration, which itself loads many other config files, such as one for each installed Bonfire extension. prod.exs : default extra configuration for MIX_ENV=prod runtime.exs : extra configuration which is loaded at runtime (vs the others which are only loaded once at compile time, i.e. when you build a release) bonfire_*.exs : configs specific to different extensions, which are automatically imported by config.exs You should not have to modify the files above. Instead, overload any settings from the above files using env variables or in ./.env . If any settings in the .exs config files are not available in env or in the instance settings UI, please open an issue or PR.","ref":"deploy.html#step-2-prepare-the-config"},{"type":"extras","title":"Deployment guide - Step 3 - Install","doc":"Option A - Install using Co-op Cloud (recommended) Follow the instructions in the coop-cloud recipe readme. Option B - Install using Docker containers (easy mode) The easiest way to launch the docker image is using the just commands. The docker-compose.release.yml uses config/prod/.env to launch a container with the necessary environment variables along with its dependencies, currently that means an extra postgres container, along with a reverse proxy (Caddy server, which you may want to replace with nginx or whatever you prefer). Make sure you have Docker , with the compose plugin, and just installed: $ docker version Docker Engine - Community - 23.0.1 $ docker compose version Docker Compose version v2.16.0 $ just --version just 1.13.0 ... Now that your tooling is set up, you have the choice of using pre-built images or building your own. For example if your flavour does not have a prebuilt image on Docker Hub, or if you want to customise any of the extensions, you can build one yourself - see option B2 below. Option B1 - Using pre-built Docker images (recommended to start with) The image entry in docker-compose.release.yml will by default use the image on Docker Hub which corresponds to your chosen flavour (see step 1 above for choosing your flavour). You can see the images available per flavour, version (we currently recommend using the latest tag), and architecture at https://hub.docker.com/r/bonfirenetworks/bonfire/tags Start the docker containers with docker-compose: just rel - run Run this at the prompt: bin/bonfire remote to enter Elixir's iex environment EctoSparkles.Migrator.migrate to initialise your database The backend should now be running at http://localhost:4000/ . If that worked, start the app as a daemon next time: just rel - run - bg Docker-related handy commands just update to update to the latest release of Bonfire just rel-run Run the app in Docker, in the foreground just rel-run-bg Run the app in Docker, and keep running in the background just rel-stop Stop the running release just rel-shell Runs a simple shell inside of the container, useful to explore the image Once in the shell, you can run bin/bonfire with the following commands: Usage: bonfire COMMAND [ARGS] The known commands are: start Starts the system start_iex Starts the system with IEx attached daemon Starts the system as a daemon daemon_iex Starts the system as a daemon with IEx attached eval &quot;EXPR&quot; Executes the given expression on a new, non-booted system rpc &quot;EXPR&quot; Executes the given expression remotely on the running system remote Connects to the running system via a IEx remote shell restart Restarts the running system via a remote command stop Stops the running system via a remote command pid Prints the operating system PID of the running system via a remote command version Prints the release name and version to be booted There are some useful database-related release tasks under EctoSparkles.Migrator. that can be run in an iex console (which you get to with just rel.shell followed by bin/bonfire remote , assuming the app is already running): migrate runs all up migrations rollback(step) roll back to step X rollback_to(version) roll back to a specific version rollback_all rolls back all migrations back to zero (caution: this means losing all data) You can also directly call some functions in the code from the command line, for example: to migrate: docker exec bonfire_web bin/bonfire rpc 'EctoSparkles.Migrator.migrate' to just yourself an admin: docker exec bonfire_web bin/bonfire rpc 'Bonfire.Me.Users.make_admin(&quot;my_username&quot;)' Option B2 - Building your own Docker image Dockerfile.release uses the multistage build feature to just the image as small as possible. It generates the OTP release which is later copied into the final image packaged in an Alpine linux container. There is a justfile with relevant commands (make sure set the MIX_ENV=prod env variable): just rel-build-release which builds the docker image of the latest release just rel-build which builds the docker image, including local changes to any cloned extensions in ./extensions/ just rel-tag adds the &quot;latest&quot; tag to your last build, so that it will be used when running Once you've built and tagged your image, you may need to update the image name in docker-compose.release.release.yml to match (either your local image name if running on the same machine you used for the build, or a remote image on Docker Hub if you pushed it) and then follow the same steps as for option A1. For production, we recommend to set up a CI workflow to automate this, for an example you can look at the one we currently use . Option C - Manual installation (without Docker) Dependencies Postgres (or Postgis) version 12 or newer just Elixir version 1.13 with OTP 24 (or newer). If your distribution only has an old version available, check Elixir's install page or use a tool like asdf (run asdf install in this directory). C-1. Building the release Make sure you have erlang and elixir installed (check Dockerfile for what version we're currently using) export WITH_DOCKER=no OR add WITH_DOCKER=no to the end of .env and source it with source .env Run just rel-build to create an elixir release. This will create an executable in your _build/prod/rel/bonfire directory. Note that you will need just to pass in the .env file to the executable, like so: just cmd _build/prod/rel/bonfire/bin/bonfire &lt;bonfire command&gt; . Alternatively, this file can be sourced by source .env instead. We will be using the bin/bonfire executable as called from just from here on. C-2. Running the release Create a database, and a user, fill out the .env with your credentials and secrets You will need to use just in order to pass the .env file to the executable. This can be accomplished by running just cmd _build/prod/rel/bonfire/bin/bonfire &lt;bonfire command&gt; . Just works from the root directory of the justfile , not your current directory. The migrations should automatically run on first boot, but if you run into troubles the migration command is: bin/bonfire eval 'EctoSparkles.Migrator.migrate()' . If you’re using RDS or some other locked down DB, you may need to run CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public; on your database with elevated privileges. You can check if your instance is configured correctly by running it with bin/bonfire start To run the instance as a daemon, use bin/bonfire start daemon . Option D - with Nix This repo is a Flake and includes a Nix module. Here are the detailed steps to deploy it: run a recent version of Nix or NixOS: https://nixos.wiki enable Flakes: https://nixos.wiki/wiki/Flakes#Installing_flakes add sandbox = false in your nix.conf fetch and build the app and dependencies: nix run github:bonfire-networks/bonfire-app start_iex add it as an input to your system flake. add an overlay to just the package available add the required configuration in your system Your flake.nix file would look like the following. Remember to replace myHostName with your actual hostname or however your deployed system is called. { inputs.bonfire.url = &quot;github:happysalada/bonfire-app/main&quot;; outputs = { self, nixpkgs, bonfire }: { overlay = final: prev: with final;{ # a package named bonfire already exists on nixpkgs so we put it under a different name elixirBonfire = bonfire.packages.x86_64-linux.default; }; nixosConfigurations.myHostName = nixpkgs.lib.nixosSystem { system = &quot;x86_64-linux&quot;; modules = [ { environment.systemPackages = [ agenix.defaultPackage.x86_64-linux ]; nixpkgs.overlays = [ self.overlay ]; } ./myHostName.nix bonfire.nixosModules.bonfire ]; }; }; } Then your myHostName.nix would look like the following: { config, lib, pkgs, ... }: { services.bonfire = { # you will additionally need to expose bonfire with a reverse proxy, for example caddy port = 4000; package = pkgs.elixirBonfire; dbName = &quot;bonfire&quot;; # the environment should contain a minimum of # SECRET_KEY_BASE # SIGNING_SALT # ENCRYPTION_SALT # RELEASE_COOKIE # have a look into nix/module.nix for more details # the way to deploy secrets is beyond this readme, but I would recommend agenix environmentFile = &quot;/run/secrets/bonfireEnv&quot;; dbSocketDir = &quot;/var/run/postgresql&quot;; }; # this is specifically for a reverse proxy, which is primarily used for SSL certs services.ngnix = { enable = true; forceSSL = true; enableACME = true; virtualHosts.&quot;myHostName&quot;.locations.proxyPass = &quot;http://localhost:4000&quot;; }; # You will need to accept ACME's terms and conditions if you haven't elsewhere in your configuration security.acme.defaults.email = &quot;you@myHostName.com&quot;; security.acme.acceptTerms = true; # this is uniquely for database backup purposes # replace myBackupUserName with the user name that will do the backups # if you want to do backups differently, feel free to remove this part of the config services.postgresql = { ensureDatabases = [ &quot;bonfire&quot; ]; ensureUsers = [{ name = &quot;myBackupUserName&quot;; ensurePermissions = { &quot;DATABASE bonfire&quot; = &quot;ALL PRIVILEGES&quot;; }; }]; }; } Option C with nixos this repo is a flake and includes a nixos module. Here are the detailed steps to deploy it. add it as an input to your system flake. add an overlay to just the package available add the required configuration in your system Your flake.nix file would look like the following. Remember to replace myHostName with your actual hostname or however your deployed system is called. { inputs.bonfire.url = &quot;github:happysalada/bonfire-app/main&quot;; outputs = { self, nixpkgs, bonfire }: { overlay = final: prev: with final;{ # a package named bonfire already exists on nixpkgs so we put it under a different name elixirBonfire = bonfire.defaultPackage.x86_64-linux; }; nixosConfigurations.myHostName = nixpkgs.lib.nixosSystem { system = &quot;x86_64-linux&quot;; modules = [ { environment.systemPackages = [ agenix.defaultPackage.x86_64-linux ]; nixpkgs.overlays = [ self.overlay ]; } ./myHostName.nix bonfire.nixosModules.bonfire ]; }; }; } then in myHostName.nix would look like the following TODO: add the caddy config { config, lib, pkgs, ... }: { services.bonfire = { # you will need to expose bonfire with a reverse proxy, for example caddy port = 4000; package = pkgs.elixirBonfire; dbName = &quot;bonfire&quot;; # the environment should contain a minimum of # SECRET_KEY_BASE # SIGNING_SALT # ENCRYPTION_SALT # RELEASE_COOKIE # have a look into nix/module.nix for more details # the way to deploy secrets is beyond this readme, but I would recommend agenix environmentFile = &quot;/run/secrets/bonfireEnv&quot;; dbSocketDir = &quot;/var/run/postgresql&quot;; }; # this is uniquely for database backup purposes # replace myBackupUserName with the user name that will do the backups # if you want to do backups differently, feel free to remove this part of the config services.postgresql = { ensureDatabases = [ &quot;bonfire&quot; ]; ensureUsers = [{ name = &quot;myBackupUserName&quot;; ensurePermissions = { &quot;DATABASE bonfire&quot; = &quot;ALL PRIVILEGES&quot;; }; }]; }; }","ref":"deploy.html#step-3-install"},{"type":"extras","title":"Deployment guide - Step 4 - Run","doc":"By default, the backend listens on port 4000 (TCP), so you can access it on http://localhost:4000/ (if you are on the same machine). In case of an error it will restart automatically. Once you've signed up, you will automatically be an instance admin if you were the first to register. NOTE: If you are running in a restricted environment such as Amazon RDS, you will need to execute some sql against the database before migrations can run: CREATE EXTENSION IF NOT EXISTS citext; Step 5 - Adding HTTPS The common and convenient way for adding HTTPS is by using a reverse proxy like Nginx or Caddyserver (the latter of which is bundled as part of the docker compose setup). Caddyserver and other servers can handle generating and setting up HTTPS certificates automatically, but if you need TLS/SSL certificates for nginx, you can look get some for free with letsencrypt . The simplest way to obtain and install a certificate is to use Certbot. . Depending on your specific setup, certbot may be able to get a certificate and configure your web server automatically. If you've built from source, you should point the nginx root directory to be _build/prod/rel/bonfire/lib/bonfire-0.1.0-*/priv/static","ref":"deploy.html#step-4-run"},{"type":"extras","title":"Deployment guide - Troubleshooting","doc":"Some common issues that may arise during deployment and our suggestions for resolving them. WebSocket connections not establishing behind a reverse proxy If you are running Bonfire behind your own reverse proxy (e.g. nginx), you might experience issues with WebSocket connections not establishing. WebSocket connections require specific configuration to work, in nginx the following configuration is necessary for websockets to work: location / live / websocket { proxy_pass http :// 127.0 . 0.1 : 4000 ; # these configurations are necessary to proxy WebSocket requests proxy_http_version 1.1 ; proxy_set_header Upgrade $ http_upgrade ; proxy_set_header Connection &quot;upgrade&quot; ; }","ref":"deploy.html#troubleshooting"},{"type":"extras","title":"Bonfire Architecture","doc":"","ref":"architecture.html"},{"type":"extras","title":"Bonfire Architecture - Hacking","doc":"Bonfire is an unusual piece of software, developed in an unusual way. It originally started as a project to create a generic federation library/framework, while building an app for educators to share and collaborate on learning resources with their peers, and has been forked and evolved a lot since then. Hacking on it is actually pretty fun. The codebase has a unique feeling to work with and we've relentlessly refactored to manage the ever-growing complexity that a distributed social networking toolkit implies. That said, it is not easy to understand without context, which is what this document is here to provide.","ref":"architecture.html#hacking"},{"type":"extras","title":"Bonfire Architecture - Design Decisions","doc":"Feature goals: Flexibility for developers and users. Extreme configurability and extensibility. Integrated federation with the existing fediverse. Operational goals: Easy to set up and run. Light on resources for small deployments. Scalable for large deployments.","ref":"architecture.html#design-decisions"},{"type":"extras","title":"Bonfire Architecture - Stack","doc":"Our main implementation language is Elixir , which is designed for building reliable systems. We have almost our own dialect . We use the Phoenix web framework with LiveView and Surface for UI components and views. Surface is a different syntax for LiveView that is designed to be more convenient and understandable to frontend developers, with extra compile time checks. Surface views and components are compiled into LiveView code (so once you hit runtime, Surface in effect doesn't exist any more). Some extensions use the Absinthe GraphQL library to expose an API.","ref":"architecture.html#stack"},{"type":"extras","title":"Bonfire Architecture - The Bonfire Environment","doc":"We like to think of bonfire as a comfortable way of developing software - there are a lot of conveniences built in once you know how they all work. The gotcha is that while you don't know them, it can be a bit overwhelming. Don't worry, we've got your back.","ref":"architecture.html#the-bonfire-environment"},{"type":"extras","title":"Bonfire Architecture - Code Structure","doc":"The code is broadly composed namespaces such as these, many of which are packaged as &quot;extensions&quot; which live in separate git repositories, which are included in the app by way of mix dependencies: Bonfire.* - Core application logic (very little code). Bonfire.*.* - Bonfire extensions (eg Bonfire.Social.Posts ) containing mostly context modules, APIs, and routes Bonfire.Data.* - Extensions containing database schemas and migrations Bonfire.UI.* - UI component extensions Bonfire.*.*.LiveHandler - Backend logic to handle events in the frontend Bonfire.Editor.* (pluggable text editors, eg. CKEditor for WYSIWYG markdown input) Bonfire.GraphQL.* - Optional GraphQL API Bonfire.Federate.* - Optional Federation hooks ActivityPub - ActivityPub S2S models, logic and various helper modules ActivityPub.Web - ActivityPub S2S REST endpoints, activity ingestion and push federation facilities ValueFlows.* - economic extensions implementing the ValueFlows vocabulary Contexts are were we put any core logic. A context often is circumscribed to providing logic for a particular object type (e. g. Bonfire.Social.Posts implements Bonfire.Data.Social.Post ). All Bonfire objects use an ULID as their primary key. We use the Pointers library (with extra logic in Bonfire.Common.Pointers ) to reference any object by its primary key without knowing what type it is beforehand. This is very useful as it allows for example following or liking many different types of objects (as opposed to say only a user or a post) and this approach allows us to store the context of the like/follow by only storing its primary key (see Bonfire.Data.Social.Follow ) for an example. Context modules usually have one/2 , many/2 , and many_paginated/1 functions for fetching objects, which in turn call a query/2 function. These take a keyword list as filters (and an optional opts argument) allowing objects to be fetched by arbitrary criteria. Examples: Users . one ( username : &quot;bob&quot; ) # Fetching by username Posts . many_paginated ( by : &quot;01E9TQP93S8XFSV2ZATX1FQ528&quot; ) # List a page of posts by its author EconomicResources . many ( deleted : true ) # List any deleted resources Context modules also have functions for creating, updating and deleting objects, as well as hooks for federating or indexing in the search engine. Here is an incomplete sample of some of current extensions and modules: Bonfire.Me.Accounts (for managing and querying local user accounts) Bonfire.Me.Users (for managing and querying both local and remote user identities and profiles) Bonfire.Boundaries (for managing and querying circles, ACLs, permissions...) Bonfire.Social.FeedActivities , Bonfire.Social.Feeds and Bonfire.Social.Activities (for managing and querying activities and feeds) Bonfire.Social.Posts and Bonfire.Social.PostContents (for managing and querying posts) Bonfire.Social.Threads (for managing and querying threads and comments) Bonfire.Social.Flags (for managing and querying flags) Bonfire.Social.Follows (for managing and querying follows) Bonfire.Classify (for managing and querying categories, topics, and the like) Bonfire.Tag (for managing and querying tags and mentions) Bonfire.Geolocate (for managing and querying locations and geographical coordinates) Bonfire.Quantify (for managing and querying units and measures) Additional extensions, libraries, and modules Bonfire.Common and Bonfire.Common.Utils (stuff that gets used everywhere) Bonfire.Application (OTP application) Bonfire.Me.Characters (a shared abstraction over users, organisations, categories, and other objects that need to have feeds and behave as an actor in ActivityPub land) Bonfire.Federate.ActivityPub and ActivityPub (ActivityPub integration) Bonfire.Search (local search indexing and search API, powered by Meili) Bonfire.Mailer , Bonfire.Me.Mails , and Bamboo (for rendering and sending emails) Bonfire.Files , Waffle , TreeMagic and TwinkleStar (for managing uploaded content) Bonfire.GraphQL (GraphQL API abstractions) Queery and Bonfire.Repo.Query (Helpers for making queries on the database) Bonfire.Repo (Ecto repository) Flexto (to extend DB schemas in config, especially useful for adding associations) AbsintheClient (for querying the API from within the server) General structure Bonfire app A flavour running Bonfire.Application as supervisor Configs assembled from extensions at flavour/$FLAVOUR/config Phoenix at Bonfire.Web.Endpoint Routes assembled from extensions at Bonfire.Web.Router GraphQL schema assembled from extensions at Bonfire.GraphQL.Schema Database migrations assembled from extensions at flavour/$FLAVOUR/repo/migrations Data seeds assembled from extensions at flavour/$FLAVOUR/repo/seeds Extensions and libraries as listed in flavour/$FLAVOUR/config/deps.* Extensions defining schemas and migrations (usually Bonfire.Data.* ) Schemas Migrations defined as functions in the schema modules in lib/ Migration templates calling those functions in priv/repo/migrations which are then copied into an app flavour's migrations Extensions implementing features or groups of features (eg. Bonfire.Me ) Config template which is then copied into an app flavour's config (eg config/bonfire_me.exs ) Contexts (eg Bonfire.Me.Users ) Sometimes LiveHandlers for handling frontend events in the backend (eg Bonfire.Me.Users.LiveHandler ) Routes (eg Bonfire.UI.Me.Routes ) Controllers and/or Views (eg Bonfire.UI.Me.CreateUserController and Bonfire.UI.Me.CreateUserLive ) API (eg Bonfire.Me.API.GraphQL ), refer to GraphQL API documentation Schemas Resolvers Sometimes Plugs (eg Bonfire.Web.Plugs.UserRequired and Bonfire.Web.LivePlugs.UserRequired ) Other extensions or libraries (eg Pointers or Bonfire.Common which are used by most other extensions)","ref":"architecture.html#code-structure"},{"type":"extras","title":"Bonfire Architecture - Naming","doc":"It is said that naming is one of the four hard problems of computer science (along with cache management and off-by-one errors). We don't claim our scheme is the best, but we do strive for consistency. Naming guidelines Module names mostly begin with Bonfire. unless they belong to a more generic library (eg Pointers or ValueFlows ) Everything within an extension begins with the context name and a . (eg Bonfire.Social.Migrations ) Database schemas should be named in the singular (eg Bonfire.Data.Social.Post ) Context modules are named in plural where possible (eg Bonfire.Social.Posts ) Other modules within a context begins with the context name and a . (eg Bonfire.Social.Posts.LiveHandler ) Modules use UpperCamelCase while functions use snake_case Acronyms in module names should be all uppercase (eg Bonfire.Social.APActivities )","ref":"architecture.html#naming"},{"type":"extras","title":"Bonfire Architecture - Federation libraries","doc":"ActivityPub This namespace handles the ActivityPub logic and stores AP activities. It is largely adapted Pleroma code with some modifications, for example merging of the activity and object tables and new actor object abstraction. ActivityPub contains the main API and is documented there. ActivityPub.Federator.Adapter defines callback functions for the AP library. It also contains some functionality that isn't part of the AP spec but is required for federation: ActivityPub.Safety.Keys - Generating and handling RSA keys and signatures ActivityPub.Federator.WebFinger - Implementation of the WebFinger protocol ActivityPub.Federator.HTTP - Module for making HTTP requests (wrapper around tesla) ActivityPub.Instances - Module for storing reachability information about remote instances Also refer to MRF documentation to learn how to rewrite or discard messages. ActivityPub.Web This namespace contains the ActivityPub Server-to-Server REST API, the activity ingestion pipeline ( ActivityPub.Federator.Transformer ) and the push federation facilities ( ActivityPub.Federator , ActivityPub.Federator.APPublisher and others). The outgoing federation module is designed in a modular way allowing federating through different protocols in the future. ActivityPub integration with Bonfire's application logic The callback functions defined in ActivityPub.Federator.Adapter are implemented in Bonfire.Federate.ActivityPub.Adapter . When implementing federation for a new object type it needs to be implemented for both directions: for outgoing federation using the hooks in Bonfire.Federate.ActivityPub.Outgoing and for incoming federation using the hooks in Bonfire.Federate.ActivityPub.Incoming .","ref":"architecture.html#federation-libraries"},{"type":"extras","title":"Bonfire-flavoured Elixir","doc":"Bonfire has a few libraries that are widely used in the codebase and make writing Elixir feel a little bit different. To help you get less confused by this, here's a guide on what we can call &quot;bonfire-flavoured elixir&quot;! Please note this guide assumes you already know Elixir .","ref":"bonfire-flavoured-elixir.html"},{"type":"extras","title":"Bonfire-flavoured Elixir - Arrows","doc":"The Elixir |&gt; (&quot;pipe&quot;) operator is one of the things that seems to get people excited about elixir. Probably in part because you then don't have to keep coming up with function names. Unfortunately it's kind of limiting. The moment you need to pipe a parameter into a position that isn't the first one, it breaks down and you have to drop out of the pipeline format or write a secondary function to handle it. Not any more! By simply inserting ... where you would like the value to be inserted, Arrows will override where it is placed. This allows you to keep on piping while accommodating that function with the annoying argument order. Arrows was inspired by an existing library . Here is part of the test suite in lieu of examples: defmodule ArrowsTest do use ExUnit.Case use Arrows def double ( x ) , do : x * 2 def double_fst ( x , _ ) , do : x * 2 def double_snd ( _ , x ) , do : x * 2 def add_snd_thd ( _ , x , y ) , do : x + y test &quot;|&gt;&quot; do assert 4 == ( 2 |&gt; double ) assert 4 == ( 2 |&gt; double ( ) ) assert 4 == ( 2 |&gt; double ( ... ) ) assert 8 == ( 2 |&gt; double ( double ( ... ) ) ) assert 4 == ( 2 |&gt; double_fst ( 1 ) ) assert 4 == ( 2 |&gt; double_fst ( ... , 1 ) ) assert 8 == ( 2 |&gt; double_fst ( double ( ... ) , 1 ) ) assert 4 == ( 2 |&gt; double_snd ( 1 , ... ) ) assert 8 == ( 2 |&gt; double_snd ( 1 , double ( ... ) ) ) assert 3 == ( 2 |&gt; add_snd_thd ( 1 , ... , 1 ) ) assert 4 == ( 2 |&gt; add_snd_thd ( 1 , ... , ... ) ) assert 6 == ( 2 |&gt; add_snd_thd ( 1 , ... , double ( ... ) ) ) for x &lt;- [ :yes , 2 , nil , false ] do assert { :ok , x } == ( x |&gt; { :ok , ... } ) end end end A few little extra features you might notice here: You can move the parameter into a subexpression, as in 2 |&gt; double_fst(double(...), 1) where double will be called before the parameter is passed to double_fst . You can use ... multiple times, substituting it in multiple places. The right hand side need not even be a function call, you can use any expression with ... . Ok-pipe Arrows also provides an ok-pipe operator, ~&gt; , which only pipes into the next function if the result from the last one was considered a success. It's inspired by OK , but we have chosen to do things slightly differently so it better fits with our regular pipe. input result :----------------------- :-------------- {:ok, x} fun.(x) {:error, e} {:error, e} nil nil x when not is_nil(x) fun.(x) In the case of a function returning an ok/error tuple being on the left hand side, this is straightforward to determine. In the event of {:ok, x} , x will be passed into the right hand side to call. In the event of {:error, x} , the result will be {:error, x} . We also deal with a lot of functions that indicate failure by returning nil. ~&gt; tries to 'do what I mean' for both of these so you can have one pipe operator to rule them all. If nil is a valid result, you must thus be sure to wrap it in an ok tuple when it occurs on the left hand side of ~&gt; . |&gt; and ~&gt; compose in the way you'd expect; i.e. a ~&gt; receiving an error tuple or nil will stop executing the rest of the chain of (mixed) pipes.","ref":"bonfire-flavoured-elixir.html#arrows"},{"type":"extras","title":"Bonfire-flavoured Elixir - Untangle","doc":"Untangle provides replacements for the macros in Elixir's Logger module and the IO.inspect function to output code location information. The first argument will be inspect ed and the second (where provided) will be used as a label: iex(1)&gt; import Untangle Untangle iex(2)&gt; debug ( :no , &quot;the answer is&quot; ) # log at debug 11 : 19 : 09.915 [ debug ] [ iex : 2 ] the answer is : :no :no iex(3)&gt; dump ( %{ a : :map } , &quot;it&quot; ) # inspect something on stdout [ iex : 3 ] it : %{ a : :map } %{ a : :map } When used in a code file, the location information becomes slightly more useful, e.g.: [ lib / test_untangle . ex : 15 @ Test.Untangle . example / 2 ] Here &#39; s an empty list : [ ] You may also notice from the iex output that it returns its first argument. This makes it ideal for inserting into a pipeline for debugging purposes: do_something ( ) |&gt; debug ( &quot;output of do_something/0&quot; ) When you are done debugging something, the location of the debug statement is already in the output so you know where to remove it or comment it out! Bliss! You will find the codebase uses this a lot, though the debugs are frequently commented out. Just uncomment the ones that would help you with a particular debugging task and you're off.","ref":"bonfire-flavoured-elixir.html#untangle"},{"type":"extras","title":"Bonfire-flavoured Elixir - Error handling","doc":"Bonfire.Fail is an Exception handler, which you can use to stop the show anywhere in the code, e.g: id = ulid(object) || raise(Bonfire.Fail, :not_found) You can use this special exception when you want to redirect the user to the login page rather than just show an error: user = current_user(assigns) || raise(Bonfire.Fail.Auth, :needs_login) Advantages include: standardised error messages (defaults are defined at https://github.com/bonfire-networks/bonfire_fail/blob/main/lib/runtime_config.ex#L16 ) which can be overridden in your app's config using config :bonfire_fail, :common_errors friendly error messages are defined in one place, which means no duplicated localisation efforts uses the elixir/OTP pattern of &quot;let it crash&quot; returns the correct HTTP code when applicable no need to wrap blocks in if/else or the like for users of the LiveView frontend, this will make the corresponding friendly error message appear in a flash overlay (if using Bonfire.UI.Common.LiveHandlers and/or Bonfire.UI.Common.undead/3 )","ref":"bonfire-flavoured-elixir.html#error-handling"},{"type":"extras","title":"Bonfire's Database - an intro","doc":"Bonfire uses the excellent PostgreSQL database for most data storage. PostgreSQL allows us to make a wide range of queries and to make them relatively fast while upholding data integrity guarantees. Postgres is a relational schema-led database - it expects you to pre-define tables and the fields in each table (represented in tabular form, i.e. as a collection of tables with each table consisting of a set of rows and columns). Fields can contain data or a reference to a row in another table. This usually means that a field containing a reference has to be pre-defined with a foreign key pointing to a specific field (typically a primary key, like an ID column) in a specific table . A simple example would be a blogging app, which might have a post table with author field that references the user table. A social network, by contrast, is actually a graph of objects. Objects need to be able to refer to other objects by their ID without knowing their type. A simple example would be likes, you might have a likes table with liked_object field that references the post table. But you don't just have posts that can be liked, but also videos, images, polls, etc, each with their own table? We needed the flexibility to have a foreign key that can reference any referenceable object. We call our system Pointers . This guide is a brief introduction to Pointers. It assumes some foundational knowledge: Basic understanding of how relational databases like Postgresql work, in particular: Tables being made up of fields. What a primary key is and why it's useful. Foreign keys and relationships between tables (1 to 1, 1 to Many, Many to 1, Many to Many). Views as virtual tables backed by a SQL query. Basic understanding of Elixir (enough to follow the examples). Basic working knowledge of the Ecto database library (schema and migration definitions)","ref":"database.html"},{"type":"extras","title":"Bonfire's Database - an intro - Identifying objects - the ULID type","doc":"All referenceable objects in the system have a unique ID (primary key) whose type is the ULID . It's a lot like a UUID in that you can generate unique ones independently of the database. It's also a little different, being made up of two parts: The current timestamp, to millisecond precision. Strong random padding for uniqueness. This means that it naturally sorts by time to the millisecond (close enough for us), giving us a performance advantage on queries ordered by a separate creation datetime field (by contrast, UUIDv4 is randomly distributed). If you've only worked with integer primary keys before, you are probably used to letting the database dispense an ID for you. With ULID (or UUID ), IDs can be known before they are stored, greatly easing the process of storing a graph of data and allowing us to do more of the preparation work outside of a transaction for increased performance. In PostgreSQL, we actually store ULID s as UUID columns, thanks to both being the same size (and the lack of a ULID column type shipping with postgresql). You mostly will not notice this because it's handled for you, but there are a few places it can come up: Ecto debug and error output may show either binary values or UUID-formatted values. Hand-written SQL may need to convert table IDs to the UUID format before use.","ref":"database.html#identifying-objects-the-ulid-type"},{"type":"extras","title":"Bonfire's Database - an intro - It's just a table","doc":"The pointers system is mostly based around a single table represented by the Pointers.Pointer schema with the following fields: id (ULID) - the database-wide unique id for the object, primary key. table_id (ULID) - identifies the type of the object, references Pointers.Table . deleted_at (timestamp, default: null ) - when the object was deleted. Every object that is stored in the system will have a record in this table. It may also have records in other tables (handy for storing more than 3 fields about the object!). Don't worry about Pointers.Table for now, just know that every object type will have a record there so Pointers.Pointer.table_id can reference it.","ref":"database.html#it-s-just-a-table"},{"type":"extras","title":"Bonfire's Database - an intro - Mixins - storing data about objects","doc":"Mixins are tables which contain extra information on behalf of objects. Each object can choose to record or not record information for each mixin. Sample mixins include: user profile (containing a name, location and summary) post content (containing the title, summary, and/or html body of a post or message) created (containing the id of the object creator) In this way, they are reusable across different object types. One mixin may (or may not) be used by any number of objects. This is mostly driven by the type of the object we are storing, but can also be driven by user input. Mixins are just tables too! The only requirement is they have a ULID primary key which references Pointers.Pointer . The developer of the mixin is free to put whatever other fields they want in the table, so long as they have that primary-key-as-reference (which will be automatically added for you by the mixin_schema macro). Here is a sample mixin definition for a user profile: defmodule Bonfire.Data.Social.Profile do use Pointers.Mixin , otp_app : :bonfire_data_social , source : &quot;bonfire_data_social_profile&quot; mixin_schema do field :name , :string field :summary , :string field :website , :string field :location , :string end end Aside from use ing Pointers.Mixin instead of Ecto.Schema and calling mixin_schema instead of schema , pretty similar to a standard Ecto schema, right? The arguments to use Pointers.Mixin are: otp_app : the OTP app name to use when loading dynamic configuration, e.g. the current extension or app (required) source : the underlying table name to use in the database We will cover dynamic configuration later. For now, you can use the OTP app that includes the module.","ref":"database.html#mixins-storing-data-about-objects"},{"type":"extras","title":"Bonfire's Database - an intro - Multimixins","doc":"Multimixins are like mixins, except that where an object may have 0 or 1 of a particular mixins, an object may have any number of a particular multimixin. For this to work, a multimixin must have a compound primary key which must contain an id column referencing Pointers.Pointer and at least one other field which will collectively be unique. An example multimixin is used for publishing an item to feeds: defmodule Bonfire.Data.Social.FeedPublish do use Pointers.Mixin , otp_app : :bonfire_data_social , source : &quot;bonfire_data_social_feed_publish&quot; alias Pointers.Pointer mixin_schema do belongs_to :feed , Pointer , primary_key : true end end Notice that this looks very similar to defining a mixin. Indeed, the only difference is the primary_key: true in this line, which adds a second field to the compound primary key. This results in ecto recording a compound primary key of (id, feed_id) for the schema (the id is added for you as with regular mixins).","ref":"database.html#multimixins"},{"type":"extras","title":"Bonfire's Database - an intro - Declaring Object Types","doc":"Picking a table id The first step to declaring a type is picking a unique table ID in ULID format. You could just generate one at the terminal, but since these IDs are special, we tend to assign a synthetic ULID that are readable as words so they stand out in debug output. For example, the ID for the Feed table is: 1TFEEDS0NTHES0V1S0FM0RTA1S , which can be read as &quot;It feeds on the souls of mortals&quot;. Feel free to have a little fun coming up with them, it makes debug output a little more cheery! The rules are: The alphabet is Crockford's Base32 . They must be 26 characters in length. The first character must be a digit in the range 0-7. To help you with this, the Pointers.ULID.synthesise!/1 method takes an alphanumeric binary and tries to return you it transliterated into a valid ULID. Example usage: iex(1)&gt; Pointers.ULID . synthesise! ( &quot;itfeedsonthesouls&quot; ) 11 : 20 : 28.299 [ error ] Too short , need 9 chars . :ok iex(2)&gt; Pointers.ULID . synthesise! ( &quot;itfeedsonthesoulsofmortalsandothers&quot; ) 11 : 20 : 31.819 [ warn ] Too long , chopping off last 9 chars &quot;1TFEEDS0NTHES0V1S0FM0RTA1S&quot; iex(3)&gt; Pointers.ULID . synthesise! ( &quot;itfeedsonthesoulsofmortals&quot; ) &quot;1TFEEDS0NTHES0V1S0FM0RTA1S&quot; iex(4)&gt; Pointers.ULID . synthesise! ( &quot;gtfeedsonthesoulsofmortals&quot; ) 11 : 21 : 03.268 [ warn ] First character must be a digit in the range 0 - 7 , replacing with 7 &quot;7TFEEDS0NTHES0V1S0FM0RTA1S&quot; Virtuals Virtuals are the simplest and most common type of object. Here's a definition of block: defmodule Bonfire.Data.Social.Block do use Pointers.Virtual , otp_app : :bonfire_data_social , table_id : &quot;310CK1NGSTVFFAV01DSSEE1NG1&quot; , source : &quot;bonfire_data_social_block&quot; alias Bonfire.Data.Edges.Edge virtual_schema do has_one :edge , Edge , foreign_key : :id end end It should look quite similar to a mixin definition, except that we use Pointers.Virtual this time (passing an additional table_id argument) and we call the virtual_schema macro. The primary limitation of a virtual is that you cannot put extra fields into one. This also means that belongs_to is not generally permitted because it results in adding a field. has_one and has_many work just fine as they do not cause the creation of fields in the schema. This is not usually a problem, as extra fields can be put into mixins or multimixins as appropriate. Under the hood, a virtual has a view (in this example, called bonfire_data_social_block ). It looks like a table with just an id, but it's populated with all the ids of blocks that are not deleted. When the view is inserted into, a record is created in the pointers table for you transparently. When you delete from the view, the corresponding pointers entry is marked deleted for you. Pointables The other, lesser used, type of object is called the Pointable. The major difference is that unlike the simple case of virtuals, pointables are not backed by views, but by tables. When a record is inserted into a pointable table, a copy is made in the pointers table for you transparently. When you delete from the table, the the corresponding pointers entry is marked deleted for you. In these ways, they behave very much like virtuals. By having a table, however, we are free to add new fields. Pointables pay for this flexibility by being slightly more expensive than virtuals: Records must be inserted into/deleted from two tables (the pointable's table and the pointers table). The pointable table needs its own primary key index. Here is a definition of a pointable type (indicating an ActivityPub activity whose type we don't recognise, stored as a JSON blob): defmodule Bonfire.Data.Social.APActivity do use Pointers.Pointable , otp_app : :bonfire_data_social , table_id : &quot;30NF1REAPACTTAB1ENVMBER0NE&quot; , source : &quot;bonfire_data_social_apactivity&quot; pointable_schema do field :json , :map end end The choice of using a pointable instead of a virtual combined with one or more mixins is ultimately up to you.","ref":"database.html#declaring-object-types"},{"type":"extras","title":"Bonfire's Database - an intro - Writing Migrations","doc":"Migrations are typically included along with the schemas as public APIs you can call within your project's migrations. Virtuals Most virtuals are incredibly simple to migrate for: defmodule Bonfire.Data.Social.Post.Migration do import Pointers.Migration alias Bonfire.Data.Social.Post def migrate_post ( ) , do : migrate_virtual ( Post ) end If you need to do more work, it can be a little trickier. Here's an example for block , which also creates a unique index on another table: defmodule Bonfire.Data.Social.Block.Migration do import Ecto.Migration import Pointers.Migration import Bonfire.Data.Edges.Edge.Migration alias Bonfire.Data.Social.Block def migrate_block_view ( ) , do : migrate_virtual ( Block ) def migrate_block_unique_index ( ) , do : migrate_type_unique_index ( Block ) def migrate_block ( dir \\\\ direction ( ) ) def migrate_block ( :up ) do migrate_block_view ( ) migrate_block_unique_index ( ) end def migrate_block ( :down ) do migrate_block_unique_index ( ) migrate_block_view ( ) end end Notice how we have to write our up and down versions separately to get the correct ordering of operations. Pointables As of now, pointables are a little trickier to define flexibly than virtuals because we want to preserve the ability for the user to define extra fields in config. There are some questions about how useful this is in practice, so we might go for a simpler option in future. Example: defmodule Bonfire.Data.Social.APActivity.Migration do @moduledoc false use Ecto.Migration import Pointers.Migration alias Bonfire.Data.Social.APActivity defp make_apactivity_table ( exprs ) do quote do require Pointers.Migration Pointers.Migration . create_pointable_table ( Bonfire.Data.Social.APActivity ) do Ecto.Migration . add :json , :jsonb unquote_splicing ( exprs ) end end end defmacro create_apactivity_table , do : make_apactivity_table ( [ ] ) defmacro create_apactivity_table ( [ do : body ] ) , do : make_apactivity_table ( body ) def drop_apactivity_table ( ) , do : drop_pointable_table ( APActivity ) defp maa ( :up ) , do : make_apactivity_table ( [ ] ) defp maa ( :down ) do quote do : Bonfire.Data.Social.APActivity.Migration . drop_apactivity_table ( ) end defmacro migrate_apactivity ( ) do quote do if Ecto.Migration . direction ( ) == :up , do : unquote ( maa ( :up ) ) , else : unquote ( maa ( :down ) ) end end end Mixins Mixins look much like pointables: defmodule Bonfire.Data.Social.Profile.Migration do import Pointers.Migration alias Bonfire.Data.Social.Profile # create_profile_table/{0,1} defp make_profile_table ( exprs ) do quote do require Pointers.Migration Pointers.Migration . create_mixin_table ( Bonfire.Data.Social.Profile ) do Ecto.Migration . add :name , :text Ecto.Migration . add :summary , :text Ecto.Migration . add :website , :text Ecto.Migration . add :location , :text Ecto.Migration . add :icon_id , strong_pointer ( Bonfire.Files.Media ) Ecto.Migration . add :image_id , strong_pointer ( Bonfire.Files.Media ) unquote_splicing ( exprs ) end end end defmacro create_profile_table ( ) , do : make_profile_table ( [ ] ) defmacro create_profile_table ( [ do : { _ , _ , body } ] ) , do : make_profile_table ( body ) # drop_profile_table/0 def drop_profile_table ( ) , do : drop_mixin_table ( Profile ) # migrate_profile/{0,1} defp mp ( :up ) , do : make_profile_table ( [ ] ) defp mp ( :down ) do quote do Bonfire.Data.Social.Profile.Migration . drop_profile_table ( ) end end defmacro migrate_profile ( ) do quote do if Ecto.Migration . direction ( ) == :up , do : unquote ( mp ( :up ) ) , else : unquote ( mp ( :down ) ) end end end Multimixins Similar to mixins: defmodule Bonfire.Data.Social.FeedPublish.Migration do import Ecto.Migration import Pointers.Migration alias Bonfire.Data.Social.FeedPublish @feed_publish_table FeedPublish . __schema__ ( :source ) # create_feed_publish_table/{0,1} defp make_feed_publish_table ( exprs ) do quote do require Pointers.Migration Pointers.Migration . create_mixin_table ( Bonfire.Data.Social.FeedPublish ) do Ecto.Migration . add :feed_id , Pointers.Migration . strong_pointer ( ) , primary_key : true unquote_splicing ( exprs ) end end end defmacro create_feed_publish_table ( ) , do : make_feed_publish_table ( [ ] ) defmacro create_feed_publish_table ( [ do : { _ , _ , body } ] ) , do : make_feed_publish_table ( body ) def drop_feed_publish_table ( ) , do : drop_pointable_table ( FeedPublish ) def migrate_feed_publish_feed_index ( dir \\\\ direction ( ) , opts \\\\ [ ] ) def migrate_feed_publish_feed_index ( :up , opts ) , do : create_if_not_exists ( index ( @feed_publish_table , [ :feed_id ] , opts ) ) def migrate_feed_publish_feed_index ( :down , opts ) , do : drop_if_exists ( index ( @feed_publish_table , [ :feed_id ] , opts ) ) defp mf ( :up ) do quote do Bonfire.Data.Social.FeedPublish.Migration . create_feed_publish_table ( ) Bonfire.Data.Social.FeedPublish.Migration . migrate_feed_publish_feed_index ( ) end end defp mf ( :down ) do quote do Bonfire.Data.Social.FeedPublish.Migration . migrate_feed_publish_feed_index ( ) Bonfire.Data.Social.FeedPublish.Migration . drop_feed_publish_table ( ) end end defmacro migrate_feed_publish ( ) do quote do if Ecto.Migration . direction ( ) == :up , do : unquote ( mf ( :up ) ) , else : unquote ( mf ( :down ) ) end end defmacro migrate_feed_publish ( dir ) , do : mf ( dir ) end","ref":"database.html#writing-migrations"},{"type":"extras","title":"Bonfire's Database - an intro - More examples","doc":"Take a look at a few of the migrations in our data libraries. Between them, they cover most scenarios by now: bonfire_data_social bonfire_data_access_control bonfire_data_identity bonfire_data_edges (feat. bonus triggers) If you want to know exactly what's happening, you may want to read the code for Pointers.Migration .","ref":"database.html#more-examples"},{"type":"extras","title":"Boundaries & Access Control","doc":"Boundaries is Bonfire's flexible framework for full per-user/per-object/per-action access control. It makes it easy to ensure that users may only see or do what they are supposed to.","ref":"boundaries.html"},{"type":"extras","title":"Boundaries & Access Control - Users and Circles","doc":"Ignoring any future bot support, boundaries ultimately apply to users. Circles are a way of categorising users. Each user has their own set of circles that they can add to and categorise other users in as they please. Circles allow a user to categorise work colleagues differently from friends, for example. They can choose to allow different interactions from users in the two circles or limit which content each sees on a per-item basis.","ref":"boundaries.html#users-and-circles"},{"type":"extras","title":"Boundaries & Access Control - Verbs","doc":"Verbs represent actions that the user could perform, such as reading a post or replying to a message. Each verb has a unique ID, like the table IDs from pointers , which must be known to the system through configuration.","ref":"boundaries.html#verbs"},{"type":"extras","title":"Boundaries & Access Control - Permissions","doc":"Permissions can take one of three values: true false nil (or null to postgresql). true and false are easy enough to understand as yes and no, but what is nil ? nil represents no answer - in isolation, it is the same as false . Because a user could be in more than one circle and each circle may have a different permission, we need a way of combining permissions to produce a final result permission. nil is treated differently here: left right result nil nil nil nil true true nil false false true nil true true true true true false false false nil false false true false false false false To be considered granted, the result of combining the permissions must be true ( nil is as good as false again here). nil can thus be seen as a sort of weak false , being easily overridden by a true, but also not by itself granting anything. At first glance, this may seem a little odd, but it gives us a little additional flexibility which is useful for implementing features such as blocks (where false is really useful!). With a little practice, it feels quite natural to use.","ref":"boundaries.html#permissions"},{"type":"extras","title":"Boundaries & Access Control - ACLs and Grants","doc":"An ACL is &quot;just&quot; a collection of Grant s. Grants combine the ID of the ACL they exist in with a verb id, a user or circle id and a permission, thus providing a decision about whether a particular action is permitted for a particular user (or all users in a particular circle). Conceptually, an ACL contains a grant for every user-or-circle/verb combination, but most of the permissions are nil . We do not record grants with nil permissions in the database, saving substantially on storage space and compute requirements.","ref":"boundaries.html#acls-and-grants"},{"type":"extras","title":"Boundaries & Access Control - Controlled - Applying boundaries to an object","doc":"An object is linked to one or more ACL s by the Controlled multimixin, which pairs an object ID with an ACL ID. Because it is a multimixin, a given object can have multiple ACLs applied. In the case of overlap, permissions are combined in the manner described earlier. See also https://doc.bonfirenetworks.org/extension-bonfire_data_access_control.html for more docs (TODO: merge/deduplicate)","ref":"boundaries.html#controlled-applying-boundaries-to-an-object"},{"type":"extras","title":"GraphQL API","doc":"","ref":"graphql.html"},{"type":"extras","title":"GraphQL API - GraphQL Introduction","doc":"Go to http://your-app-url/api/ to start playing with the GraphQL API. The GraphiQL UI should autocomplete types, queries and mutations for you, and you can also explore the schema there. Let's start with a simple GraphQL thoeretical query: query { greetings ( limit : 10 ) { greeting to { name } } } Let's break this apart: query {} is how you retrieve information from GraphQL. greetings is a field within the query. greetings takes a limit argument, a positive integer. greetings has two fields, greeting and to . to has one field , name . This query is asking for a list of (up to) 10 greetings and the people they are for. Notice that the result of both greetings and to are map/object structures with their own fields and that if the type has multiple fields, we can select more than one field. Here is some possible data we could get returned %{ greetings : [ %{ greeting : &quot;hello&quot; , to : %{ name : &quot;dear reader&quot; } } , # english %{ greeting : &quot;hallo&quot; , to : %{ name : &quot;beste lezer&quot; } } , # dutch ] } Where is the magic? Typically an object type will reside in its own table in the database, so this query is actually querying two tables in one go. In fact, given a supporting schema, you can nest queries arbitrarily and the backend will figure out how to run them. The fact that you can represent arbitrarily complex queries puts quite a lot of pressure on the backend to make it all efficient. This is still a work in progress at this time.","ref":"graphql.html#graphql-introduction"},{"type":"extras","title":"GraphQL API - Absinthe Introduction","doc":"Every field is filled by a resolver. Let's take our existing query and define a schema for it in Absinthe's query DSL: defmodule MyApp.Schema do # the schema macro language use Absinthe.Schema.Notation # where we will actually resolve the fields alias MyApp.Resolver # Our user object is pretty simple, just a name object :user do field :name , non_null ( :string ) end # This one is slightly more complicated, we have that nested `to` object :greeting do # the easy one field :greeting , non_null ( :string ) # the hard one. `edge` is the term for when we cross an object boundary. field :to , non_null ( :user ) , do : resolve ( &amp; Resolver . to_edge / 3 ) end # something to put our top level queries in, because they&#39;re just fields too! object :queries do field :greetings , non_null ( list_of ( non_null ( :string ) ) ) do arg :limit , :integer # optional resolve &amp; Resolver . greetings / 2 # we need to manually process this one end end end There are a couple of interesting things about this: Sprinklings of not_null to require that values be present (if you don't return them, absinthe will get upset). Only two fields have explicit resolvers. Anything else will default to a map key lookup (which is more often than not what you want). greeting.to_edge has a /3 resolver and queries.greetings a /2 resolver. To understand the last one (and partially the middle one), we must understand how resolution works and what a parent is. The best way of doing that is probably to look at the resolver code: defmodule MyApp.Resolver do # For purposes of this, we will just fake the data out defp greetings_data ( ) do [ %{ greeting : &quot;hello&quot; , to : %{ name : &quot;dear reader&quot; } } , # english %{ greeting : &quot;hallo&quot; , to : %{ name : &quot;beste lezer&quot; } } , # dutch ] end # the /2 resolver takes only arguments (which in this case is just limit) # and an info (which we&#39;ll explain later) def greetings ( %{ limit : limit } , _info ) when is_integer ( limit ) and limit &gt; 0 do { :ok , Enum . take ( greetings_data ( ) , limit ) } # absinthe expects an ok/error tuple end def greetings ( _args , _info ) , do : { :ok , greetings_data ( ) } # no limit # the /3 resolver takes an additional parent argument in first position. # `parent` here will be the `greeting` we are resolving `to` for. def to_edge ( parent , args , info ) , do : Map . get ( parent , :to ) end The keen-eyed amongst you may have noticed I said the default resolver is a map lookup and our to_edge/3 is a map lookup too, so technically we didn't need to write it. But then you wouldn't have an example of a /3 resolver! In most of the app, these will be querying from the database, not looking up in a constant. So for every field, a resolver function is run. It defaults to a map lookup, but you can override it with resolve/1 . It may or may not have arguments. And all absinthe resolvers return an ok/error tuple.","ref":"graphql.html#absinthe-introduction"},{"type":"extras","title":"GraphQL API - Patterns","doc":"","ref":"graphql.html#patterns"},{"type":"extras","title":"Message Rewrite Facility","doc":"WARNING: Due to how this app currently handles its configuration, MRF is only usable if you're building your own docker image. The Message Rewrite Facility (MRF) is a subsystem that is implemented as a series of hooks that allows the administrator to rewrite or discard messages. Possible uses include: marking incoming messages with media from a given account or instance as sensitive rejecting messages from a specific instance rejecting reports (flags) from a specific instance removing/unlisting messages from the public timelines removing media from messages sending only public messages to a specific instance The MRF provides user-configurable policies. The default policy is NoOpPolicy , which disables the MRF functionality. Bonfire also includes an easy to use policy called SimplePolicy which maps messages matching certain pre-defined criterion to actions built into the policy module. It is possible to use multiple, active MRF policies at the same time.","ref":"mrf.html"},{"type":"extras","title":"Message Rewrite Facility - Using SimplePolicy","doc":"SimplePolicy is capable of handling most common admin tasks. To use SimplePolicy , you must enable it. Do so by adding the following to your :instance config object, so that it looks like this: config :bonfire , :instance , [ ... ] rewrite_policy : ActivityPub.MRF.SimplePolicy Once SimplePolicy is enabled, you can configure various groups in the :mrf_simple config object. These groups are: media_removal : Servers in this group will have media stripped from incoming messages. media_nsfw : Servers in this group will have the #nsfw tag and sensitive setting injected into incoming messages which contain media. reject : Servers in this group will have their messages rejected. report_removal : Servers in this group will have their reports (flags) rejected. Servers should be configured as lists. Example This example will enable SimplePolicy , block media from illegalporn.biz , mark media as NSFW from porn.biz and porn.business , reject messages from spam.com and block reports (flags) from troll.mob : config :activity_pub , :instance , rewrite_policy : [ ActivityPub.MRF.SimplePolicy ] config :activity_pub , :mrf_simple , media_removal : [ &quot;illegalporn.biz&quot; ] , media_nsfw : [ &quot;porn.biz&quot; , &quot;porn.business&quot; ] , reject : [ &quot;spam.com&quot; ] , report_removal : [ &quot;troll.mob&quot; ] Use with Care The effects of MRF policies can be very drastic. It is important to use this functionality carefully. Always try to talk to an admin before writing an MRF policy concerning their instance.","ref":"mrf.html#using-simplepolicy"},{"type":"extras","title":"Message Rewrite Facility - Writing your own MRF Policy","doc":"As discussed above, the MRF system is a modular system that supports pluggable policies. This means that an admin may write a custom MRF policy in Elixir or any other language that runs on the Erlang VM, by specifying the module name in the rewrite_policy config setting. For example, here is a sample policy module which rewrites all messages to &quot;new message content&quot;: # This is a sample MRF policy which rewrites all Notes to have &quot;new message # content.&quot; defmodule Site.RewritePolicy do @behavior ActivityPub.MRF # Catch messages which contain Note objects with actual data to filter. # Capture the object as `object`, the message content as `content` and the # entire activity itself as `activity`. @impl true def filter ( %{ &quot;type&quot; =&gt; &quot;Create&quot; , &quot;object&quot; =&gt; %{ &quot;type&quot; =&gt; &quot;Note&quot; , &quot;content&quot; =&gt; content } = object } = message ) when is_binary ( content ) do # Subject / CW is stored as summary instead of `name` like other AS2 objects # because of Mastodon doing it that way. summary = object [ &quot;summary&quot; ] # edits go here. content = &quot;new message content&quot; # Assemble the mutated object. object = object |&gt; Map . put ( &quot;content&quot; , content ) |&gt; Map . put ( &quot;summary&quot; , summary ) # Assemble the mutated activity. { :ok , Map . put ( activity , &quot;object&quot; , object ) } end # Let all other messages through without modifying them. @impl true def filter ( message ) , do : { :ok , message } end If you save this file as lib/site/mrf/rewrite_policy.ex , it will be included when you next rebuild Bonfire. You can enable it in the configuration like so: config :activity_pub , :instance , rewrite_policy : [ ActivityPub.MRF.SimplePolicy , Site.RewritePolicy ]","ref":"mrf.html#writing-your-own-mrf-policy"},{"type":"extras","title":"Bonfire Changelog","doc":"","ref":"changelog.html"},{"type":"extras","title":"Bonfire Changelog - [0.3.5-beta (2022-09-23)]","doc":"Added Coordination MVP #445 by mayel &amp; ivanminutillo UI to enable/disable extensions in settings #448 Static page generator #444 Publish creation of sub-topic in the topic's feed #439 by mayel Changed Refactor navs/sidebars to use dynamic navigation &amp; widgets provided by extensions #447 Other When I reply to a task, the activity in the feed does not show the parent activity #449 Use same composer for create post / topic / create a new list / create task","ref":"changelog.html#0-3-5-beta-2022-09-23"},{"type":"extras","title":"Bonfire Changelog - [0.3.4-beta.8 (2022-08-26)]","doc":"Added Remember position in timeline #392 by mayel Should be able to click on a notification to see the related activity #412 by mayel Actions when someone clicks on follow/boost/like/reply buttons on a profile or feed while logged out #441 Combine duplicate posts #396 by mayel Changed User preferences missing a consistent UX structure #430 Bug: pop-ups from compose box are hidden if close to edge #394 reset the CW field after posting #378 On mobile, there should be an obvious way to reply to a single post when viewing it by itself #371 Alerts and feedback messages need to adopt a solid pattern #305 Fixed i can't see what i'm typing past a certain amount of text. Like rivht now i dont' see what i'm typing. Might be some typos then^^ #425 Bug: When you switch user it sometimes stays on the switch user page #377 by mayel Other Make push notification system more solid #180 Test/fix/improve graceful degradation (usage without JS, or without a LiveView websocket, i.e. when logged out) #365 by mayel use @prop in Surface views/components instead of e(assigns, :prop, default) and declare defaults in props or mount/1 #414","ref":"changelog.html#0-3-4-beta-8-2022-08-26"},{"type":"extras","title":"Bonfire Changelog - [0.3.4-beta.6 (2022-08-19)]","doc":"Changed 3 options for smart input (sidebar, modal, floating) and improve responsive (modal on small screens) #443 Improve feeds async loading #437 by mayel Improve media/link attachments #440 Fixed Show and count only local users in user directory #438 by mayel","ref":"changelog.html#0-3-4-beta-6-2022-08-19"},{"type":"extras","title":"Bonfire Changelog - [0.3.4 (2022-08-09)]","doc":"Added Define &amp; implement granular role &amp; permission system for instance administration and moderation #406","ref":"changelog.html#0-3-4-2022-08-09"},{"type":"extras","title":"Bonfire Changelog - [0.3.3 (2022-08-02)]","doc":"Added Define &amp; implement granular role &amp; permission system for instance administration and moderation #406","ref":"changelog.html#0-3-3-2022-08-02"},{"type":"extras","title":"Bonfire Changelog - [0.3.2 (2022-07-30)]","doc":"Added Pagination topics list &amp; feeds within topics #431 Check boundaries of a topic when tagging and if allowed auto-boost the tagged object in the topic's outbox #428 Show followed topics on a list #424 Topic settings #423 Topic activity preview #422 Browse topics #421 Tag something (eg. post/user) with a topic at any time (depending on boundaries) #416 Tag a post with a topic when writing a new post (or reply) #415 CRUD topics #410 Create a users directory #159 Changed Optimise LiveView rendering #426 Allow us to scroll from anywhere #391 Other Add unique key to encircle #248 Database Question #3 Being able to change activity type from the composer #429 use created and extra_info mixins on Category #433 check boundaries for edit and archive topic #434","ref":"changelog.html#0-3-2-2022-07-30"},{"type":"extras","title":"Bonfire Changelog - 0.3.1-beta.9 (2022-07-22)","doc":"Fixed BUG:Responsive, navigation goes under the mobile bottom tab #420 by ivanminutillo","ref":"changelog.html#0-3-1-beta-9-2022-07-22"},{"type":"extras","title":"Bonfire Changelog - 0.3.1-beta (2022-07-19)","doc":"Added Circles &amp; flexible boundaries #223 by mayel &amp; ivanminutillo Compose box at the bottom of the screen as an alternative to the standard microblogging input box #419 &quot;Compact layout&quot; in user preferences #418 Fetch metadata of links included in a post and show previews (of images, videos, etc) in feeds #314 Changed Pasting images into the editor should upload them #411 Bug: When starting from the feed page, clicking back would exit the site #400 /write page was missing the boundary selector #398 Keep me logged in #395 Font size is too small in compose window #388 UI: moved topbar in the header to sidebar #362 Improved responsive UI for use on small screens Fixed Bug: some notifications / live feed updates were making all other activities in the feed disappear #383 by mayel Bug: followed/followers pages remained empty despite having followed people #373 by mayel Bug: followed activity missing the person (in main feeds) #372 by mayel Bug: follow notification clears the home feed except for the &quot;new follow&quot; post #366 by mayel Bug: images attached to a post should appear in the feed #364","ref":"changelog.html#0-3-1-beta-2022-07-19"},{"type":"extras","title":"Changelog","doc":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog This project adheres to Semantic Versioning","ref":"changelog-autogenerated.html"},{"type":"extras","title":"Changelog - [Unreleased (2022-11-19)]","doc":"Added Enable/disable extensions #448 Coordination MVP #445 by mayel &amp; ivanminutillo Static page generator #444 Export my data #235 Customise bonfire without forking #89 Config-driven routing #88 Changed Refactor navs/sidebars to use dynamic navigation &amp; widgets provided by extensions #447 LivePush security - efficient version #234 More efficient (batched) insertion of associated data #233 Beta: the great renaming/reorg, a stable API? #232 Improve feeds performance based on benchmark #226 Other UI for federation configuration #39 Publish creation of sub-topic in the topic's feed #439 by mayel When I reply to a task, the activity in the feed does not show the parent activity #449 Feature Proposal: Use prefers-color-scheme #451","ref":"changelog-autogenerated.html#unreleased-2022-11-19"},{"type":"extras","title":"Bonfire Classic","doc":"This app is part of the Bonfire ecosystem and bundles the following extensions: Bonfire.Common - common utils Bonfire.Me - accounts, user profiles... Bonfire.Social - feeds, activities, posts, boosting, flagging, etc... Bonfire.UI.Social - interface for basic social activities Bonfire.Boundaries - define circles and associated privacy or permissions Bonfire.Federate.ActivityPub - federates activities with ActivityPub to participate in the fediverse Bonfire.Tag - @ mentions, hashtags, and tagging using topics/categories from Bonfire.Classify Bonfire.Classify - categories &amp; classifications in taxonomies Bonfire.Geolocate - places","ref":"classic.html"},{"type":"extras","title":"Bonfire Classic - More information","doc":"See the main docs .","ref":"classic.html#more-information"},{"type":"extras","title":"Bonfire Community","doc":"This app is a flavour of Bonfire and bundles the following extensions: Bonfire.Common - common utils Bonfire.Me - accounts, user profiles... Bonfire.Social - feeds, activities, posts, boosting, flagging, etc... Bonfire.UI.Social - interface for basic social activities Bonfire.Boundaries - define circles and associated privacy or permissions Bonfire.Federate.ActivityPub - federates activities with ActivityPub to participate in the fediverse Bonfire.Tag - @ mentions, hashtags, and tagging using topics/categories from Bonfire.Classify Bonfire.Classify - categories &amp; classifications in taxonomies Bonfire.UI.Groups - groups Bonfire.UI.Topics - topics","ref":"community.html"},{"type":"extras","title":"Bonfire Community - More information","doc":"See the main docs .","ref":"community.html#more-information"},{"type":"extras","title":"Bonfire Cooperation","doc":"This app is a flavour of Bonfire and bundles the following extensions: Bonfire.Common - common utils Bonfire.Me - accounts, user profiles... Bonfire.Social - feeds, activities, posts, boosting, flagging, etc... Bonfire.UI.Social - interface for basic social activities Bonfire.Boundaries - define circles and associated privacy or permissions Bonfire.Federate.ActivityPub - federates activities with ActivityPub to participate in the fediverse Bonfire.Tag - @ mentions, hashtags, and tagging using topics/categories from Bonfire.Classify Bonfire.Classify - categories &amp; classifications in taxonomies Bonfire.Geolocate - places Bonfire.Quantify - units &amp; measures Bonfire.ValueFlows - economic activities with ValueFlows Bonfire.ValueFlows.Observe - observation of economic resources Bonfire.API.GraphQL - a GraphQL client API Bonfire.UI.ValueFlows - reusable frontend components for economic activities Bonfire.UI.Coordination - basic coordination UI for projects and communities Bonfire.Kanban - coordination tools with drag-and-drop card UI Bonfire.Breadpub - needs &amp; offers for mutual aid","ref":"cooperation.html"},{"type":"extras","title":"Bonfire Cooperation - More information","doc":"See the main docs .","ref":"cooperation.html#more-information"},{"type":"extras","title":"Haha Academy","doc":"This app is part of the Bonfire ecosystem and bundles the following extensions: Bonfire.Common - common utils Bonfire.Me - accounts, user profiles... Bonfire.Social - feeds, activities, posts, boosting, flagging, etc... Bonfire.UI.Social - interface for basic social activities Bonfire.Boundaries - define circles and associated privacy or permissions Bonfire.Federate.ActivityPub - federates activities with ActivityPub to participate in the fediverse Bonfire.Tag - @ mentions, hashtags, and tagging using topics/categories from Bonfire.Classify Bonfire.Classify - categories &amp; classifications in taxonomies Bonfire.Geolocate - places","ref":"haha.html"},{"type":"extras","title":"Haha Academy - More information","doc":"See the main docs .","ref":"haha.html#more-information"},{"type":"extras","title":"Reflow","doc":"This app is part of the Bonfire and ValueFlows ecosystems and bundles the following extensions: Bonfire.Common - common utils Bonfire.Me - accounts, user profiles... Bonfire.Social - feeds, activities, posts, boosting, flagging, etc... Bonfire.UI.Social - interface for basic social activities Bonfire.Boundaries - define circles and associated privacy or permissions Bonfire.Federate.ActivityPub - federates activities with ActivityPub to participate in the fediverse Bonfire.Tag - @ mentions, hashtags, and tagging using topics/categories from Bonfire.Classify Bonfire.Classify - categories &amp; classifications in taxonomies Bonfire.Geolocate - places Bonfire.Quantify - units &amp; measures Bonfire.ValueFlows - economic activities with ValueFlows Bonfire.ValueFlows.Observe - observation of economic resources Bonfire.API.GraphQL - a GraphQL client API Bonfire.UI.ValueFlows - reusable frontend components for economic activities Bonfire.UI.Reflow - frontend for the Reflow project","ref":"reflow.html"},{"type":"extras","title":"Reflow - More information","doc":"See the main docs .","ref":"reflow.html#more-information"},{"type":"extras","title":"Upcycle","doc":"This app is a flavour of Bonfire and bundles the following extensions: Bonfire:Common - common utils Bonfire:Me - accounts, user profiles... Bonfire:Social - feeds, activities, posts, boosting, flagging, etc... Bonfire:UI:Social - interface for basic social activities Bonfire:Boundaries - define circles and associated privacy or permissions Bonfire:Federate:ActivityPub - federates activities with ActivityPub to participate in the fediverse Bonfire:Tag - @ mentions, hashtags, and tagging using topics/categories from Bonfire:Classify Bonfire:Classify - categories &amp; classifications in taxonomies Bonfire:Geolocate - places Bonfire:Quantify - units &amp; measures Bonfire:ValueFlows - economic activities with ValueFlows Bonfire:ValueFlows:Observe - observation of economic resources Bonfire:API:GraphQL - a GraphQL client API Bonfire:UI:ValueFlows - reusable frontend components for economic activities Bonfire:UI:Coordination - basic coordination UI for projects and communities Bonfire:Kanban - coordination tools with drag-and-drop card UI Bonfire:Breadpub - needs &amp; offers for mutual aid Bonfire:Files - file management for bonfire apps Bonfire:Data:SharedUser - database models for shared users in the bonfire ecosystem Bonfire:Upcycle - Upcycle UI","ref":"upcycle.html"},{"type":"extras","title":"Upcycle - More information","doc":"See the main docs .","ref":"upcycle.html#more-information"},{"type":"extras","title":"Classic","doc":"Package License Version Link absinthe MIT 1.7.0 https://hex.pm/packages/absinthe absinthe_error_payload BSD-3; Unrecognized license 1.1.4 https://hex.pm/packages/absinthe_error_payload absinthe_phoenix MIT 2.0.2 https://hex.pm/packages/absinthe_phoenix absinthe_plug MIT 1.5.8 https://hex.pm/packages/absinthe_plug activity_pub AGPL v3 0.1.0 https://github.com/bonfire-networks/activity_pub argon2_elixir Apache 2.0 ~&gt; 3.0 https://hex.pm/packages/argon2_elixir arrows Undefined 0.1.0 https://github.com/bonfire-networks/arrows bamboo MIT 2.2.0 https://hex.pm/packages/bamboo bamboo_smtp MIT 4.2.1 https://hex.pm/packages/bamboo_smtp benchee MIT 1.1.0 https://hex.pm/packages/benchee benchee_html MIT 1.0.0 https://hex.pm/packages/benchee_html benchee_json MIT 1.0.0 https://hex.pm/packages/benchee_json bonfire_api_graphql MPL 2.0 https://github.com/bonfire-networks/bonfire_api_graphql bonfire_boundaries MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_boundaries bonfire_classify AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_classify bonfire_common MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_common bonfire_data_access_control MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_access_control bonfire_data_activity_pub MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_activity_pub bonfire_data_edges Undefined 0.1.0 https://github.com/bonfire-networks/bonfire_data_edges bonfire_data_identity MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_identity bonfire_data_shared_user MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_shared_user bonfire_data_social MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_social bonfire_ecto Undefined 0.1.0 https://github.com/bonfire-networks/bonfire_ecto bonfire_editor_ck MIT 0.1.0 https://github.com/bonfire-networks/bonfire_editor_ck bonfire_editor_quill AGPL v3 0.0.1 https://github.com/bonfire-networks/bonfire_editor_quill bonfire_epics Apache 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_epics bonfire_fail MPL 2.0 https://github.com/bonfire-networks/bonfire_fail bonfire_federate_activitypub AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_federate_activitypub bonfire_files AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_files bonfire_invite_links AGPL v3 0.0.1 https://github.com/bonfire-networks/bonfire_invite_links bonfire_mailer MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_mailer bonfire_me AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_me bonfire_search AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_search bonfire_social AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_social bonfire_tag AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_tag bonfire_ui_common MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_ui_common bonfire_ui_me AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_ui_me bonfire_ui_social AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_ui_social cachex MIT 3.4.0 https://hex.pm/packages/cachex certifi BSD 2.9.0 https://hex.pm/packages/certifi cldr_utils Apache 2.0 2.17.2 https://hex.pm/packages/cldr_utils combine MIT 0.10.0 https://hex.pm/packages/combine comeonin BSD-3-Clause; Unrecognized license 5.3.3 https://hex.pm/packages/comeonin connection Apache 2.0 1.1.0 https://hex.pm/packages/connection cowboy ISC 2.9.0 https://hex.pm/packages/cowboy cowboy_telemetry Apache 2.0 0.4.0 https://hex.pm/packages/cowboy_telemetry cowlib ISC 2.11.0 https://hex.pm/packages/cowlib dataloader MIT 1.0.10 https://hex.pm/packages/dataloader db_connection Apache 2.0 2.4.2 https://hex.pm/packages/db_connection decimal Apache 2.0 2.0.0 https://hex.pm/packages/decimal deep_merge MIT 1.0.0 https://hex.pm/packages/deep_merge earmark Apache 2.0 1.4.28 https://hex.pm/packages/earmark earmark_parser Apache 2.0 1.4.26 https://hex.pm/packages/earmark_parser ecto Apache 2.0 3.8.4 https://hex.pm/packages/ecto ecto_erd Apache 2.0 0.4.2 https://hex.pm/packages/ecto_erd ecto_materialized_path Apache 2.0 0.3.0 https://github.com/bonfire-networks/ecto_materialized_path ecto_psql_extras MIT 0.7.4 https://hex.pm/packages/ecto_psql_extras ecto_shorts MIT 1.1.1 https://github.com/bonfire-networks/ecto_shorts ecto_sparkles Undefined 0.1.0 https://github.com/bonfire-networks/ecto_sparkles ecto_sql Apache 2.0 3.8.3 https://hex.pm/packages/ecto_sql elixir_make Apache 2.0 ~&gt; 0.6 https://hex.pm/packages/elixir_make email_checker MIT 0.2.4 https://hex.pm/packages/email_checker emote Undefined 0.1.0 https://github.com/bonfire-networks/emote eqrcode MIT 0.1.10 https://hex.pm/packages/eqrcode eternal MIT 1.2.2 https://hex.pm/packages/eternal ex_aws MIT 2.3.2 https://hex.pm/packages/ex_aws ex_aws_s3 MIT 2.3.2 https://hex.pm/packages/ex_aws_s3 ex_cldr Apache 2.0 2.30.0 https://hex.pm/packages/ex_cldr ex_cldr_languages Apache 2.0 0.3.3 https://hex.pm/packages/ex_cldr_languages ex_cldr_plugs Apache 2.0 1.0.0 https://hex.pm/packages/ex_cldr_plugs ex_doc Apache 2.0 0.28.4 https://hex.pm/packages/ex_doc ex_machina MIT ~&gt; 2.4 https://hex.pm/packages/ex_machina ex_ulid Apache 2.0 0.1.0 https://hex.pm/packages/ex_ulid ex_unit_notifier MIT ~&gt; 1.0 https://hex.pm/packages/ex_unit_notifier exsync BSD 3-Clause; Unrecognized license 0.2.4 https://hex.pm/packages/exsync faker MIT 0.17.0 https://hex.pm/packages/faker fast_ngram MIT 1.2.0 https://hex.pm/packages/fast_ngram fetch_favicon MIT 0.1.3 https://hex.pm/packages/fetch_favicon file_info MIT 0.0.4 https://hex.pm/packages/file_info file_system WTFPL 0.2.10 https://hex.pm/packages/file_system flame_on MIT 0.5.0 https://hex.pm/packages/flame_on flexto Apache 2.0 0.2.3 https://github.com/bonfire-networks/flexto floki MIT 0.32.1 https://hex.pm/packages/floki gen_smtp BSD-2-Clause; Unrecognized license 1.2.0 https://hex.pm/packages/gen_smtp geo MIT 3.4.3 https://hex.pm/packages/geo gettext Apache 2.0 0.19.1 https://hex.pm/packages/gettext grumble Apache 2.0 ~&gt; 0.1.3 https://hex.pm/packages/grumble hackney Apache 2.0 1.18.1 https://hex.pm/packages/hackney html_entities MIT 0.5.2 https://hex.pm/packages/html_entities html_sanitize_ex MIT 1.4.2 https://hex.pm/packages/html_sanitize_ex http_signatures GPL v3 0.1.0 https://git.pleroma.social/pleroma/http_signatures.git httpoison MIT 1.8.1 https://hex.pm/packages/httpoison idna MIT 6.1.1 https://hex.pm/packages/idna inflex Apache 2.0 2.1.0 https://hex.pm/packages/inflex jason Apache 2.0 1.3.0 https://hex.pm/packages/jason jumper MIT 1.0.1 https://hex.pm/packages/jumper libgraph MIT 0.13.3 https://hex.pm/packages/libgraph licensir MIT 0.7.0 https://github.com/bonfire-networks/licensir linkify MIT 0.2.0 https://github.com/bonfire-networks/linkify makeup BSD; Unrecognized license 1.1.0 https://hex.pm/packages/makeup makeup_diff MIT 0.1.0 https://hex.pm/packages/makeup_diff makeup_eex BSD; Unrecognized license 0.1.1 https://hex.pm/packages/makeup_eex makeup_elixir BSD; Unrecognized license 0.16.0 https://hex.pm/packages/makeup_elixir makeup_erlang BSD 0.1.1 https://hex.pm/packages/makeup_erlang makeup_graphql BSD 0.1.2 https://hex.pm/packages/makeup_graphql makeup_html MIT 0.1.0 https://hex.pm/packages/makeup_html makeup_js MIT 0.1.0 https://hex.pm/packages/makeup_js makeup_sql BSD 0.1.0 https://hex.pm/packages/makeup_sql meck Apache 2.0 0.9.2 https://hex.pm/packages/meck metrics BSD 1.0.1 https://hex.pm/packages/metrics mime Apache 2.0 1.6.0 https://hex.pm/packages/mime mimerl MIT 1.2.0 https://hex.pm/packages/mimerl mimetype_parser MIT 0.1.3 https://hex.pm/packages/mimetype_parser mix_test_interactive MIT ~&gt; 1.2 https://hex.pm/packages/mix_test_interactive mix_test_watch MIT ~&gt; 1.0 https://hex.pm/packages/mix_test_watch mix_unused MIT; Unrecognized license 0.4.0 https://hex.pm/packages/mix_unused mochiweb MIT 2.22.0 https://hex.pm/packages/mochiweb mock MIT ~&gt; 0.3 https://hex.pm/packages/mock mogrify MIT 0.9.1 https://hex.pm/packages/mogrify mox Apache 2.0 ~&gt; 1.0 https://hex.pm/packages/mox nimble_parsec Apache 2.0 1.2.3 https://hex.pm/packages/nimble_parsec nimble_totp Apache 2.0 0.2.0 https://hex.pm/packages/nimble_totp nodeinfo AGPL v3 0.1.0 https://github.com/bonfire-networks/nodeinfo oban Apache 2.0 2.8.0 https://hex.pm/packages/oban paginator MIT 1.0.4 https://github.com/bonfire-networks/paginator pane MIT 0.4.1 https://hex.pm/packages/pane parse_trans Apache 2.0 3.3.1 https://hex.pm/packages/parse_trans pbkdf2_elixir BSD-3-Clause; Unrecognized license 2.0.0 https://hex.pm/packages/pbkdf2_elixir periscope Apache 2.0 0.4.6 https://hex.pm/packages/periscope phoenix MIT 1.6.10 https://hex.pm/packages/phoenix phoenix_ecto MIT 4.4.0 https://hex.pm/packages/phoenix_ecto phoenix_gon MIT 0.4.1 https://github.com/bonfire-networks/phoenix_gon phoenix_html MIT 3.2.0 https://hex.pm/packages/phoenix_html phoenix_live_dashboard MIT 0.6.5 https://hex.pm/packages/phoenix_live_dashboard phoenix_live_reload MIT 1.3.3 https://hex.pm/packages/phoenix_live_reload phoenix_live_view MIT 0.17.10 https://hex.pm/packages/phoenix_live_view phoenix_pubsub MIT 2.1.1 https://hex.pm/packages/phoenix_pubsub phoenix_view MIT 1.1.2 https://hex.pm/packages/phoenix_view plug Apache 2.0 1.13.6 https://hex.pm/packages/plug plug_cowboy Apache 2.0 2.5.2 https://hex.pm/packages/plug_cowboy plug_crypto Apache 2.0 1.2.2 https://hex.pm/packages/plug_crypto pointers Apache 2.0 0.6.0 https://github.com/bonfire-networks/pointers pointers_ulid MIT 0.2.2 https://github.com/bonfire-networks/pointers_ulid postgrex Apache 2.0 0.16.3 https://hex.pm/packages/postgrex pseudo_gettext Undefined 0.1.0 https://github.com/tmbb/pseudo_gettext ranch ISC 1.8.0 https://hex.pm/packages/ranch recase MIT 0.7.0 https://hex.pm/packages/recase redirect Apache 2.0 0.3.0 https://hex.pm/packages/redirect scribe MIT 0.10.0 https://hex.pm/packages/scribe sentry MIT 8.0.6 https://hex.pm/packages/sentry sleeplocks MIT 1.1.1 https://hex.pm/packages/sleeplocks sobelow Apache 2.0 0.11.1 https://hex.pm/packages/sobelow solid MIT 0.12.0 https://hex.pm/packages/solid sourceror Apache 2.0 0.11.1 https://hex.pm/packages/sourceror ssl_verify_fun MIT 1.1.6 https://hex.pm/packages/ssl_verify_fun statistex MIT 1.0.0 https://hex.pm/packages/statistex surface MIT 0.7.4 https://hex.pm/packages/surface surface_heroicons Undefined 0.5.3 https://github.com/rocketinsights/surface_heroicons sweet_xml MIT 0.7.3 https://hex.pm/packages/sweet_xml table_rex MIT 3.1.1 https://hex.pm/packages/table_rex telemetry Apache 2.0 1.1.0 https://hex.pm/packages/telemetry telemetry_metrics Apache 2.0 0.6.1 https://hex.pm/packages/telemetry_metrics telemetry_poller Apache 2.0 1.0.0 https://hex.pm/packages/telemetry_poller tesla MIT 1.4.4 https://hex.pm/packages/tesla timex MIT 3.7.8 https://hex.pm/packages/timex twinkle_star GPL v3 0.1.0 https://github.com/bonfire-networks/twinkle_star typed_struct MIT ~&gt; 0.3.0 https://hex.pm/packages/typed_struct tzdata MIT 1.1.1 https://hex.pm/packages/tzdata unicode_util_compat Apache 2.0 0.7.0 https://hex.pm/packages/unicode_util_compat unsafe MIT 1.0.1 https://hex.pm/packages/unsafe verbs MIT 0.6.1 https://github.com/shannonwells/verbs_ex voodoo Undefined 0.1.0 https://github.com/bonfire-networks/voodoo waffle Apache 2.0 1.1.6 https://hex.pm/packages/waffle wallaby MIT ~&gt; 0.29.1 https://hex.pm/packages/wallaby web_driver_client MIT ~&gt; 0.2.0 https://hex.pm/packages/web_driver_client where Apache 2.0 0.1.0 https://github.com/bonfire-networks/untangle zest Apache 2.0 0.1.2 https://hex.pm/packages/zest ------------------------------ ------------------------------------ ------------ ------------------------------------------------------------------","ref":"deps-classic.html"},{"type":"extras","title":"Cooperation","doc":"Package License Version Link absinthe MIT 1.7.0 https://hex.pm/packages/absinthe absinthe_client MIT 2.0.0 https://github.com/bonfire-networks/absinthe_client.git absinthe_error_payload BSD-3; Unrecognized license 1.1.4 https://hex.pm/packages/absinthe_error_payload absinthe_phoenix MIT 2.0.2 https://hex.pm/packages/absinthe_phoenix absinthe_plug MIT 1.5.8 https://hex.pm/packages/absinthe_plug activity_pub AGPL v3 0.1.0 https://github.com/bonfire-networks/activity_pub argon2_elixir Apache 2.0 ~&gt; 2.4 https://hex.pm/packages/argon2_elixir arrows Undefined 0.1.0 https://github.com/bonfire-networks/arrows bamboo MIT 2.2.0 https://hex.pm/packages/bamboo bamboo_smtp MIT 4.1.0 https://hex.pm/packages/bamboo_smtp bonfire_api_graphql MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_api_graphql bonfire_boundaries MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_boundaries bonfire_breadpub AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_breadpub bonfire_classify AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_classify bonfire_common MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_common bonfire_data_access_control MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_access_control bonfire_data_activity_pub MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_activity_pub bonfire_data_assort MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_assort bonfire_data_edges Undefined 0.1.0 https://github.com/bonfire-networks/bonfire_data_edges bonfire_data_identity MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_identity bonfire_data_shared_user MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_shared_user bonfire_data_social MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_data_social bonfire_editor_ck MIT 0.1.0 https://github.com/bonfire-networks/bonfire_editor_ck bonfire_epics Apache 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_epics bonfire_fail MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_fail bonfire_federate_activitypub AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_federate_activitypub bonfire_files AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_files bonfire_geolocate AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_geolocate bonfire_invite_links AGPL v3 0.0.1 https://github.com/bonfire-networks/bonfire_invite_links bonfire_mailer MPL 2.0 0.1.0 https://github.com/bonfire-networks/bonfire_mailer bonfire_me AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_me bonfire_quantify AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_quantify bonfire_search AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_search bonfire_social AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_social bonfire_tag AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_tag bonfire_ui_coordination AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_ui_coordination bonfire_ui_kanban AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_ui_kanban bonfire_ui_social AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_ui_social bonfire_ui_valueflows AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_ui_valueflows bonfire_valueflows AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_valueflows bonfire_valueflows_observe AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_valueflows_observe bonfire_website AGPL v3 0.1.0 https://github.com/bonfire-networks/bonfire_website cachex MIT 3.4.0 https://hex.pm/packages/cachex certifi BSD 2.9.0 https://hex.pm/packages/certifi cldr_utils Apache 2.0 2.17.1 https://hex.pm/packages/cldr_utils combine MIT 0.10.0 https://hex.pm/packages/combine comeonin BSD-3-Clause; Unrecognized license 5.3.3 https://hex.pm/packages/comeonin connection Apache 2.0 1.1.0 https://hex.pm/packages/connection cowboy ISC 2.9.0 https://hex.pm/packages/cowboy cowboy_telemetry Apache 2.0 0.4.0 https://hex.pm/packages/cowboy_telemetry cowlib ISC 2.11.0 https://hex.pm/packages/cowlib dataloader MIT 1.0.10 https://hex.pm/packages/dataloader db_connection Apache 2.0 2.4.1 https://hex.pm/packages/db_connection decimal Apache 2.0 2.0.0 https://hex.pm/packages/decimal earmark Apache 2.0 1.4.20 https://hex.pm/packages/earmark earmark_parser Apache 2.0 1.4.18 https://hex.pm/packages/earmark_parser ecto Apache 2.0 3.7.1 https://hex.pm/packages/ecto ecto_erd Apache 2.0 0.4.1 https://hex.pm/packages/ecto_erd ecto_materialized_path Apache 2.0 0.3.0 https://github.com/bonfire-networks/ecto_materialized_path ecto_psql_extras MIT 0.7.4 https://hex.pm/packages/ecto_psql_extras ecto_ranked MIT 0.5.0 https://hex.pm/packages/ecto_ranked ecto_shorts MIT 1.1.1 https://github.com/bonfire-networks/ecto_shorts ecto_sparkles Undefined 0.1.0 https://github.com/bonfire-networks/ecto_sparkles ecto_sql Apache 2.0 3.7.2 https://hex.pm/packages/ecto_sql eflambe Apache 2.0 0.2.2 https://hex.pm/packages/eflambe elixir_make Apache 2.0 ~&gt; 0.6 https://hex.pm/packages/elixir_make email_checker MIT 0.2.4 https://hex.pm/packages/email_checker emote Undefined 0.1.0 https://github.com/bonfire-networks/emote eternal MIT 1.2.2 https://hex.pm/packages/eternal ex_cldr Apache 2.0 2.26.1 https://hex.pm/packages/ex_cldr ex_doc Apache 2.0 0.28.1 https://hex.pm/packages/ex_doc ex_machina MIT ~&gt; 2.4 https://hex.pm/packages/ex_machina ex_unit_notifier MIT ~&gt; 1.0 https://hex.pm/packages/ex_unit_notifier exsync BSD 3-Clause; Unrecognized license 0.2.4 https://hex.pm/packages/exsync faker MIT 0.17.0 https://hex.pm/packages/faker fast_ngram MIT 1.2.0 https://hex.pm/packages/fast_ngram file_info MIT 0.0.4 https://hex.pm/packages/file_info file_system WTFPL 0.2.10 https://hex.pm/packages/file_system flame_on MIT 0.2.1 https://hex.pm/packages/flame_on flexto Apache 2.0 0.2.3 https://github.com/bonfire-networks/flexto floki MIT 0.32.0 https://hex.pm/packages/floki gen_smtp BSD 2-clause; Unrecognized license 1.1.1 https://hex.pm/packages/gen_smtp geo MIT 3.4.3 https://hex.pm/packages/geo geo_postgis MIT 3.4.1 https://hex.pm/packages/geo_postgis geocoder MIT 1.1.4 https://hex.pm/packages/geocoder geohash Apache 2.0 1.2.2 https://hex.pm/packages/geohash gettext Apache 2.0 0.19.1 https://hex.pm/packages/gettext git_diff MIT 0.6.3 https://hex.pm/packages/git_diff grumble Apache 2.0 ~&gt; 0.1.3 https://hex.pm/packages/grumble hackney Apache 2.0 1.18.1 https://hex.pm/packages/hackney html_entities MIT 0.5.2 https://hex.pm/packages/html_entities html_sanitize_ex MIT 1.4.2 https://hex.pm/packages/html_sanitize_ex http_signatures GPL v3 0.1.0 https://git.pleroma.social/pleroma/http_signatures.git httpoison MIT 1.8.0 https://hex.pm/packages/httpoison hut MIT 1.3.0 https://hex.pm/packages/hut idna MIT 6.1.1 https://hex.pm/packages/idna inflex Apache 2.0 2.1.0 https://hex.pm/packages/inflex jason Apache 2.0 1.3.0 https://hex.pm/packages/jason jumper MIT 1.0.1 https://hex.pm/packages/jumper licensir MIT 0.7.0 https://github.com/bonfire-networks/licensir linkify MIT 0.2.0 https://github.com/bonfire-networks/linkify makeup BSD; Unrecognized license 1.0.5 https://hex.pm/packages/makeup makeup_elixir BSD; Unrecognized license 0.15.2 https://hex.pm/packages/makeup_elixir makeup_erlang BSD 0.1.1 https://hex.pm/packages/makeup_erlang mappable New BSD 0.2.4 https://hex.pm/packages/mappable meck Apache 2.0 0.9.2 https://hex.pm/packages/meck metrics BSD 1.0.1 https://hex.pm/packages/metrics mime Apache 2.0 1.6.0 https://hex.pm/packages/mime mimerl MIT 1.2.0 https://hex.pm/packages/mimerl mimetype_parser MIT 0.1.3 https://hex.pm/packages/mimetype_parser mix_test_interactive MIT ~&gt; 1.0 https://hex.pm/packages/mix_test_interactive mix_test_watch MIT ~&gt; 1.0 https://hex.pm/packages/mix_test_watch mix_unused MIT; Unrecognized license 0.3.0 https://hex.pm/packages/mix_unused mochiweb MIT 2.22.0 https://hex.pm/packages/mochiweb mock MIT ~&gt; 0.3 https://hex.pm/packages/mock neuron ISC 5.0.0 https://hex.pm/packages/neuron nimble_parsec Apache 2.0 1.2.2 https://hex.pm/packages/nimble_parsec nodeinfo AGPL v3 0.1.0 https://github.com/bonfire-networks/nodeinfo oban Apache 2.0 2.8.0 https://hex.pm/packages/oban ok Apache 2.0 2.3.0 https://hex.pm/packages/ok paginator MIT 1.0.4 https://github.com/bonfire-networks/paginator pane MIT 0.4.1 https://hex.pm/packages/pane parse_trans Apache 2.0 3.3.1 https://hex.pm/packages/parse_trans pbkdf2_elixir BSD-3-Clause; Unrecognized license 1.4.2 https://hex.pm/packages/pbkdf2_elixir phil_columns MIT 3.1.0 https://hex.pm/packages/phil_columns phoenix MIT 1.6.6 https://hex.pm/packages/phoenix phoenix_ecto MIT 4.4.0 https://hex.pm/packages/phoenix_ecto phoenix_gon MIT 0.4.1 https://github.com/bonfire-networks/phoenix_gon phoenix_html MIT 3.2.0 https://hex.pm/packages/phoenix_html phoenix_live_dashboard MIT 0.6.5 https://hex.pm/packages/phoenix_live_dashboard phoenix_live_reload MIT 1.3.3 https://hex.pm/packages/phoenix_live_reload phoenix_live_view MIT 0.17.7 https://hex.pm/packages/phoenix_live_view phoenix_pubsub MIT 2.0.0 https://hex.pm/packages/phoenix_pubsub phoenix_view MIT 1.1.2 https://hex.pm/packages/phoenix_view plug Apache 2.0 1.13.3 https://hex.pm/packages/plug plug_cowboy Apache 2.0 2.5.2 https://hex.pm/packages/plug_cowboy plug_crypto Apache 2.0 1.2.2 https://hex.pm/packages/plug_crypto pointers Apache 2.0 0.6.0 https://github.com/bonfire-networks/pointers pointers_ulid MIT 0.2.2 https://github.com/bonfire-networks/pointers_ulid poolboy Unlicense; Apache 2.0; ISC 1.5.2 https://hex.pm/packages/poolboy postgrex Apache 2.0 0.16.2 https://hex.pm/packages/postgrex ranch ISC 1.8.0 https://hex.pm/packages/ranch recase MIT 0.7.0 https://hex.pm/packages/recase redirect Apache 2.0 0.3.0 https://hex.pm/packages/redirect scribe MIT 0.10.0 https://hex.pm/packages/scribe sentry MIT 8.0.6 https://hex.pm/packages/sentry sleeplocks MIT 1.1.1 https://hex.pm/packages/sleeplocks sobelow Apache 2.0 0.11.1 https://hex.pm/packages/sobelow sourceror Apache 2.0 0.10.0 https://hex.pm/packages/sourceror ssl_verify_fun MIT 1.1.6 https://hex.pm/packages/ssl_verify_fun stream_data Apache 2.0 0.5.0 https://hex.pm/packages/stream_data surface MIT 0.7.1 https://hex.pm/packages/surface surface_heroicons Undefined 0.5.3 https://github.com/rocketinsights/surface_heroicons table_rex MIT 3.1.1 https://hex.pm/packages/table_rex telemetry Apache 2.0 1.0.0 https://hex.pm/packages/telemetry telemetry_metrics Apache 2.0 0.6.1 https://hex.pm/packages/telemetry_metrics telemetry_poller Apache 2.0 1.0.0 https://hex.pm/packages/telemetry_poller tesla MIT 1.4.4 https://hex.pm/packages/tesla timex MIT 3.7.6 https://hex.pm/packages/timex towel MIT 0.2.1 https://hex.pm/packages/towel twinkle_star GPL v3 0.1.0 https://github.com/bonfire-networks/twinkle_star typed_struct MIT ~&gt; 0.2.1 https://hex.pm/packages/typed_struct tzdata MIT 1.1.1 https://hex.pm/packages/tzdata unicode_util_compat Apache 2.0 0.7.0 https://hex.pm/packages/unicode_util_compat unsafe MIT 1.0.1 https://hex.pm/packages/unsafe verbs MIT 0.6.1 https://github.com/shannonwells/verbs_ex voodoo Undefined 0.1.0 https://github.com/bonfire-networks/voodoo waffle Apache 2.0 1.1.6 https://hex.pm/packages/waffle where Apache 2.0 0.1.0 https://github.com/bonfire-networks/untangle zest Apache 2.0 0.1.2 https://hex.pm/packages/zest ------------------------------ ------------------------------------ ---------- ------------------------------------------------------------------","ref":"deps-cooperation.html"}]